{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { useDeprecated } from \"./utils/utils\";\nimport { observable, runInAction } from \"mobx\";\nimport { useState } from \"react\";\nexport function useAsObservableSource(current) {\n  if (\"production\" !== process.env.NODE_ENV) useDeprecated(\"[mobx-react-lite] 'useAsObservableSource' is deprecated, please store the values directly in an observable, for example by using 'useLocalObservable', and sync future updates using 'useEffect' when needed. See the README for examples.\");\n  var _a = __read(useState(function () {\n      return observable(current, {}, {\n        deep: false\n      });\n    }), 1),\n    res = _a[0];\n  runInAction(function () {\n    Object.assign(res, current);\n  });\n  return res;\n}","map":{"version":3,"sources":["../src/useAsObservableSource.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,aAAa,QAAQ,eAAe;AAC7C,SAAS,UAAU,EAAE,WAAW,QAAQ,MAAM;AAC9C,SAAS,QAAQ,QAAQ,OAAO;AAEhC,OAAM,SAAU,qBAAqB,CAAyB,OAAgB,EAAA;EAC1E,IAAI,YAAY,KAAK,OAAO,CAAC,GAAG,CAAC,QAAQ,EACrC,aAAa,CACT,4OAA4O,CAC/O;EACC,IAAA,EAAA,GAAA,MAAA,CAAQ,QAAQ,CAAC,YAAA;MAAM,OAAA,UAAU,CAAC,OAAO,EAAE,CAAA,CAAE,EAAE;QAAE,IAAI,EAAE;MAAK,CAAE,CAAC;IAAxC,CAAwC,CAAC,EAAA,CAAA,CAAA;IAA/D,GAAG,GAAA,EAAA,CAAA,CAAA,CAA4D;EACtE,WAAW,CAAC,YAAA;IACR,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,OAAO,CAAC;EAC/B,CAAC,CAAC;EACF,OAAO,GAAG;AACd","sourceRoot":"","sourcesContent":["var __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nimport { useDeprecated } from \"./utils/utils\";\nimport { observable, runInAction } from \"mobx\";\nimport { useState } from \"react\";\nexport function useAsObservableSource(current) {\n    if (\"production\" !== process.env.NODE_ENV)\n        useDeprecated(\"[mobx-react-lite] 'useAsObservableSource' is deprecated, please store the values directly in an observable, for example by using 'useLocalObservable', and sync future updates using 'useEffect' when needed. See the README for examples.\");\n    var _a = __read(useState(function () { return observable(current, {}, { deep: false }); }), 1), res = _a[0];\n    runInAction(function () {\n        Object.assign(res, current);\n    });\n    return res;\n}\n//# sourceMappingURL=useAsObservableSource.js.map"]},"metadata":{},"sourceType":"module"}