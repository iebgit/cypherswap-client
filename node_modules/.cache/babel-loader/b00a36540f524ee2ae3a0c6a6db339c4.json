{"ast":null,"code":"\"use strict\";\n\n// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { Reader, Writer } from \"./coders/abstract-coder\";\nimport { AddressCoder } from \"./coders/address\";\nimport { ArrayCoder } from \"./coders/array\";\nimport { BooleanCoder } from \"./coders/boolean\";\nimport { BytesCoder } from \"./coders/bytes\";\nimport { FixedBytesCoder } from \"./coders/fixed-bytes\";\nimport { NullCoder } from \"./coders/null\";\nimport { NumberCoder } from \"./coders/number\";\nimport { StringCoder } from \"./coders/string\";\nimport { TupleCoder } from \"./coders/tuple\";\nimport { ParamType } from \"./fragments\";\nconst paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);\nconst paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);\nexport class AbiCoder {\n  constructor(coerceFunc) {\n    defineReadOnly(this, \"coerceFunc\", coerceFunc || null);\n  }\n  _getCoder(param) {\n    switch (param.baseType) {\n      case \"address\":\n        return new AddressCoder(param.name);\n      case \"bool\":\n        return new BooleanCoder(param.name);\n      case \"string\":\n        return new StringCoder(param.name);\n      case \"bytes\":\n        return new BytesCoder(param.name);\n      case \"array\":\n        return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);\n      case \"tuple\":\n        return new TupleCoder((param.components || []).map(component => {\n          return this._getCoder(component);\n        }), param.name);\n      case \"\":\n        return new NullCoder(param.name);\n    }\n    // u?int[0-9]*\n    let match = param.type.match(paramTypeNumber);\n    if (match) {\n      let size = parseInt(match[2] || \"256\");\n      if (size === 0 || size > 256 || size % 8 !== 0) {\n        logger.throwArgumentError(\"invalid \" + match[1] + \" bit length\", \"param\", param);\n      }\n      return new NumberCoder(size / 8, match[1] === \"int\", param.name);\n    }\n    // bytes[0-9]+\n    match = param.type.match(paramTypeBytes);\n    if (match) {\n      let size = parseInt(match[1]);\n      if (size === 0 || size > 32) {\n        logger.throwArgumentError(\"invalid bytes length\", \"param\", param);\n      }\n      return new FixedBytesCoder(size, param.name);\n    }\n    return logger.throwArgumentError(\"invalid type\", \"type\", param.type);\n  }\n  _getWordSize() {\n    return 32;\n  }\n  _getReader(data, allowLoose) {\n    return new Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);\n  }\n  _getWriter() {\n    return new Writer(this._getWordSize());\n  }\n  getDefaultValue(types) {\n    const coders = types.map(type => this._getCoder(ParamType.from(type)));\n    const coder = new TupleCoder(coders, \"_\");\n    return coder.defaultValue();\n  }\n  encode(types, values) {\n    if (types.length !== values.length) {\n      logger.throwError(\"types/values length mismatch\", Logger.errors.INVALID_ARGUMENT, {\n        count: {\n          types: types.length,\n          values: values.length\n        },\n        value: {\n          types: types,\n          values: values\n        }\n      });\n    }\n    const coders = types.map(type => this._getCoder(ParamType.from(type)));\n    const coder = new TupleCoder(coders, \"_\");\n    const writer = this._getWriter();\n    coder.encode(writer, values);\n    return writer.data;\n  }\n  decode(types, data, loose) {\n    const coders = types.map(type => this._getCoder(ParamType.from(type)));\n    const coder = new TupleCoder(coders, \"_\");\n    return coder.decode(this._getReader(arrayify(data), loose));\n  }\n}\nexport const defaultAbiCoder = new AbiCoder();","map":{"version":3,"sources":["../src.ts/abi-coder.ts"],"names":[],"mappings":"AAAA,YAAY;;AAEZ;AAEA,SAAS,QAAQ,QAAmB,sBAAsB;AAC1D,SAAS,cAAc,QAAQ,2BAA2B;AAE1D,SAAS,MAAM,QAAQ,uBAAuB;AAC9C,SAAS,OAAO,QAAQ,YAAY;AACpC,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,OAAO,CAAC;AAElC,SAAgB,MAAM,EAAU,MAAM,QAAQ,yBAAyB;AACvE,SAAS,YAAY,QAAQ,kBAAkB;AAC/C,SAAS,UAAU,QAAQ,gBAAgB;AAC3C,SAAS,YAAY,QAAQ,kBAAkB;AAC/C,SAAS,UAAU,QAAQ,gBAAgB;AAC3C,SAAS,eAAe,QAAQ,sBAAsB;AACtD,SAAS,SAAS,QAAQ,eAAe;AACzC,SAAS,WAAW,QAAQ,iBAAiB;AAC7C,SAAS,WAAW,QAAQ,iBAAiB;AAC7C,SAAS,UAAU,QAAQ,gBAAgB;AAE3C,SAAS,SAAS,QAAQ,aAAa;AAGvC,MAAM,cAAc,GAAG,IAAI,MAAM,CAAC,iBAAiB,CAAC;AACpD,MAAM,eAAe,GAAG,IAAI,MAAM,CAAC,mBAAmB,CAAC;AAKvD,OAAM,MAAO,QAAQ,CAAA;EAGjB,WAAA,CAAY,UAAuB,EAAA;IAC/B,cAAc,CAAC,IAAI,EAAE,YAAY,EAAE,UAAU,IAAI,IAAI,CAAC;EAC1D;EAEA,SAAS,CAAC,KAAgB,EAAA;IAEtB,QAAQ,KAAK,CAAC,QAAQ;MAClB,KAAK,SAAS;QACV,OAAO,IAAI,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC;MACvC,KAAK,MAAM;QACP,OAAO,IAAI,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC;MACvC,KAAK,QAAQ;QACT,OAAO,IAAI,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC;MACtC,KAAK,OAAO;QACR,OAAO,IAAI,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC;MACrC,KAAK,OAAO;QACR,OAAO,IAAI,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,aAAa,CAAC,EAAE,KAAK,CAAC,WAAW,EAAE,KAAK,CAAC,IAAI,CAAC;MAC7F,KAAK,OAAO;QACR,OAAO,IAAI,UAAU,CAAC,CAAC,KAAK,CAAC,UAAU,IAAI,EAAE,EAAE,GAAG,CAAE,SAAS,IAAI;UAC7D,OAAO,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC;QACpC,CAAC,CAAC,EAAE,KAAK,CAAC,IAAI,CAAC;MACnB,KAAK,EAAE;QACH,OAAO,IAAI,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC;IAAC;IAGzC;IACA,IAAI,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC;IAC7C,IAAI,KAAK,EAAE;MACP,IAAI,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC;MACtC,IAAI,IAAI,KAAK,CAAC,IAAI,IAAI,GAAG,GAAG,IAAK,IAAI,GAAG,CAAC,KAAM,CAAC,EAAE;QAC9C,MAAM,CAAC,kBAAkB,CAAC,UAAU,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,aAAa,EAAE,OAAO,EAAE,KAAK,CAAC;MACnF;MACD,OAAO,IAAI,WAAW,CAAC,IAAI,GAAG,CAAC,EAAG,KAAK,CAAC,CAAC,CAAC,KAAK,KAAK,EAAG,KAAK,CAAC,IAAI,CAAC;IACrE;IAED;IACA,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC;IACxC,IAAI,KAAK,EAAE;MACP,IAAI,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;MAC7B,IAAI,IAAI,KAAK,CAAC,IAAI,IAAI,GAAG,EAAE,EAAE;QACzB,MAAM,CAAC,kBAAkB,CAAC,sBAAsB,EAAE,OAAO,EAAE,KAAK,CAAC;MACpE;MACD,OAAO,IAAI,eAAe,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC;IAC/C;IAED,OAAO,MAAM,CAAC,kBAAkB,CAAC,cAAc,EAAE,MAAM,EAAE,KAAK,CAAC,IAAI,CAAC;EACxE;EAEA,YAAY,GAAA;IAAa,OAAO,EAAE;EAAE;EAEpC,UAAU,CAAC,IAAgB,EAAE,UAAoB,EAAA;IAC7C,OAAO,IAAI,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,EAAE,EAAE,IAAI,CAAC,UAAU,EAAE,UAAU,CAAC;EAC7E;EAEA,UAAU,GAAA;IACN,OAAO,IAAI,MAAM,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;EAC1C;EAEA,eAAe,CAAC,KAAwC,EAAA;IACpD,MAAM,MAAM,GAAiB,KAAK,CAAC,GAAG,CAAE,IAAI,IAAK,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACtF,MAAM,KAAK,GAAG,IAAI,UAAU,CAAC,MAAM,EAAE,GAAG,CAAC;IACzC,OAAO,KAAK,CAAC,YAAY,EAAE;EAC/B;EAEA,MAAM,CAAC,KAAwC,EAAE,MAA0B,EAAA;IACvE,IAAI,KAAK,CAAC,MAAM,KAAK,MAAM,CAAC,MAAM,EAAE;MAChC,MAAM,CAAC,UAAU,CAAC,8BAA8B,EAAE,MAAM,CAAC,MAAM,CAAC,gBAAgB,EAAE;QAC9E,KAAK,EAAE;UAAE,KAAK,EAAE,KAAK,CAAC,MAAM;UAAE,MAAM,EAAE,MAAM,CAAC;QAAM,CAAE;QACrD,KAAK,EAAE;UAAE,KAAK,EAAE,KAAK;UAAE,MAAM,EAAE;QAAM;OACxC,CAAC;IACL;IAED,MAAM,MAAM,GAAG,KAAK,CAAC,GAAG,CAAE,IAAI,IAAK,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACxE,MAAM,KAAK,GAAI,IAAI,UAAU,CAAC,MAAM,EAAE,GAAG,CAAE;IAE3C,MAAM,MAAM,GAAG,IAAI,CAAC,UAAU,EAAE;IAChC,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC;IAC5B,OAAO,MAAM,CAAC,IAAI;EACtB;EAEA,MAAM,CAAC,KAAwC,EAAE,IAAe,EAAE,KAAe,EAAA;IAC7E,MAAM,MAAM,GAAiB,KAAK,CAAC,GAAG,CAAE,IAAI,IAAK,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACtF,MAAM,KAAK,GAAG,IAAI,UAAU,CAAC,MAAM,EAAE,GAAG,CAAC;IACzC,OAAO,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,CAAC;EAC/D;AACH;AAED,OAAO,MAAM,eAAe,GAAa,IAAI,QAAQ,EAAE","sourceRoot":"","sourcesContent":["\"use strict\";\n// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { Reader, Writer } from \"./coders/abstract-coder\";\nimport { AddressCoder } from \"./coders/address\";\nimport { ArrayCoder } from \"./coders/array\";\nimport { BooleanCoder } from \"./coders/boolean\";\nimport { BytesCoder } from \"./coders/bytes\";\nimport { FixedBytesCoder } from \"./coders/fixed-bytes\";\nimport { NullCoder } from \"./coders/null\";\nimport { NumberCoder } from \"./coders/number\";\nimport { StringCoder } from \"./coders/string\";\nimport { TupleCoder } from \"./coders/tuple\";\nimport { ParamType } from \"./fragments\";\nconst paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);\nconst paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);\nexport class AbiCoder {\n    constructor(coerceFunc) {\n        defineReadOnly(this, \"coerceFunc\", coerceFunc || null);\n    }\n    _getCoder(param) {\n        switch (param.baseType) {\n            case \"address\":\n                return new AddressCoder(param.name);\n            case \"bool\":\n                return new BooleanCoder(param.name);\n            case \"string\":\n                return new StringCoder(param.name);\n            case \"bytes\":\n                return new BytesCoder(param.name);\n            case \"array\":\n                return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);\n            case \"tuple\":\n                return new TupleCoder((param.components || []).map((component) => {\n                    return this._getCoder(component);\n                }), param.name);\n            case \"\":\n                return new NullCoder(param.name);\n        }\n        // u?int[0-9]*\n        let match = param.type.match(paramTypeNumber);\n        if (match) {\n            let size = parseInt(match[2] || \"256\");\n            if (size === 0 || size > 256 || (size % 8) !== 0) {\n                logger.throwArgumentError(\"invalid \" + match[1] + \" bit length\", \"param\", param);\n            }\n            return new NumberCoder(size / 8, (match[1] === \"int\"), param.name);\n        }\n        // bytes[0-9]+\n        match = param.type.match(paramTypeBytes);\n        if (match) {\n            let size = parseInt(match[1]);\n            if (size === 0 || size > 32) {\n                logger.throwArgumentError(\"invalid bytes length\", \"param\", param);\n            }\n            return new FixedBytesCoder(size, param.name);\n        }\n        return logger.throwArgumentError(\"invalid type\", \"type\", param.type);\n    }\n    _getWordSize() { return 32; }\n    _getReader(data, allowLoose) {\n        return new Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);\n    }\n    _getWriter() {\n        return new Writer(this._getWordSize());\n    }\n    getDefaultValue(types) {\n        const coders = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = new TupleCoder(coders, \"_\");\n        return coder.defaultValue();\n    }\n    encode(types, values) {\n        if (types.length !== values.length) {\n            logger.throwError(\"types/values length mismatch\", Logger.errors.INVALID_ARGUMENT, {\n                count: { types: types.length, values: values.length },\n                value: { types: types, values: values }\n            });\n        }\n        const coders = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = (new TupleCoder(coders, \"_\"));\n        const writer = this._getWriter();\n        coder.encode(writer, values);\n        return writer.data;\n    }\n    decode(types, data, loose) {\n        const coders = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = new TupleCoder(coders, \"_\");\n        return coder.decode(this._getReader(arrayify(data), loose));\n    }\n}\nexport const defaultAbiCoder = new AbiCoder();\n//# sourceMappingURL=abi-coder.js.map"]},"metadata":{},"sourceType":"module"}