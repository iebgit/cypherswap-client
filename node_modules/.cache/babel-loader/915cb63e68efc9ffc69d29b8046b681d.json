{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { defineReadOnly, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nconst allowedTransactionKeys = [\"accessList\", \"ccipReadEnabled\", \"chainId\", \"customData\", \"data\", \"from\", \"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"to\", \"type\", \"value\"];\nconst forwardErrors = [Logger.errors.INSUFFICIENT_FUNDS, Logger.errors.NONCE_EXPIRED, Logger.errors.REPLACEMENT_UNDERPRICED];\n;\n;\nexport class Signer {\n  ///////////////////\n  // Sub-classes MUST call super\n  constructor() {\n    logger.checkAbstract(new.target, Signer);\n    defineReadOnly(this, \"_isSigner\", true);\n  }\n  ///////////////////\n  // Sub-classes MAY override these\n  getBalance(blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._checkProvider(\"getBalance\");\n      return yield this.provider.getBalance(this.getAddress(), blockTag);\n    });\n  }\n  getTransactionCount(blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._checkProvider(\"getTransactionCount\");\n      return yield this.provider.getTransactionCount(this.getAddress(), blockTag);\n    });\n  }\n  // Populates \"from\" if unspecified, and estimates the gas for the transaction\n  estimateGas(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._checkProvider(\"estimateGas\");\n      const tx = yield resolveProperties(this.checkTransaction(transaction));\n      return yield this.provider.estimateGas(tx);\n    });\n  }\n  // Populates \"from\" if unspecified, and calls with the transaction\n  call(transaction, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._checkProvider(\"call\");\n      const tx = yield resolveProperties(this.checkTransaction(transaction));\n      return yield this.provider.call(tx, blockTag);\n    });\n  }\n  // Populates all fields in a transaction, signs it and sends it to the network\n  sendTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._checkProvider(\"sendTransaction\");\n      const tx = yield this.populateTransaction(transaction);\n      const signedTx = yield this.signTransaction(tx);\n      return yield this.provider.sendTransaction(signedTx);\n    });\n  }\n  getChainId() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._checkProvider(\"getChainId\");\n      const network = yield this.provider.getNetwork();\n      return network.chainId;\n    });\n  }\n  getGasPrice() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._checkProvider(\"getGasPrice\");\n      return yield this.provider.getGasPrice();\n    });\n  }\n  getFeeData() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._checkProvider(\"getFeeData\");\n      return yield this.provider.getFeeData();\n    });\n  }\n  resolveName(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this._checkProvider(\"resolveName\");\n      return yield this.provider.resolveName(name);\n    });\n  }\n  // Checks a transaction does not contain invalid keys and if\n  // no \"from\" is provided, populates it.\n  // - does NOT require a provider\n  // - adds \"from\" is not present\n  // - returns a COPY (safe to mutate the result)\n  // By default called from: (overriding these prevents it)\n  //   - call\n  //   - estimateGas\n  //   - populateTransaction (and therefor sendTransaction)\n  checkTransaction(transaction) {\n    for (const key in transaction) {\n      if (allowedTransactionKeys.indexOf(key) === -1) {\n        logger.throwArgumentError(\"invalid transaction key: \" + key, \"transaction\", transaction);\n      }\n    }\n    const tx = shallowCopy(transaction);\n    if (tx.from == null) {\n      tx.from = this.getAddress();\n    } else {\n      // Make sure any provided address matches this signer\n      tx.from = Promise.all([Promise.resolve(tx.from), this.getAddress()]).then(result => {\n        if (result[0].toLowerCase() !== result[1].toLowerCase()) {\n          logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n        }\n        return result[0];\n      });\n    }\n    return tx;\n  }\n  // Populates ALL keys for a transaction and checks that \"from\" matches\n  // this Signer. Should be used by sendTransaction but NOT by signTransaction.\n  // By default called from: (overriding these prevents it)\n  //   - sendTransaction\n  //\n  // Notes:\n  //  - We allow gasPrice for EIP-1559 as long as it matches maxFeePerGas\n  populateTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const tx = yield resolveProperties(this.checkTransaction(transaction));\n      if (tx.to != null) {\n        tx.to = Promise.resolve(tx.to).then(to => __awaiter(this, void 0, void 0, function* () {\n          if (to == null) {\n            return null;\n          }\n          const address = yield this.resolveName(to);\n          if (address == null) {\n            logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n          }\n          return address;\n        }));\n        // Prevent this error from causing an UnhandledPromiseException\n        tx.to.catch(error => {});\n      }\n      // Do not allow mixing pre-eip-1559 and eip-1559 properties\n      const hasEip1559 = tx.maxFeePerGas != null || tx.maxPriorityFeePerGas != null;\n      if (tx.gasPrice != null && (tx.type === 2 || hasEip1559)) {\n        logger.throwArgumentError(\"eip-1559 transaction do not support gasPrice\", \"transaction\", transaction);\n      } else if ((tx.type === 0 || tx.type === 1) && hasEip1559) {\n        logger.throwArgumentError(\"pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas\", \"transaction\", transaction);\n      }\n      if ((tx.type === 2 || tx.type == null) && tx.maxFeePerGas != null && tx.maxPriorityFeePerGas != null) {\n        // Fully-formed EIP-1559 transaction (skip getFeeData)\n        tx.type = 2;\n      } else if (tx.type === 0 || tx.type === 1) {\n        // Explicit Legacy or EIP-2930 transaction\n        // Populate missing gasPrice\n        if (tx.gasPrice == null) {\n          tx.gasPrice = this.getGasPrice();\n        }\n      } else {\n        // We need to get fee data to determine things\n        const feeData = yield this.getFeeData();\n        if (tx.type == null) {\n          // We need to auto-detect the intended type of this transaction...\n          if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {\n            // The network supports EIP-1559!\n            // Upgrade transaction from null to eip-1559\n            tx.type = 2;\n            if (tx.gasPrice != null) {\n              // Using legacy gasPrice property on an eip-1559 network,\n              // so use gasPrice as both fee properties\n              const gasPrice = tx.gasPrice;\n              delete tx.gasPrice;\n              tx.maxFeePerGas = gasPrice;\n              tx.maxPriorityFeePerGas = gasPrice;\n            } else {\n              // Populate missing fee data\n              if (tx.maxFeePerGas == null) {\n                tx.maxFeePerGas = feeData.maxFeePerGas;\n              }\n              if (tx.maxPriorityFeePerGas == null) {\n                tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n              }\n            }\n          } else if (feeData.gasPrice != null) {\n            // Network doesn't support EIP-1559...\n            // ...but they are trying to use EIP-1559 properties\n            if (hasEip1559) {\n              logger.throwError(\"network does not support EIP-1559\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"populateTransaction\"\n              });\n            }\n            // Populate missing fee data\n            if (tx.gasPrice == null) {\n              tx.gasPrice = feeData.gasPrice;\n            }\n            // Explicitly set untyped transaction to legacy\n            tx.type = 0;\n          } else {\n            // getFeeData has failed us.\n            logger.throwError(\"failed to get consistent fee data\", Logger.errors.UNSUPPORTED_OPERATION, {\n              operation: \"signer.getFeeData\"\n            });\n          }\n        } else if (tx.type === 2) {\n          // Explicitly using EIP-1559\n          // Populate missing fee data\n          if (tx.maxFeePerGas == null) {\n            tx.maxFeePerGas = feeData.maxFeePerGas;\n          }\n          if (tx.maxPriorityFeePerGas == null) {\n            tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n          }\n        }\n      }\n      if (tx.nonce == null) {\n        tx.nonce = this.getTransactionCount(\"pending\");\n      }\n      if (tx.gasLimit == null) {\n        tx.gasLimit = this.estimateGas(tx).catch(error => {\n          if (forwardErrors.indexOf(error.code) >= 0) {\n            throw error;\n          }\n          return logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error: error,\n            tx: tx\n          });\n        });\n      }\n      if (tx.chainId == null) {\n        tx.chainId = this.getChainId();\n      } else {\n        tx.chainId = Promise.all([Promise.resolve(tx.chainId), this.getChainId()]).then(results => {\n          if (results[1] !== 0 && results[0] !== results[1]) {\n            logger.throwArgumentError(\"chainId address mismatch\", \"transaction\", transaction);\n          }\n          return results[0];\n        });\n      }\n      return yield resolveProperties(tx);\n    });\n  }\n  ///////////////////\n  // Sub-classes SHOULD leave these alone\n  _checkProvider(operation) {\n    if (!this.provider) {\n      logger.throwError(\"missing provider\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: operation || \"_checkProvider\"\n      });\n    }\n  }\n  static isSigner(value) {\n    return !!(value && value._isSigner);\n  }\n}\nexport class VoidSigner extends Signer {\n  constructor(address, provider) {\n    super();\n    defineReadOnly(this, \"address\", address);\n    defineReadOnly(this, \"provider\", provider || null);\n  }\n  getAddress() {\n    return Promise.resolve(this.address);\n  }\n  _fail(message, operation) {\n    return Promise.resolve().then(() => {\n      logger.throwError(message, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: operation\n      });\n    });\n  }\n  signMessage(message) {\n    return this._fail(\"VoidSigner cannot sign messages\", \"signMessage\");\n  }\n  signTransaction(transaction) {\n    return this._fail(\"VoidSigner cannot sign transactions\", \"signTransaction\");\n  }\n  _signTypedData(domain, types, value) {\n    return this._fail(\"VoidSigner cannot sign typed data\", \"signTypedData\");\n  }\n  connect(provider) {\n    return new VoidSigner(this.address, provider);\n  }\n}","map":{"version":3,"sources":["../src.ts/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { defineReadOnly, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nconst allowedTransactionKeys = [\n    \"accessList\", \"ccipReadEnabled\", \"chainId\", \"customData\", \"data\", \"from\", \"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"to\", \"type\", \"value\"\n];\nconst forwardErrors = [\n    Logger.errors.INSUFFICIENT_FUNDS,\n    Logger.errors.NONCE_EXPIRED,\n    Logger.errors.REPLACEMENT_UNDERPRICED,\n];\n;\n;\nexport class Signer {\n    ///////////////////\n    // Sub-classes MUST call super\n    constructor() {\n        logger.checkAbstract(new.target, Signer);\n        defineReadOnly(this, \"_isSigner\", true);\n    }\n    ///////////////////\n    // Sub-classes MAY override these\n    getBalance(blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._checkProvider(\"getBalance\");\n            return yield this.provider.getBalance(this.getAddress(), blockTag);\n        });\n    }\n    getTransactionCount(blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._checkProvider(\"getTransactionCount\");\n            return yield this.provider.getTransactionCount(this.getAddress(), blockTag);\n        });\n    }\n    // Populates \"from\" if unspecified, and estimates the gas for the transaction\n    estimateGas(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._checkProvider(\"estimateGas\");\n            const tx = yield resolveProperties(this.checkTransaction(transaction));\n            return yield this.provider.estimateGas(tx);\n        });\n    }\n    // Populates \"from\" if unspecified, and calls with the transaction\n    call(transaction, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._checkProvider(\"call\");\n            const tx = yield resolveProperties(this.checkTransaction(transaction));\n            return yield this.provider.call(tx, blockTag);\n        });\n    }\n    // Populates all fields in a transaction, signs it and sends it to the network\n    sendTransaction(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._checkProvider(\"sendTransaction\");\n            const tx = yield this.populateTransaction(transaction);\n            const signedTx = yield this.signTransaction(tx);\n            return yield this.provider.sendTransaction(signedTx);\n        });\n    }\n    getChainId() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._checkProvider(\"getChainId\");\n            const network = yield this.provider.getNetwork();\n            return network.chainId;\n        });\n    }\n    getGasPrice() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._checkProvider(\"getGasPrice\");\n            return yield this.provider.getGasPrice();\n        });\n    }\n    getFeeData() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._checkProvider(\"getFeeData\");\n            return yield this.provider.getFeeData();\n        });\n    }\n    resolveName(name) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this._checkProvider(\"resolveName\");\n            return yield this.provider.resolveName(name);\n        });\n    }\n    // Checks a transaction does not contain invalid keys and if\n    // no \"from\" is provided, populates it.\n    // - does NOT require a provider\n    // - adds \"from\" is not present\n    // - returns a COPY (safe to mutate the result)\n    // By default called from: (overriding these prevents it)\n    //   - call\n    //   - estimateGas\n    //   - populateTransaction (and therefor sendTransaction)\n    checkTransaction(transaction) {\n        for (const key in transaction) {\n            if (allowedTransactionKeys.indexOf(key) === -1) {\n                logger.throwArgumentError(\"invalid transaction key: \" + key, \"transaction\", transaction);\n            }\n        }\n        const tx = shallowCopy(transaction);\n        if (tx.from == null) {\n            tx.from = this.getAddress();\n        }\n        else {\n            // Make sure any provided address matches this signer\n            tx.from = Promise.all([\n                Promise.resolve(tx.from),\n                this.getAddress()\n            ]).then((result) => {\n                if (result[0].toLowerCase() !== result[1].toLowerCase()) {\n                    logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n                }\n                return result[0];\n            });\n        }\n        return tx;\n    }\n    // Populates ALL keys for a transaction and checks that \"from\" matches\n    // this Signer. Should be used by sendTransaction but NOT by signTransaction.\n    // By default called from: (overriding these prevents it)\n    //   - sendTransaction\n    //\n    // Notes:\n    //  - We allow gasPrice for EIP-1559 as long as it matches maxFeePerGas\n    populateTransaction(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const tx = yield resolveProperties(this.checkTransaction(transaction));\n            if (tx.to != null) {\n                tx.to = Promise.resolve(tx.to).then((to) => __awaiter(this, void 0, void 0, function* () {\n                    if (to == null) {\n                        return null;\n                    }\n                    const address = yield this.resolveName(to);\n                    if (address == null) {\n                        logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n                    }\n                    return address;\n                }));\n                // Prevent this error from causing an UnhandledPromiseException\n                tx.to.catch((error) => { });\n            }\n            // Do not allow mixing pre-eip-1559 and eip-1559 properties\n            const hasEip1559 = (tx.maxFeePerGas != null || tx.maxPriorityFeePerGas != null);\n            if (tx.gasPrice != null && (tx.type === 2 || hasEip1559)) {\n                logger.throwArgumentError(\"eip-1559 transaction do not support gasPrice\", \"transaction\", transaction);\n            }\n            else if ((tx.type === 0 || tx.type === 1) && hasEip1559) {\n                logger.throwArgumentError(\"pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas\", \"transaction\", transaction);\n            }\n            if ((tx.type === 2 || tx.type == null) && (tx.maxFeePerGas != null && tx.maxPriorityFeePerGas != null)) {\n                // Fully-formed EIP-1559 transaction (skip getFeeData)\n                tx.type = 2;\n            }\n            else if (tx.type === 0 || tx.type === 1) {\n                // Explicit Legacy or EIP-2930 transaction\n                // Populate missing gasPrice\n                if (tx.gasPrice == null) {\n                    tx.gasPrice = this.getGasPrice();\n                }\n            }\n            else {\n                // We need to get fee data to determine things\n                const feeData = yield this.getFeeData();\n                if (tx.type == null) {\n                    // We need to auto-detect the intended type of this transaction...\n                    if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {\n                        // The network supports EIP-1559!\n                        // Upgrade transaction from null to eip-1559\n                        tx.type = 2;\n                        if (tx.gasPrice != null) {\n                            // Using legacy gasPrice property on an eip-1559 network,\n                            // so use gasPrice as both fee properties\n                            const gasPrice = tx.gasPrice;\n                            delete tx.gasPrice;\n                            tx.maxFeePerGas = gasPrice;\n                            tx.maxPriorityFeePerGas = gasPrice;\n                        }\n                        else {\n                            // Populate missing fee data\n                            if (tx.maxFeePerGas == null) {\n                                tx.maxFeePerGas = feeData.maxFeePerGas;\n                            }\n                            if (tx.maxPriorityFeePerGas == null) {\n                                tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n                            }\n                        }\n                    }\n                    else if (feeData.gasPrice != null) {\n                        // Network doesn't support EIP-1559...\n                        // ...but they are trying to use EIP-1559 properties\n                        if (hasEip1559) {\n                            logger.throwError(\"network does not support EIP-1559\", Logger.errors.UNSUPPORTED_OPERATION, {\n                                operation: \"populateTransaction\"\n                            });\n                        }\n                        // Populate missing fee data\n                        if (tx.gasPrice == null) {\n                            tx.gasPrice = feeData.gasPrice;\n                        }\n                        // Explicitly set untyped transaction to legacy\n                        tx.type = 0;\n                    }\n                    else {\n                        // getFeeData has failed us.\n                        logger.throwError(\"failed to get consistent fee data\", Logger.errors.UNSUPPORTED_OPERATION, {\n                            operation: \"signer.getFeeData\"\n                        });\n                    }\n                }\n                else if (tx.type === 2) {\n                    // Explicitly using EIP-1559\n                    // Populate missing fee data\n                    if (tx.maxFeePerGas == null) {\n                        tx.maxFeePerGas = feeData.maxFeePerGas;\n                    }\n                    if (tx.maxPriorityFeePerGas == null) {\n                        tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n                    }\n                }\n            }\n            if (tx.nonce == null) {\n                tx.nonce = this.getTransactionCount(\"pending\");\n            }\n            if (tx.gasLimit == null) {\n                tx.gasLimit = this.estimateGas(tx).catch((error) => {\n                    if (forwardErrors.indexOf(error.code) >= 0) {\n                        throw error;\n                    }\n                    return logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n                        error: error,\n                        tx: tx\n                    });\n                });\n            }\n            if (tx.chainId == null) {\n                tx.chainId = this.getChainId();\n            }\n            else {\n                tx.chainId = Promise.all([\n                    Promise.resolve(tx.chainId),\n                    this.getChainId()\n                ]).then((results) => {\n                    if (results[1] !== 0 && results[0] !== results[1]) {\n                        logger.throwArgumentError(\"chainId address mismatch\", \"transaction\", transaction);\n                    }\n                    return results[0];\n                });\n            }\n            return yield resolveProperties(tx);\n        });\n    }\n    ///////////////////\n    // Sub-classes SHOULD leave these alone\n    _checkProvider(operation) {\n        if (!this.provider) {\n            logger.throwError(\"missing provider\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: (operation || \"_checkProvider\")\n            });\n        }\n    }\n    static isSigner(value) {\n        return !!(value && value._isSigner);\n    }\n}\nexport class VoidSigner extends Signer {\n    constructor(address, provider) {\n        super();\n        defineReadOnly(this, \"address\", address);\n        defineReadOnly(this, \"provider\", provider || null);\n    }\n    getAddress() {\n        return Promise.resolve(this.address);\n    }\n    _fail(message, operation) {\n        return Promise.resolve().then(() => {\n            logger.throwError(message, Logger.errors.UNSUPPORTED_OPERATION, { operation: operation });\n        });\n    }\n    signMessage(message) {\n        return this._fail(\"VoidSigner cannot sign messages\", \"signMessage\");\n    }\n    signTransaction(transaction) {\n        return this._fail(\"VoidSigner cannot sign transactions\", \"signTransaction\");\n    }\n    _signTypedData(domain, types, value) {\n        return this._fail(\"VoidSigner cannot sign typed data\", \"signTypedData\");\n    }\n    connect(provider) {\n        return new VoidSigner(this.address, provider);\n    }\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}