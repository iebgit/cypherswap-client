{"ast":null,"code":"import { forwardRef, memo } from \"react\";\nimport { isUsingStaticRendering } from \"./staticRendering\";\nimport { useObserver } from \"./useObserver\";\nvar warnObserverOptionsDeprecated = true;\nvar hasSymbol = typeof Symbol === \"function\" && Symbol.for;\n// Using react-is had some issues (and operates on elements, not on types), see #608 / #609\nvar ReactForwardRefSymbol = hasSymbol ? Symbol.for(\"react.forward_ref\") : typeof forwardRef === \"function\" && forwardRef(function (props) {\n  return null;\n})[\"$$typeof\"];\nvar ReactMemoSymbol = hasSymbol ? Symbol.for(\"react.memo\") : typeof memo === \"function\" && memo(function (props) {\n  return null;\n})[\"$$typeof\"];\n// n.b. base case is not used for actual typings or exported in the typing files\nexport function observer(baseComponent,\n// TODO remove in next major\noptions) {\n  var _a;\n  if (process.env.NODE_ENV !== \"production\" && warnObserverOptionsDeprecated && options) {\n    warnObserverOptionsDeprecated = false;\n    console.warn(\"[mobx-react-lite] `observer(fn, { forwardRef: true })` is deprecated, use `observer(React.forwardRef(fn))`\");\n  }\n  if (ReactMemoSymbol && baseComponent[\"$$typeof\"] === ReactMemoSymbol) {\n    throw new Error(\"[mobx-react-lite] You are trying to use `observer` on a function component wrapped in either another `observer` or `React.memo`. The observer already applies 'React.memo' for you.\");\n  }\n  // The working of observer is explained step by step in this talk: https://www.youtube.com/watch?v=cPF4iBedoF0&feature=youtu.be&t=1307\n  if (isUsingStaticRendering()) {\n    return baseComponent;\n  }\n  var useForwardRef = (_a = options === null || options === void 0 ? void 0 : options.forwardRef) !== null && _a !== void 0 ? _a : false;\n  var render = baseComponent;\n  var baseComponentName = baseComponent.displayName || baseComponent.name;\n  // If already wrapped with forwardRef, unwrap,\n  // so we can patch render and apply memo\n  if (ReactForwardRefSymbol && baseComponent[\"$$typeof\"] === ReactForwardRefSymbol) {\n    useForwardRef = true;\n    render = baseComponent[\"render\"];\n    if (typeof render !== \"function\") {\n      throw new Error(\"[mobx-react-lite] `render` property of ForwardRef was not a function\");\n    }\n  }\n  var observerComponent = function (props, ref) {\n    return useObserver(function () {\n      return render(props, ref);\n    }, baseComponentName);\n  };\n  // Don't set `displayName` for anonymous components,\n  // so the `displayName` can be customized by user, see #3192.\n  if (baseComponentName !== \"\") {\n    ;\n    observerComponent.displayName = baseComponentName;\n  }\n  // Support legacy context: `contextTypes` must be applied before `memo`\n  if (baseComponent.contextTypes) {\n    ;\n    observerComponent.contextTypes = baseComponent.contextTypes;\n  }\n  if (useForwardRef) {\n    // `forwardRef` must be applied prior `memo`\n    // `forwardRef(observer(cmp))` throws:\n    // \"forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...))\"\n    observerComponent = forwardRef(observerComponent);\n  }\n  // memo; we are not interested in deep updates\n  // in props; we assume that if deep objects are changed,\n  // this is in observables, which would have been tracked anyway\n  observerComponent = memo(observerComponent);\n  copyStaticProperties(baseComponent, observerComponent);\n  if (\"production\" !== process.env.NODE_ENV) {\n    Object.defineProperty(observerComponent, \"contextTypes\", {\n      set: function () {\n        var _a;\n        throw new Error(\"[mobx-react-lite] `\".concat(this.displayName || ((_a = this.type) === null || _a === void 0 ? void 0 : _a.displayName) || \"Component\", \".contextTypes` must be set before applying `observer`.\"));\n      }\n    });\n  }\n  return observerComponent;\n}\n// based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js\nvar hoistBlackList = {\n  $$typeof: true,\n  render: true,\n  compare: true,\n  type: true,\n  // Don't redefine `displayName`,\n  // it's defined as getter-setter pair on `memo` (see #3192).\n  displayName: true\n};\nfunction copyStaticProperties(base, target) {\n  Object.keys(base).forEach(function (key) {\n    if (!hoistBlackList[key]) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key));\n    }\n  });\n}","map":{"version":3,"sources":["../src/observer.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { forwardRef, memo } from \"react\";\nimport { isUsingStaticRendering } from \"./staticRendering\";\nimport { useObserver } from \"./useObserver\";\nvar warnObserverOptionsDeprecated = true;\nvar hasSymbol = typeof Symbol === \"function\" && Symbol.for;\n// Using react-is had some issues (and operates on elements, not on types), see #608 / #609\nvar ReactForwardRefSymbol = hasSymbol\n    ? Symbol.for(\"react.forward_ref\")\n    : typeof forwardRef === \"function\" && forwardRef(function (props) { return null; })[\"$$typeof\"];\nvar ReactMemoSymbol = hasSymbol\n    ? Symbol.for(\"react.memo\")\n    : typeof memo === \"function\" && memo(function (props) { return null; })[\"$$typeof\"];\n// n.b. base case is not used for actual typings or exported in the typing files\nexport function observer(baseComponent, \n// TODO remove in next major\noptions) {\n    var _a;\n    if (process.env.NODE_ENV !== \"production\" && warnObserverOptionsDeprecated && options) {\n        warnObserverOptionsDeprecated = false;\n        console.warn(\"[mobx-react-lite] `observer(fn, { forwardRef: true })` is deprecated, use `observer(React.forwardRef(fn))`\");\n    }\n    if (ReactMemoSymbol && baseComponent[\"$$typeof\"] === ReactMemoSymbol) {\n        throw new Error(\"[mobx-react-lite] You are trying to use `observer` on a function component wrapped in either another `observer` or `React.memo`. The observer already applies 'React.memo' for you.\");\n    }\n    // The working of observer is explained step by step in this talk: https://www.youtube.com/watch?v=cPF4iBedoF0&feature=youtu.be&t=1307\n    if (isUsingStaticRendering()) {\n        return baseComponent;\n    }\n    var useForwardRef = (_a = options === null || options === void 0 ? void 0 : options.forwardRef) !== null && _a !== void 0 ? _a : false;\n    var render = baseComponent;\n    var baseComponentName = baseComponent.displayName || baseComponent.name;\n    // If already wrapped with forwardRef, unwrap,\n    // so we can patch render and apply memo\n    if (ReactForwardRefSymbol && baseComponent[\"$$typeof\"] === ReactForwardRefSymbol) {\n        useForwardRef = true;\n        render = baseComponent[\"render\"];\n        if (typeof render !== \"function\") {\n            throw new Error(\"[mobx-react-lite] `render` property of ForwardRef was not a function\");\n        }\n    }\n    var observerComponent = function (props, ref) {\n        return useObserver(function () { return render(props, ref); }, baseComponentName);\n    };\n    // Don't set `displayName` for anonymous components,\n    // so the `displayName` can be customized by user, see #3192.\n    if (baseComponentName !== \"\") {\n        ;\n        observerComponent.displayName = baseComponentName;\n    }\n    // Support legacy context: `contextTypes` must be applied before `memo`\n    if (baseComponent.contextTypes) {\n        ;\n        observerComponent.contextTypes = baseComponent.contextTypes;\n    }\n    if (useForwardRef) {\n        // `forwardRef` must be applied prior `memo`\n        // `forwardRef(observer(cmp))` throws:\n        // \"forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...))\"\n        observerComponent = forwardRef(observerComponent);\n    }\n    // memo; we are not interested in deep updates\n    // in props; we assume that if deep objects are changed,\n    // this is in observables, which would have been tracked anyway\n    observerComponent = memo(observerComponent);\n    copyStaticProperties(baseComponent, observerComponent);\n    if (\"production\" !== process.env.NODE_ENV) {\n        Object.defineProperty(observerComponent, \"contextTypes\", {\n            set: function () {\n                var _a;\n                throw new Error(\"[mobx-react-lite] `\".concat(this.displayName || ((_a = this.type) === null || _a === void 0 ? void 0 : _a.displayName) || \"Component\", \".contextTypes` must be set before applying `observer`.\"));\n            }\n        });\n    }\n    return observerComponent;\n}\n// based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js\nvar hoistBlackList = {\n    $$typeof: true,\n    render: true,\n    compare: true,\n    type: true,\n    // Don't redefine `displayName`,\n    // it's defined as getter-setter pair on `memo` (see #3192).\n    displayName: true\n};\nfunction copyStaticProperties(base, target) {\n    Object.keys(base).forEach(function (key) {\n        if (!hoistBlackList[key]) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key));\n        }\n    });\n}\n//# sourceMappingURL=observer.js.map"]},"metadata":{},"sourceType":"module"}