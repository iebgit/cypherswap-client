{"ast":null,"code":"\"use strict\";\n\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { showThrottleMessage } from \"./formatter\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n// This key was provided to ethers.js by Alchemy to be used by the\n// default provider, but it is recommended that for your own\n// production environments, that you acquire your own API key at:\n//   https://dashboard.alchemyapi.io\nconst defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\";\nexport class AlchemyWebSocketProvider extends WebSocketProvider {\n  constructor(network, apiKey) {\n    const provider = new AlchemyProvider(network, apiKey);\n    const url = provider.connection.url.replace(/^http/i, \"ws\").replace(\".alchemyapi.\", \".ws.alchemyapi.\");\n    super(url, provider.network);\n    defineReadOnly(this, \"apiKey\", provider.apiKey);\n  }\n  isCommunityResource() {\n    return this.apiKey === defaultApiKey;\n  }\n}\nexport class AlchemyProvider extends UrlJsonRpcProvider {\n  static getWebSocketProvider(network, apiKey) {\n    return new AlchemyWebSocketProvider(network, apiKey);\n  }\n  static getApiKey(apiKey) {\n    if (apiKey == null) {\n      return defaultApiKey;\n    }\n    if (apiKey && typeof apiKey !== \"string\") {\n      logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n    }\n    return apiKey;\n  }\n  static getUrl(network, apiKey) {\n    let host = null;\n    switch (network.name) {\n      case \"homestead\":\n        host = \"eth-mainnet.alchemyapi.io/v2/\";\n        break;\n      case \"goerli\":\n        host = \"eth-goerli.g.alchemy.com/v2/\";\n        break;\n      case \"matic\":\n        host = \"polygon-mainnet.g.alchemy.com/v2/\";\n        break;\n      case \"maticmum\":\n        host = \"polygon-mumbai.g.alchemy.com/v2/\";\n        break;\n      case \"arbitrum\":\n        host = \"arb-mainnet.g.alchemy.com/v2/\";\n        break;\n      case \"arbitrum-goerli\":\n        host = \"arb-goerli.g.alchemy.com/v2/\";\n        break;\n      case \"optimism\":\n        host = \"opt-mainnet.g.alchemy.com/v2/\";\n        break;\n      case \"optimism-goerli\":\n        host = \"opt-goerli.g.alchemy.com/v2/\";\n        break;\n      default:\n        logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n    }\n    return {\n      allowGzip: true,\n      url: \"https:/\" + \"/\" + host + apiKey,\n      throttleCallback: (attempt, url) => {\n        if (apiKey === defaultApiKey) {\n          showThrottleMessage();\n        }\n        return Promise.resolve(true);\n      }\n    };\n  }\n  isCommunityResource() {\n    return this.apiKey === defaultApiKey;\n  }\n}","map":{"version":3,"sources":["../src.ts/alchemy-provider.ts"],"names":[],"mappings":"AAAA,YAAY;;AAGZ,SAAS,cAAc,QAAQ,2BAA2B;AAG1D,SAA+B,mBAAmB,QAAQ,aAAa;AACvE,SAAS,iBAAiB,QAAQ,sBAAsB;AAExD,SAAS,MAAM,QAAQ,uBAAuB;AAC9C,SAAS,OAAO,QAAQ,YAAY;AACpC,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,OAAO,CAAC;AAElC,SAAS,kBAAkB,QAAQ,yBAAyB;AAE5D;AACA;AACA;AACA;AAEA,MAAM,aAAa,GAAG,kCAAkC;AAExD,OAAM,MAAO,wBAAyB,SAAQ,iBAAiB,CAAA;EAG3D,WAAA,CAAY,OAAoB,EAAE,MAAY,EAAA;IAC1C,MAAM,QAAQ,GAAG,IAAI,eAAe,CAAC,OAAO,EAAE,MAAM,CAAC;IAErD,MAAM,GAAG,GAAG,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,CACvB,OAAO,CAAC,cAAc,EAAE,iBAAiB,CAAC;IAE9E,KAAK,CAAC,GAAG,EAAE,QAAQ,CAAC,OAAO,CAAC;IAC5B,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAE,QAAQ,CAAC,MAAM,CAAC;EACnD;EAEA,mBAAmB,GAAA;IACf,OAAQ,IAAI,CAAC,MAAM,KAAK,aAAa;EACzC;AACH;AAED,OAAM,MAAO,eAAgB,SAAQ,kBAAkB,CAAA;EAEnD,OAAO,oBAAoB,CAAC,OAAoB,EAAE,MAAY,EAAA;IAC1D,OAAO,IAAI,wBAAwB,CAAC,OAAO,EAAE,MAAM,CAAC;EACxD;EAEA,OAAO,SAAS,CAAC,MAAW,EAAA;IACxB,IAAI,MAAM,IAAI,IAAI,EAAE;MAAE,OAAO,aAAa;IAAG;IAC7C,IAAI,MAAM,IAAI,OAAO,MAAO,KAAK,QAAQ,EAAE;MACvC,MAAM,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,QAAQ,EAAE,MAAM,CAAC;IAChE;IACD,OAAO,MAAM;EACjB;EAEA,OAAO,MAAM,CAAC,OAAgB,EAAE,MAAc,EAAA;IAC1C,IAAI,IAAI,GAAG,IAAI;IACf,QAAQ,OAAO,CAAC,IAAI;MAChB,KAAK,WAAW;QACZ,IAAI,GAAG,+BAA+B;QACtC;MACJ,KAAK,QAAQ;QACT,IAAI,GAAG,8BAA8B;QACrC;MACJ,KAAK,OAAO;QACR,IAAI,GAAG,mCAAmC;QAC1C;MACJ,KAAK,UAAU;QACX,IAAI,GAAG,kCAAkC;QACzC;MACJ,KAAK,UAAU;QACX,IAAI,GAAG,+BAA+B;QACtC;MACJ,KAAK,iBAAiB;QAClB,IAAI,GAAG,8BAA8B;QACrC;MACJ,KAAK,UAAU;QACX,IAAI,GAAG,+BAA+B;QACtC;MACJ,KAAK,iBAAiB;QAClB,IAAI,GAAG,8BAA8B;QACrC;MACJ;QACG,MAAM,CAAC,kBAAkB,CAAC,qBAAqB,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;IAAC;IAGjF,OAAO;MACH,SAAS,EAAE,IAAI;MACf,GAAG,EAAG,SAAS,GAAG,GAAG,GAAG,IAAI,GAAG,MAAO;MACtC,gBAAgB,EAAE,CAAC,OAAe,EAAE,GAAW,KAAI;QAC/C,IAAI,MAAM,KAAK,aAAa,EAAE;UAC1B,mBAAmB,EAAE;QACxB;QACD,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC;MAChC;KACH;EACL;EAEA,mBAAmB,GAAA;IACf,OAAQ,IAAI,CAAC,MAAM,KAAK,aAAa;EACzC;AACH","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { showThrottleMessage } from \"./formatter\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n// This key was provided to ethers.js by Alchemy to be used by the\n// default provider, but it is recommended that for your own\n// production environments, that you acquire your own API key at:\n//   https://dashboard.alchemyapi.io\nconst defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\";\nexport class AlchemyWebSocketProvider extends WebSocketProvider {\n    constructor(network, apiKey) {\n        const provider = new AlchemyProvider(network, apiKey);\n        const url = provider.connection.url.replace(/^http/i, \"ws\")\n            .replace(\".alchemyapi.\", \".ws.alchemyapi.\");\n        super(url, provider.network);\n        defineReadOnly(this, \"apiKey\", provider.apiKey);\n    }\n    isCommunityResource() {\n        return (this.apiKey === defaultApiKey);\n    }\n}\nexport class AlchemyProvider extends UrlJsonRpcProvider {\n    static getWebSocketProvider(network, apiKey) {\n        return new AlchemyWebSocketProvider(network, apiKey);\n    }\n    static getApiKey(apiKey) {\n        if (apiKey == null) {\n            return defaultApiKey;\n        }\n        if (apiKey && typeof (apiKey) !== \"string\") {\n            logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n        }\n        return apiKey;\n    }\n    static getUrl(network, apiKey) {\n        let host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"eth-mainnet.alchemyapi.io/v2/\";\n                break;\n            case \"goerli\":\n                host = \"eth-goerli.g.alchemy.com/v2/\";\n                break;\n            case \"matic\":\n                host = \"polygon-mainnet.g.alchemy.com/v2/\";\n                break;\n            case \"maticmum\":\n                host = \"polygon-mumbai.g.alchemy.com/v2/\";\n                break;\n            case \"arbitrum\":\n                host = \"arb-mainnet.g.alchemy.com/v2/\";\n                break;\n            case \"arbitrum-goerli\":\n                host = \"arb-goerli.g.alchemy.com/v2/\";\n                break;\n            case \"optimism\":\n                host = \"opt-mainnet.g.alchemy.com/v2/\";\n                break;\n            case \"optimism-goerli\":\n                host = \"opt-goerli.g.alchemy.com/v2/\";\n                break;\n            default:\n                logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n        return {\n            allowGzip: true,\n            url: (\"https:/\" + \"/\" + host + apiKey),\n            throttleCallback: (attempt, url) => {\n                if (apiKey === defaultApiKey) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n    }\n    isCommunityResource() {\n        return (this.apiKey === defaultApiKey);\n    }\n}\n//# sourceMappingURL=alchemy-provider.js.map"]},"metadata":{},"sourceType":"module"}