{"ast":null,"code":"\"use strict\";\n\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexDataSlice, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { id } from \"@ethersproject/hash\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, Description, getStatic } from \"@ethersproject/properties\";\nimport { defaultAbiCoder } from \"./abi-coder\";\nimport { checkResultErrors } from \"./coders/abstract-coder\";\nimport { ConstructorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, ParamType } from \"./fragments\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport { checkResultErrors };\nexport class LogDescription extends Description {}\nexport class TransactionDescription extends Description {}\nexport class ErrorDescription extends Description {}\nexport class Indexed extends Description {\n  static isIndexed(value) {\n    return !!(value && value._isIndexed);\n  }\n}\nconst BuiltinErrors = {\n  \"0x08c379a0\": {\n    signature: \"Error(string)\",\n    name: \"Error\",\n    inputs: [\"string\"],\n    reason: true\n  },\n  \"0x4e487b71\": {\n    signature: \"Panic(uint256)\",\n    name: \"Panic\",\n    inputs: [\"uint256\"]\n  }\n};\nfunction wrapAccessError(property, error) {\n  const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);\n  wrap.error = error;\n  return wrap;\n}\n/*\nfunction checkNames(fragment: Fragment, type: \"input\" | \"output\", params: Array<ParamType>): void {\n    params.reduce((accum, param) => {\n        if (param.name) {\n            if (accum[param.name]) {\n                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format(\"full\") }`, \"fragment\", fragment);\n            }\n            accum[param.name] = true;\n        }\n        return accum;\n    }, <{ [ name: string ]: boolean }>{ });\n}\n*/\nexport class Interface {\n  constructor(fragments) {\n    let abi = [];\n    if (typeof fragments === \"string\") {\n      abi = JSON.parse(fragments);\n    } else {\n      abi = fragments;\n    }\n    defineReadOnly(this, \"fragments\", abi.map(fragment => {\n      return Fragment.from(fragment);\n    }).filter(fragment => fragment != null));\n    defineReadOnly(this, \"_abiCoder\", getStatic(new.target, \"getAbiCoder\")());\n    defineReadOnly(this, \"functions\", {});\n    defineReadOnly(this, \"errors\", {});\n    defineReadOnly(this, \"events\", {});\n    defineReadOnly(this, \"structs\", {});\n    // Add all fragments by their signature\n    this.fragments.forEach(fragment => {\n      let bucket = null;\n      switch (fragment.type) {\n        case \"constructor\":\n          if (this.deploy) {\n            logger.warn(\"duplicate definition - constructor\");\n            return;\n          }\n          //checkNames(fragment, \"input\", fragment.inputs);\n          defineReadOnly(this, \"deploy\", fragment);\n          return;\n        case \"function\":\n          //checkNames(fragment, \"input\", fragment.inputs);\n          //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n          bucket = this.functions;\n          break;\n        case \"event\":\n          //checkNames(fragment, \"input\", fragment.inputs);\n          bucket = this.events;\n          break;\n        case \"error\":\n          bucket = this.errors;\n          break;\n        default:\n          return;\n      }\n      let signature = fragment.format();\n      if (bucket[signature]) {\n        logger.warn(\"duplicate definition - \" + signature);\n        return;\n      }\n      bucket[signature] = fragment;\n    });\n    // If we do not have a constructor add a default\n    if (!this.deploy) {\n      defineReadOnly(this, \"deploy\", ConstructorFragment.from({\n        payable: false,\n        type: \"constructor\"\n      }));\n    }\n    defineReadOnly(this, \"_isInterface\", true);\n  }\n  format(format) {\n    if (!format) {\n      format = FormatTypes.full;\n    }\n    if (format === FormatTypes.sighash) {\n      logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", format);\n    }\n    const abi = this.fragments.map(fragment => fragment.format(format));\n    // We need to re-bundle the JSON fragments a bit\n    if (format === FormatTypes.json) {\n      return JSON.stringify(abi.map(j => JSON.parse(j)));\n    }\n    return abi;\n  }\n  // Sub-classes can override these to handle other blockchains\n  static getAbiCoder() {\n    return defaultAbiCoder;\n  }\n  static getAddress(address) {\n    return getAddress(address);\n  }\n  static getSighash(fragment) {\n    return hexDataSlice(id(fragment.format()), 0, 4);\n  }\n  static getEventTopic(eventFragment) {\n    return id(eventFragment.format());\n  }\n  // Find a function definition by any means necessary (unless it is ambiguous)\n  getFunction(nameOrSignatureOrSighash) {\n    if (isHexString(nameOrSignatureOrSighash)) {\n      for (const name in this.functions) {\n        if (nameOrSignatureOrSighash === this.getSighash(name)) {\n          return this.functions[name];\n        }\n      }\n      logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n    }\n    // It is a bare name, look up the function (will return null if ambiguous)\n    if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n      const name = nameOrSignatureOrSighash.trim();\n      const matching = Object.keys(this.functions).filter(f => f.split(\"(\" /* fix:) */)[0] === name);\n      if (matching.length === 0) {\n        logger.throwArgumentError(\"no matching function\", \"name\", name);\n      } else if (matching.length > 1) {\n        logger.throwArgumentError(\"multiple matching functions\", \"name\", name);\n      }\n      return this.functions[matching[0]];\n    }\n    // Normalize the signature and lookup the function\n    const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n    if (!result) {\n      logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n    }\n    return result;\n  }\n  // Find an event definition by any means necessary (unless it is ambiguous)\n  getEvent(nameOrSignatureOrTopic) {\n    if (isHexString(nameOrSignatureOrTopic)) {\n      const topichash = nameOrSignatureOrTopic.toLowerCase();\n      for (const name in this.events) {\n        if (topichash === this.getEventTopic(name)) {\n          return this.events[name];\n        }\n      }\n      logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n    }\n    // It is a bare name, look up the function (will return null if ambiguous)\n    if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n      const name = nameOrSignatureOrTopic.trim();\n      const matching = Object.keys(this.events).filter(f => f.split(\"(\" /* fix:) */)[0] === name);\n      if (matching.length === 0) {\n        logger.throwArgumentError(\"no matching event\", \"name\", name);\n      } else if (matching.length > 1) {\n        logger.throwArgumentError(\"multiple matching events\", \"name\", name);\n      }\n      return this.events[matching[0]];\n    }\n    // Normalize the signature and lookup the function\n    const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];\n    if (!result) {\n      logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n    }\n    return result;\n  }\n  // Find a function definition by any means necessary (unless it is ambiguous)\n  getError(nameOrSignatureOrSighash) {\n    if (isHexString(nameOrSignatureOrSighash)) {\n      const getSighash = getStatic(this.constructor, \"getSighash\");\n      for (const name in this.errors) {\n        const error = this.errors[name];\n        if (nameOrSignatureOrSighash === getSighash(error)) {\n          return this.errors[name];\n        }\n      }\n      logger.throwArgumentError(\"no matching error\", \"sighash\", nameOrSignatureOrSighash);\n    }\n    // It is a bare name, look up the function (will return null if ambiguous)\n    if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n      const name = nameOrSignatureOrSighash.trim();\n      const matching = Object.keys(this.errors).filter(f => f.split(\"(\" /* fix:) */)[0] === name);\n      if (matching.length === 0) {\n        logger.throwArgumentError(\"no matching error\", \"name\", name);\n      } else if (matching.length > 1) {\n        logger.throwArgumentError(\"multiple matching errors\", \"name\", name);\n      }\n      return this.errors[matching[0]];\n    }\n    // Normalize the signature and lookup the function\n    const result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n    if (!result) {\n      logger.throwArgumentError(\"no matching error\", \"signature\", nameOrSignatureOrSighash);\n    }\n    return result;\n  }\n  // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n  getSighash(fragment) {\n    if (typeof fragment === \"string\") {\n      try {\n        fragment = this.getFunction(fragment);\n      } catch (error) {\n        try {\n          fragment = this.getError(fragment);\n        } catch (_) {\n          throw error;\n        }\n      }\n    }\n    return getStatic(this.constructor, \"getSighash\")(fragment);\n  }\n  // Get the topic (the bytes32 hash) used by Solidity to identify an event\n  getEventTopic(eventFragment) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n    return getStatic(this.constructor, \"getEventTopic\")(eventFragment);\n  }\n  _decodeParams(params, data) {\n    return this._abiCoder.decode(params, data);\n  }\n  _encodeParams(params, values) {\n    return this._abiCoder.encode(params, values);\n  }\n  encodeDeploy(values) {\n    return this._encodeParams(this.deploy.inputs, values || []);\n  }\n  decodeErrorResult(fragment, data) {\n    if (typeof fragment === \"string\") {\n      fragment = this.getError(fragment);\n    }\n    const bytes = arrayify(data);\n    if (hexlify(bytes.slice(0, 4)) !== this.getSighash(fragment)) {\n      logger.throwArgumentError(`data signature does not match error ${fragment.name}.`, \"data\", hexlify(bytes));\n    }\n    return this._decodeParams(fragment.inputs, bytes.slice(4));\n  }\n  encodeErrorResult(fragment, values) {\n    if (typeof fragment === \"string\") {\n      fragment = this.getError(fragment);\n    }\n    return hexlify(concat([this.getSighash(fragment), this._encodeParams(fragment.inputs, values || [])]));\n  }\n  // Decode the data for a function call (e.g. tx.data)\n  decodeFunctionData(functionFragment, data) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n    const bytes = arrayify(data);\n    if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n      logger.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, \"data\", hexlify(bytes));\n    }\n    return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n  }\n  // Encode the data for a function call (e.g. tx.data)\n  encodeFunctionData(functionFragment, values) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n    return hexlify(concat([this.getSighash(functionFragment), this._encodeParams(functionFragment.inputs, values || [])]));\n  }\n  // Decode the result from a function call (e.g. from eth_call)\n  decodeFunctionResult(functionFragment, data) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n    let bytes = arrayify(data);\n    let reason = null;\n    let message = \"\";\n    let errorArgs = null;\n    let errorName = null;\n    let errorSignature = null;\n    switch (bytes.length % this._abiCoder._getWordSize()) {\n      case 0:\n        try {\n          return this._abiCoder.decode(functionFragment.outputs, bytes);\n        } catch (error) {}\n        break;\n      case 4:\n        {\n          const selector = hexlify(bytes.slice(0, 4));\n          const builtin = BuiltinErrors[selector];\n          if (builtin) {\n            errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));\n            errorName = builtin.name;\n            errorSignature = builtin.signature;\n            if (builtin.reason) {\n              reason = errorArgs[0];\n            }\n            if (errorName === \"Error\") {\n              message = `; VM Exception while processing transaction: reverted with reason string ${JSON.stringify(errorArgs[0])}`;\n            } else if (errorName === \"Panic\") {\n              message = `; VM Exception while processing transaction: reverted with panic code ${errorArgs[0]}`;\n            }\n          } else {\n            try {\n              const error = this.getError(selector);\n              errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));\n              errorName = error.name;\n              errorSignature = error.format();\n            } catch (error) {}\n          }\n          break;\n        }\n    }\n    return logger.throwError(\"call revert exception\" + message, Logger.errors.CALL_EXCEPTION, {\n      method: functionFragment.format(),\n      data: hexlify(data),\n      errorArgs,\n      errorName,\n      errorSignature,\n      reason\n    });\n  }\n  // Encode the result for a function call (e.g. for eth_call)\n  encodeFunctionResult(functionFragment, values) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n    return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));\n  }\n  // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n  encodeFilterTopics(eventFragment, values) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n    if (values.length > eventFragment.inputs.length) {\n      logger.throwError(\"too many arguments for \" + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {\n        argument: \"values\",\n        value: values\n      });\n    }\n    let topics = [];\n    if (!eventFragment.anonymous) {\n      topics.push(this.getEventTopic(eventFragment));\n    }\n    const encodeTopic = (param, value) => {\n      if (param.type === \"string\") {\n        return id(value);\n      } else if (param.type === \"bytes\") {\n        return keccak256(hexlify(value));\n      }\n      if (param.type === \"bool\" && typeof value === \"boolean\") {\n        value = value ? \"0x01\" : \"0x00\";\n      }\n      if (param.type.match(/^u?int/)) {\n        value = BigNumber.from(value).toHexString();\n      }\n      // Check addresses are valid\n      if (param.type === \"address\") {\n        this._abiCoder.encode([\"address\"], [value]);\n      }\n      return hexZeroPad(hexlify(value), 32);\n    };\n    values.forEach((value, index) => {\n      let param = eventFragment.inputs[index];\n      if (!param.indexed) {\n        if (value != null) {\n          logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", \"contract.\" + param.name, value);\n        }\n        return;\n      }\n      if (value == null) {\n        topics.push(null);\n      } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n        logger.throwArgumentError(\"filtering with tuples or arrays not supported\", \"contract.\" + param.name, value);\n      } else if (Array.isArray(value)) {\n        topics.push(value.map(value => encodeTopic(param, value)));\n      } else {\n        topics.push(encodeTopic(param, value));\n      }\n    });\n    // Trim off trailing nulls\n    while (topics.length && topics[topics.length - 1] === null) {\n      topics.pop();\n    }\n    return topics;\n  }\n  encodeEventLog(eventFragment, values) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n    const topics = [];\n    const dataTypes = [];\n    const dataValues = [];\n    if (!eventFragment.anonymous) {\n      topics.push(this.getEventTopic(eventFragment));\n    }\n    if (values.length !== eventFragment.inputs.length) {\n      logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n    }\n    eventFragment.inputs.forEach((param, index) => {\n      const value = values[index];\n      if (param.indexed) {\n        if (param.type === \"string\") {\n          topics.push(id(value));\n        } else if (param.type === \"bytes\") {\n          topics.push(keccak256(value));\n        } else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n          // @TODO\n          throw new Error(\"not implemented\");\n        } else {\n          topics.push(this._abiCoder.encode([param.type], [value]));\n        }\n      } else {\n        dataTypes.push(param);\n        dataValues.push(value);\n      }\n    });\n    return {\n      data: this._abiCoder.encode(dataTypes, dataValues),\n      topics: topics\n    };\n  }\n  // Decode a filter for the event and the search criteria\n  decodeEventLog(eventFragment, data, topics) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n    if (topics != null && !eventFragment.anonymous) {\n      let topicHash = this.getEventTopic(eventFragment);\n      if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n        logger.throwError(\"fragment/topic mismatch\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"topics[0]\",\n          expected: topicHash,\n          value: topics[0]\n        });\n      }\n      topics = topics.slice(1);\n    }\n    let indexed = [];\n    let nonIndexed = [];\n    let dynamic = [];\n    eventFragment.inputs.forEach((param, index) => {\n      if (param.indexed) {\n        if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n          indexed.push(ParamType.fromObject({\n            type: \"bytes32\",\n            name: param.name\n          }));\n          dynamic.push(true);\n        } else {\n          indexed.push(param);\n          dynamic.push(false);\n        }\n      } else {\n        nonIndexed.push(param);\n        dynamic.push(false);\n      }\n    });\n    let resultIndexed = topics != null ? this._abiCoder.decode(indexed, concat(topics)) : null;\n    let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);\n    let result = [];\n    let nonIndexedIndex = 0,\n      indexedIndex = 0;\n    eventFragment.inputs.forEach((param, index) => {\n      if (param.indexed) {\n        if (resultIndexed == null) {\n          result[index] = new Indexed({\n            _isIndexed: true,\n            hash: null\n          });\n        } else if (dynamic[index]) {\n          result[index] = new Indexed({\n            _isIndexed: true,\n            hash: resultIndexed[indexedIndex++]\n          });\n        } else {\n          try {\n            result[index] = resultIndexed[indexedIndex++];\n          } catch (error) {\n            result[index] = error;\n          }\n        }\n      } else {\n        try {\n          result[index] = resultNonIndexed[nonIndexedIndex++];\n        } catch (error) {\n          result[index] = error;\n        }\n      }\n      // Add the keyword argument if named and safe\n      if (param.name && result[param.name] == null) {\n        const value = result[index];\n        // Make error named values throw on access\n        if (value instanceof Error) {\n          Object.defineProperty(result, param.name, {\n            enumerable: true,\n            get: () => {\n              throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value);\n            }\n          });\n        } else {\n          result[param.name] = value;\n        }\n      }\n    });\n    // Make all error indexed values throw on access\n    for (let i = 0; i < result.length; i++) {\n      const value = result[i];\n      if (value instanceof Error) {\n        Object.defineProperty(result, i, {\n          enumerable: true,\n          get: () => {\n            throw wrapAccessError(`index ${i}`, value);\n          }\n        });\n      }\n    }\n    return Object.freeze(result);\n  }\n  // Given a transaction, find the matching function fragment (if any) and\n  // determine all its properties and call parameters\n  parseTransaction(tx) {\n    let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());\n    if (!fragment) {\n      return null;\n    }\n    return new TransactionDescription({\n      args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n      functionFragment: fragment,\n      name: fragment.name,\n      signature: fragment.format(),\n      sighash: this.getSighash(fragment),\n      value: BigNumber.from(tx.value || \"0\")\n    });\n  }\n  // @TODO\n  //parseCallResult(data: BytesLike): ??\n  // Given an event log, find the matching event fragment (if any) and\n  // determine all its properties and values\n  parseLog(log) {\n    let fragment = this.getEvent(log.topics[0]);\n    if (!fragment || fragment.anonymous) {\n      return null;\n    }\n    // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n    //        Probably not, because just because it is the only event in the ABI does\n    //        not mean we have the full ABI; maybe just a fragment?\n    return new LogDescription({\n      eventFragment: fragment,\n      name: fragment.name,\n      signature: fragment.format(),\n      topic: this.getEventTopic(fragment),\n      args: this.decodeEventLog(fragment, log.data, log.topics)\n    });\n  }\n  parseError(data) {\n    const hexData = hexlify(data);\n    let fragment = this.getError(hexData.substring(0, 10).toLowerCase());\n    if (!fragment) {\n      return null;\n    }\n    return new ErrorDescription({\n      args: this._abiCoder.decode(fragment.inputs, \"0x\" + hexData.substring(10)),\n      errorFragment: fragment,\n      name: fragment.name,\n      signature: fragment.format(),\n      sighash: this.getSighash(fragment)\n    });\n  }\n  /*\n  static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n      if (Interface.isInterface(value)) {\n          return value;\n      }\n      if (typeof(value) === \"string\") {\n          return new Interface(JSON.parse(value));\n      }\n      return new Interface(value);\n  }\n  */\n  static isInterface(value) {\n    return !!(value && value._isInterface);\n  }\n}","map":{"version":3,"sources":["../src.ts/interface.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexDataSlice, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { id } from \"@ethersproject/hash\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, Description, getStatic } from \"@ethersproject/properties\";\nimport { defaultAbiCoder } from \"./abi-coder\";\nimport { checkResultErrors } from \"./coders/abstract-coder\";\nimport { ConstructorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, ParamType } from \"./fragments\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport { checkResultErrors };\nexport class LogDescription extends Description {\n}\nexport class TransactionDescription extends Description {\n}\nexport class ErrorDescription extends Description {\n}\nexport class Indexed extends Description {\n    static isIndexed(value) {\n        return !!(value && value._isIndexed);\n    }\n}\nconst BuiltinErrors = {\n    \"0x08c379a0\": { signature: \"Error(string)\", name: \"Error\", inputs: [\"string\"], reason: true },\n    \"0x4e487b71\": { signature: \"Panic(uint256)\", name: \"Panic\", inputs: [\"uint256\"] }\n};\nfunction wrapAccessError(property, error) {\n    const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);\n    wrap.error = error;\n    return wrap;\n}\n/*\nfunction checkNames(fragment: Fragment, type: \"input\" | \"output\", params: Array<ParamType>): void {\n    params.reduce((accum, param) => {\n        if (param.name) {\n            if (accum[param.name]) {\n                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format(\"full\") }`, \"fragment\", fragment);\n            }\n            accum[param.name] = true;\n        }\n        return accum;\n    }, <{ [ name: string ]: boolean }>{ });\n}\n*/\nexport class Interface {\n    constructor(fragments) {\n        let abi = [];\n        if (typeof (fragments) === \"string\") {\n            abi = JSON.parse(fragments);\n        }\n        else {\n            abi = fragments;\n        }\n        defineReadOnly(this, \"fragments\", abi.map((fragment) => {\n            return Fragment.from(fragment);\n        }).filter((fragment) => (fragment != null)));\n        defineReadOnly(this, \"_abiCoder\", getStatic(new.target, \"getAbiCoder\")());\n        defineReadOnly(this, \"functions\", {});\n        defineReadOnly(this, \"errors\", {});\n        defineReadOnly(this, \"events\", {});\n        defineReadOnly(this, \"structs\", {});\n        // Add all fragments by their signature\n        this.fragments.forEach((fragment) => {\n            let bucket = null;\n            switch (fragment.type) {\n                case \"constructor\":\n                    if (this.deploy) {\n                        logger.warn(\"duplicate definition - constructor\");\n                        return;\n                    }\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    defineReadOnly(this, \"deploy\", fragment);\n                    return;\n                case \"function\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n                    bucket = this.functions;\n                    break;\n                case \"event\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    bucket = this.events;\n                    break;\n                case \"error\":\n                    bucket = this.errors;\n                    break;\n                default:\n                    return;\n            }\n            let signature = fragment.format();\n            if (bucket[signature]) {\n                logger.warn(\"duplicate definition - \" + signature);\n                return;\n            }\n            bucket[signature] = fragment;\n        });\n        // If we do not have a constructor add a default\n        if (!this.deploy) {\n            defineReadOnly(this, \"deploy\", ConstructorFragment.from({\n                payable: false,\n                type: \"constructor\"\n            }));\n        }\n        defineReadOnly(this, \"_isInterface\", true);\n    }\n    format(format) {\n        if (!format) {\n            format = FormatTypes.full;\n        }\n        if (format === FormatTypes.sighash) {\n            logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", format);\n        }\n        const abi = this.fragments.map((fragment) => fragment.format(format));\n        // We need to re-bundle the JSON fragments a bit\n        if (format === FormatTypes.json) {\n            return JSON.stringify(abi.map((j) => JSON.parse(j)));\n        }\n        return abi;\n    }\n    // Sub-classes can override these to handle other blockchains\n    static getAbiCoder() {\n        return defaultAbiCoder;\n    }\n    static getAddress(address) {\n        return getAddress(address);\n    }\n    static getSighash(fragment) {\n        return hexDataSlice(id(fragment.format()), 0, 4);\n    }\n    static getEventTopic(eventFragment) {\n        return id(eventFragment.format());\n    }\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    getFunction(nameOrSignatureOrSighash) {\n        if (isHexString(nameOrSignatureOrSighash)) {\n            for (const name in this.functions) {\n                if (nameOrSignatureOrSighash === this.getSighash(name)) {\n                    return this.functions[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.functions).filter((f) => (f.split(\"(\" /* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching function\", \"name\", name);\n            }\n            else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching functions\", \"name\", name);\n            }\n            return this.functions[matching[0]];\n        }\n        // Normalize the signature and lookup the function\n        const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    }\n    // Find an event definition by any means necessary (unless it is ambiguous)\n    getEvent(nameOrSignatureOrTopic) {\n        if (isHexString(nameOrSignatureOrTopic)) {\n            const topichash = nameOrSignatureOrTopic.toLowerCase();\n            for (const name in this.events) {\n                if (topichash === this.getEventTopic(name)) {\n                    return this.events[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrTopic.trim();\n            const matching = Object.keys(this.events).filter((f) => (f.split(\"(\" /* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching event\", \"name\", name);\n            }\n            else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching events\", \"name\", name);\n            }\n            return this.events[matching[0]];\n        }\n        // Normalize the signature and lookup the function\n        const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n        }\n        return result;\n    }\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    getError(nameOrSignatureOrSighash) {\n        if (isHexString(nameOrSignatureOrSighash)) {\n            const getSighash = getStatic(this.constructor, \"getSighash\");\n            for (const name in this.errors) {\n                const error = this.errors[name];\n                if (nameOrSignatureOrSighash === getSighash(error)) {\n                    return this.errors[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching error\", \"sighash\", nameOrSignatureOrSighash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.errors).filter((f) => (f.split(\"(\" /* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching error\", \"name\", name);\n            }\n            else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching errors\", \"name\", name);\n            }\n            return this.errors[matching[0]];\n        }\n        // Normalize the signature and lookup the function\n        const result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching error\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    }\n    // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n    getSighash(fragment) {\n        if (typeof (fragment) === \"string\") {\n            try {\n                fragment = this.getFunction(fragment);\n            }\n            catch (error) {\n                try {\n                    fragment = this.getError(fragment);\n                }\n                catch (_) {\n                    throw error;\n                }\n            }\n        }\n        return getStatic(this.constructor, \"getSighash\")(fragment);\n    }\n    // Get the topic (the bytes32 hash) used by Solidity to identify an event\n    getEventTopic(eventFragment) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        return getStatic(this.constructor, \"getEventTopic\")(eventFragment);\n    }\n    _decodeParams(params, data) {\n        return this._abiCoder.decode(params, data);\n    }\n    _encodeParams(params, values) {\n        return this._abiCoder.encode(params, values);\n    }\n    encodeDeploy(values) {\n        return this._encodeParams(this.deploy.inputs, values || []);\n    }\n    decodeErrorResult(fragment, data) {\n        if (typeof (fragment) === \"string\") {\n            fragment = this.getError(fragment);\n        }\n        const bytes = arrayify(data);\n        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(fragment)) {\n            logger.throwArgumentError(`data signature does not match error ${fragment.name}.`, \"data\", hexlify(bytes));\n        }\n        return this._decodeParams(fragment.inputs, bytes.slice(4));\n    }\n    encodeErrorResult(fragment, values) {\n        if (typeof (fragment) === \"string\") {\n            fragment = this.getError(fragment);\n        }\n        return hexlify(concat([\n            this.getSighash(fragment),\n            this._encodeParams(fragment.inputs, values || [])\n        ]));\n    }\n    // Decode the data for a function call (e.g. tx.data)\n    decodeFunctionData(functionFragment, data) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        const bytes = arrayify(data);\n        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n            logger.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, \"data\", hexlify(bytes));\n        }\n        return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n    }\n    // Encode the data for a function call (e.g. tx.data)\n    encodeFunctionData(functionFragment, values) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        return hexlify(concat([\n            this.getSighash(functionFragment),\n            this._encodeParams(functionFragment.inputs, values || [])\n        ]));\n    }\n    // Decode the result from a function call (e.g. from eth_call)\n    decodeFunctionResult(functionFragment, data) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        let bytes = arrayify(data);\n        let reason = null;\n        let message = \"\";\n        let errorArgs = null;\n        let errorName = null;\n        let errorSignature = null;\n        switch (bytes.length % this._abiCoder._getWordSize()) {\n            case 0:\n                try {\n                    return this._abiCoder.decode(functionFragment.outputs, bytes);\n                }\n                catch (error) { }\n                break;\n            case 4: {\n                const selector = hexlify(bytes.slice(0, 4));\n                const builtin = BuiltinErrors[selector];\n                if (builtin) {\n                    errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));\n                    errorName = builtin.name;\n                    errorSignature = builtin.signature;\n                    if (builtin.reason) {\n                        reason = errorArgs[0];\n                    }\n                    if (errorName === \"Error\") {\n                        message = `; VM Exception while processing transaction: reverted with reason string ${JSON.stringify(errorArgs[0])}`;\n                    }\n                    else if (errorName === \"Panic\") {\n                        message = `; VM Exception while processing transaction: reverted with panic code ${errorArgs[0]}`;\n                    }\n                }\n                else {\n                    try {\n                        const error = this.getError(selector);\n                        errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));\n                        errorName = error.name;\n                        errorSignature = error.format();\n                    }\n                    catch (error) { }\n                }\n                break;\n            }\n        }\n        return logger.throwError(\"call revert exception\" + message, Logger.errors.CALL_EXCEPTION, {\n            method: functionFragment.format(),\n            data: hexlify(data), errorArgs, errorName, errorSignature, reason\n        });\n    }\n    // Encode the result for a function call (e.g. for eth_call)\n    encodeFunctionResult(functionFragment, values) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));\n    }\n    // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n    encodeFilterTopics(eventFragment, values) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        if (values.length > eventFragment.inputs.length) {\n            logger.throwError(\"too many arguments for \" + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {\n                argument: \"values\",\n                value: values\n            });\n        }\n        let topics = [];\n        if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n        }\n        const encodeTopic = (param, value) => {\n            if (param.type === \"string\") {\n                return id(value);\n            }\n            else if (param.type === \"bytes\") {\n                return keccak256(hexlify(value));\n            }\n            if (param.type === \"bool\" && typeof (value) === \"boolean\") {\n                value = (value ? \"0x01\" : \"0x00\");\n            }\n            if (param.type.match(/^u?int/)) {\n                value = BigNumber.from(value).toHexString();\n            }\n            // Check addresses are valid\n            if (param.type === \"address\") {\n                this._abiCoder.encode([\"address\"], [value]);\n            }\n            return hexZeroPad(hexlify(value), 32);\n        };\n        values.forEach((value, index) => {\n            let param = eventFragment.inputs[index];\n            if (!param.indexed) {\n                if (value != null) {\n                    logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", (\"contract.\" + param.name), value);\n                }\n                return;\n            }\n            if (value == null) {\n                topics.push(null);\n            }\n            else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n                logger.throwArgumentError(\"filtering with tuples or arrays not supported\", (\"contract.\" + param.name), value);\n            }\n            else if (Array.isArray(value)) {\n                topics.push(value.map((value) => encodeTopic(param, value)));\n            }\n            else {\n                topics.push(encodeTopic(param, value));\n            }\n        });\n        // Trim off trailing nulls\n        while (topics.length && topics[topics.length - 1] === null) {\n            topics.pop();\n        }\n        return topics;\n    }\n    encodeEventLog(eventFragment, values) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        const topics = [];\n        const dataTypes = [];\n        const dataValues = [];\n        if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n        }\n        if (values.length !== eventFragment.inputs.length) {\n            logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n        }\n        eventFragment.inputs.forEach((param, index) => {\n            const value = values[index];\n            if (param.indexed) {\n                if (param.type === \"string\") {\n                    topics.push(id(value));\n                }\n                else if (param.type === \"bytes\") {\n                    topics.push(keccak256(value));\n                }\n                else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    // @TODO\n                    throw new Error(\"not implemented\");\n                }\n                else {\n                    topics.push(this._abiCoder.encode([param.type], [value]));\n                }\n            }\n            else {\n                dataTypes.push(param);\n                dataValues.push(value);\n            }\n        });\n        return {\n            data: this._abiCoder.encode(dataTypes, dataValues),\n            topics: topics\n        };\n    }\n    // Decode a filter for the event and the search criteria\n    decodeEventLog(eventFragment, data, topics) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        if (topics != null && !eventFragment.anonymous) {\n            let topicHash = this.getEventTopic(eventFragment);\n            if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n                logger.throwError(\"fragment/topic mismatch\", Logger.errors.INVALID_ARGUMENT, { argument: \"topics[0]\", expected: topicHash, value: topics[0] });\n            }\n            topics = topics.slice(1);\n        }\n        let indexed = [];\n        let nonIndexed = [];\n        let dynamic = [];\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    indexed.push(ParamType.fromObject({ type: \"bytes32\", name: param.name }));\n                    dynamic.push(true);\n                }\n                else {\n                    indexed.push(param);\n                    dynamic.push(false);\n                }\n            }\n            else {\n                nonIndexed.push(param);\n                dynamic.push(false);\n            }\n        });\n        let resultIndexed = (topics != null) ? this._abiCoder.decode(indexed, concat(topics)) : null;\n        let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);\n        let result = [];\n        let nonIndexedIndex = 0, indexedIndex = 0;\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (resultIndexed == null) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: null });\n                }\n                else if (dynamic[index]) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });\n                }\n                else {\n                    try {\n                        result[index] = resultIndexed[indexedIndex++];\n                    }\n                    catch (error) {\n                        result[index] = error;\n                    }\n                }\n            }\n            else {\n                try {\n                    result[index] = resultNonIndexed[nonIndexedIndex++];\n                }\n                catch (error) {\n                    result[index] = error;\n                }\n            }\n            // Add the keyword argument if named and safe\n            if (param.name && result[param.name] == null) {\n                const value = result[index];\n                // Make error named values throw on access\n                if (value instanceof Error) {\n                    Object.defineProperty(result, param.name, {\n                        enumerable: true,\n                        get: () => { throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value); }\n                    });\n                }\n                else {\n                    result[param.name] = value;\n                }\n            }\n        });\n        // Make all error indexed values throw on access\n        for (let i = 0; i < result.length; i++) {\n            const value = result[i];\n            if (value instanceof Error) {\n                Object.defineProperty(result, i, {\n                    enumerable: true,\n                    get: () => { throw wrapAccessError(`index ${i}`, value); }\n                });\n            }\n        }\n        return Object.freeze(result);\n    }\n    // Given a transaction, find the matching function fragment (if any) and\n    // determine all its properties and call parameters\n    parseTransaction(tx) {\n        let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());\n        if (!fragment) {\n            return null;\n        }\n        return new TransactionDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n            functionFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n            value: BigNumber.from(tx.value || \"0\"),\n        });\n    }\n    // @TODO\n    //parseCallResult(data: BytesLike): ??\n    // Given an event log, find the matching event fragment (if any) and\n    // determine all its properties and values\n    parseLog(log) {\n        let fragment = this.getEvent(log.topics[0]);\n        if (!fragment || fragment.anonymous) {\n            return null;\n        }\n        // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n        //        Probably not, because just because it is the only event in the ABI does\n        //        not mean we have the full ABI; maybe just a fragment?\n        return new LogDescription({\n            eventFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            topic: this.getEventTopic(fragment),\n            args: this.decodeEventLog(fragment, log.data, log.topics)\n        });\n    }\n    parseError(data) {\n        const hexData = hexlify(data);\n        let fragment = this.getError(hexData.substring(0, 10).toLowerCase());\n        if (!fragment) {\n            return null;\n        }\n        return new ErrorDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + hexData.substring(10)),\n            errorFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n        });\n    }\n    /*\n    static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n        if (Interface.isInterface(value)) {\n            return value;\n        }\n        if (typeof(value) === \"string\") {\n            return new Interface(JSON.parse(value));\n        }\n        return new Interface(value);\n    }\n    */\n    static isInterface(value) {\n        return !!(value && value._isInterface);\n    }\n}\n//# sourceMappingURL=interface.js.map"]},"metadata":{},"sourceType":"module"}