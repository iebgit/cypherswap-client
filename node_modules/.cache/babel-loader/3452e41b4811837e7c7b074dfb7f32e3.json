{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { defineReadOnly, getStatic } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\n// A StaticJsonRpcProvider is useful when you *know* for certain that\n// the backend will never change, as it never calls eth_chainId to\n// verify its backend. However, if the backend does change, the effects\n// are undefined and may include:\n// - inconsistent results\n// - locking up the UI\n// - block skew warnings\n// - wrong results\n// If the network is not explicit (i.e. auto-detection is expected), the\n// node MUST be running and available to respond to requests BEFORE this\n// is instantiated.\nexport class StaticJsonRpcProvider extends JsonRpcProvider {\n  detectNetwork() {\n    const _super = Object.create(null, {\n      detectNetwork: {\n        get: () => super.detectNetwork\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      let network = this.network;\n      if (network == null) {\n        network = yield _super.detectNetwork.call(this);\n        if (!network) {\n          logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, {});\n        }\n        // If still not set, set it\n        if (this._network == null) {\n          // A static network does not support \"any\"\n          defineReadOnly(this, \"_network\", network);\n          this.emit(\"network\", network, null);\n        }\n      }\n      return network;\n    });\n  }\n}\nexport class UrlJsonRpcProvider extends StaticJsonRpcProvider {\n  constructor(network, apiKey) {\n    logger.checkAbstract(new.target, UrlJsonRpcProvider);\n    // Normalize the Network and API Key\n    network = getStatic(new.target, \"getNetwork\")(network);\n    apiKey = getStatic(new.target, \"getApiKey\")(apiKey);\n    const connection = getStatic(new.target, \"getUrl\")(network, apiKey);\n    super(connection, network);\n    if (typeof apiKey === \"string\") {\n      defineReadOnly(this, \"apiKey\", apiKey);\n    } else if (apiKey != null) {\n      Object.keys(apiKey).forEach(key => {\n        defineReadOnly(this, key, apiKey[key]);\n      });\n    }\n  }\n  _startPending() {\n    logger.warn(\"WARNING: API provider does not support pending filters\");\n  }\n  isCommunityResource() {\n    return false;\n  }\n  getSigner(address) {\n    return logger.throwError(\"API provider does not support signing\", Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"getSigner\"\n    });\n  }\n  listAccounts() {\n    return Promise.resolve([]);\n  }\n  // Return a defaultApiKey if null, otherwise validate the API key\n  static getApiKey(apiKey) {\n    return apiKey;\n  }\n  // Returns the url or connection for the given network and API key. The\n  // API key will have been sanitized by the getApiKey first, so any validation\n  // or transformations can be done there.\n  static getUrl(network, apiKey) {\n    return logger.throwError(\"not implemented; sub-classes must override getUrl\", Logger.errors.NOT_IMPLEMENTED, {\n      operation: \"getUrl\"\n    });\n  }\n}","map":{"version":3,"sources":["../src.ts/url-json-rpc-provider.ts"],"names":[],"mappings":"AACA,YAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGZ,SAAS,cAAc,EAAE,SAAS,QAAQ,2BAA2B;AAGrE,SAAS,MAAM,QAAQ,uBAAuB;AAC9C,SAAS,OAAO,QAAQ,YAAY;AACpC,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,OAAO,CAAC;AAGlC,SAAS,eAAe,QAAuB,qBAAqB;AAIpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM,MAAO,qBAAsB,SAAQ,eAAe,CAAA;EAChD,aAAa,GAAA;;;;;;;MACf,IAAI,OAAO,GAAG,IAAI,CAAC,OAAO;MAC1B,IAAI,OAAO,IAAI,IAAI,EAAE;QACjB,OAAO,GAAG,MAAM,MAAA,CAAM,aAAa,CAAA,IAAA,CAAA,IAAA,CAAE;QAErC,IAAI,CAAC,OAAO,EAAE;UACV,MAAM,CAAC,UAAU,CAAC,qBAAqB,EAAE,MAAM,CAAC,MAAM,CAAC,aAAa,EAAE,CAAA,CAAG,CAAC;QAC7E;QAED;QACA,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,EAAE;UACvB;UACA,cAAc,CAAC,IAAI,EAAE,UAAU,EAAE,OAAO,CAAC;UAEzC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,EAAE,IAAI,CAAC;QACtC;MACJ;MACD,OAAO,OAAO;IAClB,CAAC,CAAA;EAAA;AACJ;AAED,OAAM,MAAgB,kBAAmB,SAAQ,qBAAqB,CAAA;EAGlE,WAAA,CAAY,OAAoB,EAAE,MAAY,EAAA;IAC1C,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,MAAM,EAAE,kBAAkB,CAAC;IAEpD;IACA,OAAO,GAAG,SAAS,CAAmC,GAAG,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC,OAAO,CAAC;IACxF,MAAM,GAAG,SAAS,CAA6B,GAAG,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,MAAM,CAAC;IAE/E,MAAM,UAAU,GAAG,SAAS,CAAa,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,OAAO,EAAE,MAAM,CAAC;IAE/E,KAAK,CAAC,UAAU,EAAE,OAAO,CAAC;IAE1B,IAAI,OAAO,MAAO,KAAK,QAAQ,EAAE;MAC7B,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAE,MAAM,CAAC;KACzC,MAAM,IAAI,MAAM,IAAI,IAAI,EAAE;MACvB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAE,GAAG,IAAI;QAChC,cAAc,CAAW,IAAI,EAAE,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC;MACpD,CAAC,CAAC;IACL;EACL;EAEA,aAAa,GAAA;IACT,MAAM,CAAC,IAAI,CAAC,wDAAwD,CAAC;EACzE;EAEA,mBAAmB,GAAA;IACf,OAAO,KAAK;EAChB;EAEA,SAAS,CAAC,OAAgB,EAAA;IACtB,OAAO,MAAM,CAAC,UAAU,CACpB,uCAAuC,EACvC,MAAM,CAAC,MAAM,CAAC,qBAAqB,EACnC;MAAE,SAAS,EAAE;IAAW,CAAE,CAC7B;EACL;EAEA,YAAY,GAAA;IACR,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC;EAC9B;EAEA;EACA,OAAO,SAAS,CAAC,MAAW,EAAA;IACxB,OAAO,MAAM;EACjB;EAEA;EACA;EACA;EACA,OAAO,MAAM,CAAC,OAAgB,EAAE,MAAW,EAAA;IACvC,OAAO,MAAM,CAAC,UAAU,CAAC,mDAAmD,EAAE,MAAM,CAAC,MAAM,CAAC,eAAe,EAAE;MACzG,SAAS,EAAE;KACd,CAAC;EACN;AACH","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { defineReadOnly, getStatic } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\n// A StaticJsonRpcProvider is useful when you *know* for certain that\n// the backend will never change, as it never calls eth_chainId to\n// verify its backend. However, if the backend does change, the effects\n// are undefined and may include:\n// - inconsistent results\n// - locking up the UI\n// - block skew warnings\n// - wrong results\n// If the network is not explicit (i.e. auto-detection is expected), the\n// node MUST be running and available to respond to requests BEFORE this\n// is instantiated.\nexport class StaticJsonRpcProvider extends JsonRpcProvider {\n    detectNetwork() {\n        const _super = Object.create(null, {\n            detectNetwork: { get: () => super.detectNetwork }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            let network = this.network;\n            if (network == null) {\n                network = yield _super.detectNetwork.call(this);\n                if (!network) {\n                    logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, {});\n                }\n                // If still not set, set it\n                if (this._network == null) {\n                    // A static network does not support \"any\"\n                    defineReadOnly(this, \"_network\", network);\n                    this.emit(\"network\", network, null);\n                }\n            }\n            return network;\n        });\n    }\n}\nexport class UrlJsonRpcProvider extends StaticJsonRpcProvider {\n    constructor(network, apiKey) {\n        logger.checkAbstract(new.target, UrlJsonRpcProvider);\n        // Normalize the Network and API Key\n        network = getStatic(new.target, \"getNetwork\")(network);\n        apiKey = getStatic(new.target, \"getApiKey\")(apiKey);\n        const connection = getStatic(new.target, \"getUrl\")(network, apiKey);\n        super(connection, network);\n        if (typeof (apiKey) === \"string\") {\n            defineReadOnly(this, \"apiKey\", apiKey);\n        }\n        else if (apiKey != null) {\n            Object.keys(apiKey).forEach((key) => {\n                defineReadOnly(this, key, apiKey[key]);\n            });\n        }\n    }\n    _startPending() {\n        logger.warn(\"WARNING: API provider does not support pending filters\");\n    }\n    isCommunityResource() {\n        return false;\n    }\n    getSigner(address) {\n        return logger.throwError(\"API provider does not support signing\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"getSigner\" });\n    }\n    listAccounts() {\n        return Promise.resolve([]);\n    }\n    // Return a defaultApiKey if null, otherwise validate the API key\n    static getApiKey(apiKey) {\n        return apiKey;\n    }\n    // Returns the url or connection for the given network and API key. The\n    // API key will have been sanitized by the getApiKey first, so any validation\n    // or transformations can be done there.\n    static getUrl(network, apiKey) {\n        return logger.throwError(\"not implemented; sub-classes must override getUrl\", Logger.errors.NOT_IMPLEMENTED, {\n            operation: \"getUrl\"\n        });\n    }\n}\n//# sourceMappingURL=url-json-rpc-provider.js.map"]},"metadata":{},"sourceType":"module"}