{"ast":null,"code":"\"use strict\";\n\nimport { Coder } from \"./abstract-coder\";\nimport { pack, unpack } from \"./array\";\nexport class TupleCoder extends Coder {\n  constructor(coders, localName) {\n    let dynamic = false;\n    const types = [];\n    coders.forEach(coder => {\n      if (coder.dynamic) {\n        dynamic = true;\n      }\n      types.push(coder.type);\n    });\n    const type = \"tuple(\" + types.join(\",\") + \")\";\n    super(\"tuple\", type, localName, dynamic);\n    this.coders = coders;\n  }\n  defaultValue() {\n    const values = [];\n    this.coders.forEach(coder => {\n      values.push(coder.defaultValue());\n    });\n    // We only output named properties for uniquely named coders\n    const uniqueNames = this.coders.reduce((accum, coder) => {\n      const name = coder.localName;\n      if (name) {\n        if (!accum[name]) {\n          accum[name] = 0;\n        }\n        accum[name]++;\n      }\n      return accum;\n    }, {});\n    // Add named values\n    this.coders.forEach((coder, index) => {\n      let name = coder.localName;\n      if (!name || uniqueNames[name] !== 1) {\n        return;\n      }\n      if (name === \"length\") {\n        name = \"_length\";\n      }\n      if (values[name] != null) {\n        return;\n      }\n      values[name] = values[index];\n    });\n    return Object.freeze(values);\n  }\n  encode(writer, value) {\n    return pack(writer, this.coders, value);\n  }\n  decode(reader) {\n    return reader.coerce(this.name, unpack(reader, this.coders));\n  }\n}","map":{"version":3,"sources":["../../src.ts/coders/tuple.ts"],"names":[],"mappings":"AAAA,YAAY;;AAEZ,SAAS,KAAK,QAAwB,kBAAkB;AACxD,SAAS,IAAI,EAAE,MAAM,QAAQ,SAAS;AAEtC,OAAM,MAAO,UAAW,SAAQ,KAAK,CAAA;EAGjC,WAAA,CAAY,MAAoB,EAAE,SAAiB,EAAA;IAC/C,IAAI,OAAO,GAAG,KAAK;IACnB,MAAM,KAAK,GAAkB,EAAE;IAC/B,MAAM,CAAC,OAAO,CAAE,KAAK,IAAI;MACrB,IAAI,KAAK,CAAC,OAAO,EAAE;QAAE,OAAO,GAAG,IAAI;MAAG;MACtC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;IAC1B,CAAC,CAAC;IACF,MAAM,IAAI,GAAI,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAI;IAE/C,KAAK,CAAC,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,CAAC;IACxC,IAAI,CAAC,MAAM,GAAG,MAAM;EACxB;EAEA,YAAY,GAAA;IACR,MAAM,MAAM,GAAQ,EAAG;IACvB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAE,KAAK,IAAI;MAC1B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC;IACrC,CAAC,CAAC;IAEF;IACA,MAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,KAAK,KAAI;MACpD,MAAM,IAAI,GAAG,KAAK,CAAC,SAAS;MAC5B,IAAI,IAAI,EAAE;QACN,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;UAAE,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC;QAAG;QACtC,KAAK,CAAC,IAAI,CAAC,EAAE;MAChB;MACD,OAAO,KAAK;IAChB,CAAC,EAAgC,CAAA,CAAG,CAAC;IAErC;IACA,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAY,EAAE,KAAa,KAAI;MAChD,IAAI,IAAI,GAAG,KAAK,CAAC,SAAS;MAC1B,IAAI,CAAC,IAAI,IAAI,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;QAAE;MAAS;MAEjD,IAAI,IAAI,KAAK,QAAQ,EAAE;QAAE,IAAI,GAAG,SAAS;MAAG;MAE5C,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,EAAE;QAAE;MAAS;MAErC,MAAM,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC;IAChC,CAAC,CAAC;IAEF,OAAO,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC;EAChC;EAEA,MAAM,CAAC,MAAc,EAAE,KAA6C,EAAA;IAChE,OAAO,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC;EAC3C;EAEA,MAAM,CAAC,MAAc,EAAA;IACjB,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;EAChE;AACH","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { Coder } from \"./abstract-coder\";\nimport { pack, unpack } from \"./array\";\nexport class TupleCoder extends Coder {\n    constructor(coders, localName) {\n        let dynamic = false;\n        const types = [];\n        coders.forEach((coder) => {\n            if (coder.dynamic) {\n                dynamic = true;\n            }\n            types.push(coder.type);\n        });\n        const type = (\"tuple(\" + types.join(\",\") + \")\");\n        super(\"tuple\", type, localName, dynamic);\n        this.coders = coders;\n    }\n    defaultValue() {\n        const values = [];\n        this.coders.forEach((coder) => {\n            values.push(coder.defaultValue());\n        });\n        // We only output named properties for uniquely named coders\n        const uniqueNames = this.coders.reduce((accum, coder) => {\n            const name = coder.localName;\n            if (name) {\n                if (!accum[name]) {\n                    accum[name] = 0;\n                }\n                accum[name]++;\n            }\n            return accum;\n        }, {});\n        // Add named values\n        this.coders.forEach((coder, index) => {\n            let name = coder.localName;\n            if (!name || uniqueNames[name] !== 1) {\n                return;\n            }\n            if (name === \"length\") {\n                name = \"_length\";\n            }\n            if (values[name] != null) {\n                return;\n            }\n            values[name] = values[index];\n        });\n        return Object.freeze(values);\n    }\n    encode(writer, value) {\n        return pack(writer, this.coders, value);\n    }\n    decode(reader) {\n        return reader.coerce(this.name, unpack(reader, this.coders));\n    }\n}\n//# sourceMappingURL=tuple.js.map"]},"metadata":{},"sourceType":"module"}