{"ast":null,"code":"\"use strict\";\n\nimport { arrayify, hexlify } from \"@ethersproject/bytes\";\nimport { Coder } from \"./abstract-coder\";\n// @TODO: Merge this with bytes\nexport class FixedBytesCoder extends Coder {\n  constructor(size, localName) {\n    let name = \"bytes\" + String(size);\n    super(name, name, localName, false);\n    this.size = size;\n  }\n  defaultValue() {\n    return \"0x0000000000000000000000000000000000000000000000000000000000000000\".substring(0, 2 + this.size * 2);\n  }\n  encode(writer, value) {\n    let data = arrayify(value);\n    if (data.length !== this.size) {\n      this._throwError(\"incorrect data length\", value);\n    }\n    return writer.writeBytes(data);\n  }\n  decode(reader) {\n    return reader.coerce(this.name, hexlify(reader.readBytes(this.size)));\n  }\n}","map":{"version":3,"sources":["../../src.ts/coders/fixed-bytes.ts"],"names":[],"mappings":"AAAA,YAAY;;AAEZ,SAAS,QAAQ,EAAa,OAAO,QAAQ,sBAAsB;AAEnE,SAAS,KAAK,QAAwB,kBAAkB;AAExD;AACA,OAAM,MAAO,eAAgB,SAAQ,KAAK,CAAA;EAGtC,WAAA,CAAY,IAAY,EAAE,SAAiB,EAAA;IACvC,IAAI,IAAI,GAAG,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC;IACjC,KAAK,CAAC,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,CAAC;IACnC,IAAI,CAAC,IAAI,GAAG,IAAI;EACpB;EAEA,YAAY,GAAA;IACR,OAAQ,oEAAoE,CAAE,SAAS,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;EACjH;EAEA,MAAM,CAAC,MAAc,EAAE,KAAgB,EAAA;IACnC,IAAI,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC;IAC1B,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,IAAI,EAAE;MAAE,IAAI,CAAC,WAAW,CAAC,uBAAuB,EAAE,KAAK,CAAC;IAAG;IACpF,OAAO,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC;EAClC;EAEA,MAAM,CAAC,MAAc,EAAA;IACjB,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;EACzE;AACH","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { arrayify, hexlify } from \"@ethersproject/bytes\";\nimport { Coder } from \"./abstract-coder\";\n// @TODO: Merge this with bytes\nexport class FixedBytesCoder extends Coder {\n    constructor(size, localName) {\n        let name = \"bytes\" + String(size);\n        super(name, name, localName, false);\n        this.size = size;\n    }\n    defaultValue() {\n        return (\"0x0000000000000000000000000000000000000000000000000000000000000000\").substring(0, 2 + this.size * 2);\n    }\n    encode(writer, value) {\n        let data = arrayify(value);\n        if (data.length !== this.size) {\n            this._throwError(\"incorrect data length\", value);\n        }\n        return writer.writeBytes(data);\n    }\n    decode(reader) {\n        return reader.coerce(this.name, hexlify(reader.readBytes(this.size)));\n    }\n}\n//# sourceMappingURL=fixed-bytes.js.map"]},"metadata":{},"sourceType":"module"}