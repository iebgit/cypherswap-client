{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = parseToHsl;\nvar _parseToRgb = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require(\"./parseToRgb\"));\nvar _rgbToHsl = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require(\"../internalHelpers/_rgbToHsl\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\n/**\n * Returns an HslColor or HslaColor object. This utility function is only useful\n * if want to extract a color component. With the color util `toColorString` you\n * can convert a HslColor or HslaColor object back to a string.\n *\n * @example\n * // Assigns `{ hue: 0, saturation: 1, lightness: 0.5 }` to color1\n * const color1 = parseToHsl('rgb(255, 0, 0)');\n * // Assigns `{ hue: 128, saturation: 1, lightness: 0.5, alpha: 0.75 }` to color2\n * const color2 = parseToHsl('hsla(128, 100%, 50%, 0.75)');\n */\nfunction parseToHsl(color) {\n  // Note: At a later stage we can optimize this function as right now a hsl\n  // color would be parsed converted to rgb values and converted back to hsl.\n  return (0, _rgbToHsl[\"default\"])((0, _parseToRgb[\"default\"])(color));\n}\nmodule.exports = exports.default;","map":{"version":3,"names":["exports","__esModule","parseToHsl","_parseToRgb","_interopRequireDefault","require","_rgbToHsl","obj","color","module","default"],"sources":["/Users/Ibis/Projects/project_mern_memories/client/node_modules/polished/lib/color/parseToHsl.js"],"sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = parseToHsl;\n\nvar _parseToRgb = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require(\"./parseToRgb\"));\n\nvar _rgbToHsl = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require(\"../internalHelpers/_rgbToHsl\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * Returns an HslColor or HslaColor object. This utility function is only useful\n * if want to extract a color component. With the color util `toColorString` you\n * can convert a HslColor or HslaColor object back to a string.\n *\n * @example\n * // Assigns `{ hue: 0, saturation: 1, lightness: 0.5 }` to color1\n * const color1 = parseToHsl('rgb(255, 0, 0)');\n * // Assigns `{ hue: 128, saturation: 1, lightness: 0.5, alpha: 0.75 }` to color2\n * const color2 = parseToHsl('hsla(128, 100%, 50%, 0.75)');\n */\nfunction parseToHsl(color) {\n  // Note: At a later stage we can optimize this function as right now a hsl\n  // color would be parsed converted to rgb values and converted back to hsl.\n  return (0, _rgbToHsl[\"default\"])((0, _parseToRgb[\"default\"])(color));\n}\n\nmodule.exports = exports.default;"],"mappings":"AAAA,YAAY;;AAEZA,OAAO,CAACC,UAAU,GAAG,IAAI;AACzBD,OAAO,CAAC,SAAS,CAAC,GAAGE,UAAU;AAE/B,IAAIC,WAAW,GAAG,aAAaC,sBAAsB,EAAE,aAAaC,OAAO,CAAC,cAAc,CAAC,CAAC;AAE5F,IAAIC,SAAS,GAAG,aAAaF,sBAAsB,EAAE,aAAaC,OAAO,CAAC,8BAA8B,CAAC,CAAC;AAE1G,SAASD,sBAAsB,CAACG,GAAG,EAAE;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACN,UAAU,GAAGM,GAAG,GAAG;IAAE,SAAS,EAAEA;EAAI,CAAC;AAAE;;AAEhG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASL,UAAU,CAACM,KAAK,EAAE;EACzB;EACA;EACA,OAAO,CAAC,CAAC,EAAEF,SAAS,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,EAAEH,WAAW,CAAC,SAAS,CAAC,EAAEK,KAAK,CAAC,CAAC;AACtE;AAEAC,MAAM,CAACT,OAAO,GAAGA,OAAO,CAACU,OAAO"},"metadata":{},"sourceType":"script"}