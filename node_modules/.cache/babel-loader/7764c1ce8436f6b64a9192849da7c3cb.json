{"ast":null,"code":"\"use strict\";\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { MaxUint256, NegativeOne, One, Zero } from \"@ethersproject/constants\";\nimport { Coder } from \"./abstract-coder\";\nexport class NumberCoder extends Coder {\n  constructor(size, signed, localName) {\n    const name = (signed ? \"int\" : \"uint\") + size * 8;\n    super(name, name, localName, false);\n    this.size = size;\n    this.signed = signed;\n  }\n  defaultValue() {\n    return 0;\n  }\n  encode(writer, value) {\n    let v = BigNumber.from(value);\n    // Check bounds are safe for encoding\n    let maxUintValue = MaxUint256.mask(writer.wordSize * 8);\n    if (this.signed) {\n      let bounds = maxUintValue.mask(this.size * 8 - 1);\n      if (v.gt(bounds) || v.lt(bounds.add(One).mul(NegativeOne))) {\n        this._throwError(\"value out-of-bounds\", value);\n      }\n    } else if (v.lt(Zero) || v.gt(maxUintValue.mask(this.size * 8))) {\n      this._throwError(\"value out-of-bounds\", value);\n    }\n    v = v.toTwos(this.size * 8).mask(this.size * 8);\n    if (this.signed) {\n      v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);\n    }\n    return writer.writeValue(v);\n  }\n  decode(reader) {\n    let value = reader.readValue().mask(this.size * 8);\n    if (this.signed) {\n      value = value.fromTwos(this.size * 8);\n    }\n    return reader.coerce(this.name, value);\n  }\n}","map":{"version":3,"sources":["../../src.ts/coders/number.ts"],"names":[],"mappings":"AAAA,YAAY;;AAEZ,SAAS,SAAS,QAAsB,0BAA0B;AAClE,SAAS,UAAU,EAAE,WAAW,EAAE,GAAG,EAAE,IAAI,QAAQ,0BAA0B;AAE7E,SAAS,KAAK,QAAwB,kBAAkB;AAExD,OAAM,MAAO,WAAY,SAAQ,KAAK,CAAA;EAIlC,WAAA,CAAY,IAAY,EAAE,MAAe,EAAE,SAAiB,EAAA;IACxD,MAAM,IAAI,GAAI,CAAC,MAAM,GAAG,KAAK,GAAE,MAAM,IAAK,IAAI,GAAG,CAAG;IACpD,KAAK,CAAC,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,CAAC;IAEnC,IAAI,CAAC,IAAI,GAAG,IAAI;IAChB,IAAI,CAAC,MAAM,GAAG,MAAM;EACxB;EAEA,YAAY,GAAA;IACR,OAAO,CAAC;EACZ;EAEA,MAAM,CAAC,MAAc,EAAE,KAAmB,EAAA;IACtC,IAAI,CAAC,GAAG,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC;IAE7B;IACA,IAAI,YAAY,GAAG,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,GAAG,CAAC,CAAC;IACvD,IAAI,IAAI,CAAC,MAAM,EAAE;MACb,IAAI,MAAM,GAAG,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;MACjD,IAAI,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,EAAE;QACxD,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,KAAK,CAAC;MACjD;KACJ,MAAM,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,EAAE;MAC7D,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,KAAK,CAAC;IACjD;IAED,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;IAE/C,IAAI,IAAI,CAAC,MAAM,EAAE;MACb,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC;IAC5D;IAED,OAAO,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;EAC/B;EAEA,MAAM,CAAC,MAAc,EAAA;IACjB,IAAI,KAAK,GAAG,MAAM,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;IAElD,IAAI,IAAI,CAAC,MAAM,EAAE;MACb,KAAK,GAAG,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;IACxC;IAED,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC;EAC1C;AACH","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { MaxUint256, NegativeOne, One, Zero } from \"@ethersproject/constants\";\nimport { Coder } from \"./abstract-coder\";\nexport class NumberCoder extends Coder {\n    constructor(size, signed, localName) {\n        const name = ((signed ? \"int\" : \"uint\") + (size * 8));\n        super(name, name, localName, false);\n        this.size = size;\n        this.signed = signed;\n    }\n    defaultValue() {\n        return 0;\n    }\n    encode(writer, value) {\n        let v = BigNumber.from(value);\n        // Check bounds are safe for encoding\n        let maxUintValue = MaxUint256.mask(writer.wordSize * 8);\n        if (this.signed) {\n            let bounds = maxUintValue.mask(this.size * 8 - 1);\n            if (v.gt(bounds) || v.lt(bounds.add(One).mul(NegativeOne))) {\n                this._throwError(\"value out-of-bounds\", value);\n            }\n        }\n        else if (v.lt(Zero) || v.gt(maxUintValue.mask(this.size * 8))) {\n            this._throwError(\"value out-of-bounds\", value);\n        }\n        v = v.toTwos(this.size * 8).mask(this.size * 8);\n        if (this.signed) {\n            v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);\n        }\n        return writer.writeValue(v);\n    }\n    decode(reader) {\n        let value = reader.readValue().mask(this.size * 8);\n        if (this.signed) {\n            value = value.fromTwos(this.size * 8);\n        }\n        return reader.coerce(this.name, value);\n    }\n}\n//# sourceMappingURL=number.js.map"]},"metadata":{},"sourceType":"module"}