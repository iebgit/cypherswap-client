{"ast":null,"code":"\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nconst defaultApplicationId = \"62e1ad51b37b8e00394bda3b\";\nexport class PocketProvider extends UrlJsonRpcProvider {\n  static getApiKey(apiKey) {\n    const apiKeyObj = {\n      applicationId: null,\n      loadBalancer: true,\n      applicationSecretKey: null\n    };\n    // Parse applicationId and applicationSecretKey\n    if (apiKey == null) {\n      apiKeyObj.applicationId = defaultApplicationId;\n    } else if (typeof apiKey === \"string\") {\n      apiKeyObj.applicationId = apiKey;\n    } else if (apiKey.applicationSecretKey != null) {\n      apiKeyObj.applicationId = apiKey.applicationId;\n      apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;\n    } else if (apiKey.applicationId) {\n      apiKeyObj.applicationId = apiKey.applicationId;\n    } else {\n      logger.throwArgumentError(\"unsupported PocketProvider apiKey\", \"apiKey\", apiKey);\n    }\n    return apiKeyObj;\n  }\n  static getUrl(network, apiKey) {\n    let host = null;\n    switch (network ? network.name : \"unknown\") {\n      case \"goerli\":\n        host = \"eth-goerli.gateway.pokt.network\";\n        break;\n      case \"homestead\":\n        host = \"eth-mainnet.gateway.pokt.network\";\n        break;\n      case \"kovan\":\n        host = \"poa-kovan.gateway.pokt.network\";\n        break;\n      case \"matic\":\n        host = \"poly-mainnet.gateway.pokt.network\";\n        break;\n      case \"maticmum\":\n        host = \"polygon-mumbai-rpc.gateway.pokt.network\";\n        break;\n      case \"rinkeby\":\n        host = \"eth-rinkeby.gateway.pokt.network\";\n        break;\n      case \"ropsten\":\n        host = \"eth-ropsten.gateway.pokt.network\";\n        break;\n      default:\n        logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"network\",\n          value: network\n        });\n    }\n    const url = `https:/\\/${host}/v1/lb/${apiKey.applicationId}`;\n    const connection = {\n      headers: {},\n      url\n    };\n    if (apiKey.applicationSecretKey != null) {\n      connection.user = \"\";\n      connection.password = apiKey.applicationSecretKey;\n    }\n    return connection;\n  }\n  isCommunityResource() {\n    return this.applicationId === defaultApplicationId;\n  }\n}","map":{"version":3,"sources":["../src.ts/pocket-provider.ts"],"names":[],"mappings":"AAAA,YAAY;;AAKZ,SAAS,MAAM,QAAQ,uBAAuB;AAC9C,SAAS,OAAO,QAAQ,YAAY;AACpC,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,OAAO,CAAC;AAElC,SAAS,kBAAkB,QAAQ,yBAAyB;AAE5D,MAAM,oBAAoB,GAAG,0BAA0B;AAGvD,OAAM,MAAO,cAAe,SAAQ,kBAAkB,CAAA;EAKlD,OAAO,SAAS,CAAC,MAAW,EAAA;IACxB,MAAM,SAAS,GAAmF;MAC9F,aAAa,EAAE,IAAI;MACnB,YAAY,EAAE,IAAI;MAClB,oBAAoB,EAAE;KACzB;IAED;IACA,IAAI,MAAM,IAAI,IAAI,EAAE;MAChB,SAAS,CAAC,aAAa,GAAG,oBAAoB;KAEjD,MAAM,IAAI,OAAQ,MAAO,KAAK,QAAQ,EAAE;MACrC,SAAS,CAAC,aAAa,GAAG,MAAM;KAEnC,MAAM,IAAI,MAAM,CAAC,oBAAoB,IAAI,IAAI,EAAE;MAC5C,SAAS,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa;MAC9C,SAAS,CAAC,oBAAoB,GAAG,MAAM,CAAC,oBAAoB;KAE/D,MAAM,IAAI,MAAM,CAAC,aAAa,EAAE;MAC7B,SAAS,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa;KAEjD,MAAM;MACH,MAAM,CAAC,kBAAkB,CAAC,mCAAmC,EAAE,QAAQ,EAAE,MAAM,CAAC;IACnF;IAED,OAAO,SAAS;EACpB;EAEA,OAAO,MAAM,CAAC,OAAgB,EAAE,MAAW,EAAA;IACvC,IAAI,IAAI,GAAW,IAAI;IACvB,QAAQ,OAAO,GAAG,OAAO,CAAC,IAAI,GAAG,SAAS;MACtC,KAAK,QAAQ;QACT,IAAI,GAAG,iCAAiC;QACxC;MACJ,KAAK,WAAW;QACZ,IAAI,GAAG,kCAAkC;QACzC;MACJ,KAAK,OAAO;QACR,IAAI,GAAG,gCAAgC;QACvC;MACJ,KAAK,OAAO;QACR,IAAI,GAAG,mCAAmC;QAC1C;MACJ,KAAK,UAAU;QACX,IAAI,GAAG,yCAAyC;QAChD;MACJ,KAAK,SAAS;QACV,IAAI,GAAG,kCAAkC;QACzC;MACJ,KAAK,SAAS;QACV,IAAI,GAAG,kCAAkC;QACzC;MACJ;QACI,MAAM,CAAC,UAAU,CAAC,qBAAqB,EAAE,MAAM,CAAC,MAAM,CAAC,gBAAgB,EAAE;UACrE,QAAQ,EAAE,SAAS;UACnB,KAAK,EAAE;SACV,CAAC;IAAC;IAGX,MAAM,GAAG,GAAG,YAAa,IAAK,UAAW,MAAM,CAAC,aAAc,EAAE;IAEhE,MAAM,UAAU,GAAmB;MAAE,OAAO,EAAE,CAAA,CAAG;MAAE;IAAG,CAAE;IACxD,IAAI,MAAM,CAAC,oBAAoB,IAAI,IAAI,EAAE;MACrC,UAAU,CAAC,IAAI,GAAG,EAAE;MACpB,UAAU,CAAC,QAAQ,GAAG,MAAM,CAAC,oBAAoB;IACpD;IAED,OAAO,UAAU;EACrB;EAEA,mBAAmB,GAAA;IACf,OAAQ,IAAI,CAAC,aAAa,KAAK,oBAAoB;EACvD;AACH","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nconst defaultApplicationId = \"62e1ad51b37b8e00394bda3b\";\nexport class PocketProvider extends UrlJsonRpcProvider {\n    static getApiKey(apiKey) {\n        const apiKeyObj = {\n            applicationId: null,\n            loadBalancer: true,\n            applicationSecretKey: null\n        };\n        // Parse applicationId and applicationSecretKey\n        if (apiKey == null) {\n            apiKeyObj.applicationId = defaultApplicationId;\n        }\n        else if (typeof (apiKey) === \"string\") {\n            apiKeyObj.applicationId = apiKey;\n        }\n        else if (apiKey.applicationSecretKey != null) {\n            apiKeyObj.applicationId = apiKey.applicationId;\n            apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;\n        }\n        else if (apiKey.applicationId) {\n            apiKeyObj.applicationId = apiKey.applicationId;\n        }\n        else {\n            logger.throwArgumentError(\"unsupported PocketProvider apiKey\", \"apiKey\", apiKey);\n        }\n        return apiKeyObj;\n    }\n    static getUrl(network, apiKey) {\n        let host = null;\n        switch (network ? network.name : \"unknown\") {\n            case \"goerli\":\n                host = \"eth-goerli.gateway.pokt.network\";\n                break;\n            case \"homestead\":\n                host = \"eth-mainnet.gateway.pokt.network\";\n                break;\n            case \"kovan\":\n                host = \"poa-kovan.gateway.pokt.network\";\n                break;\n            case \"matic\":\n                host = \"poly-mainnet.gateway.pokt.network\";\n                break;\n            case \"maticmum\":\n                host = \"polygon-mumbai-rpc.gateway.pokt.network\";\n                break;\n            case \"rinkeby\":\n                host = \"eth-rinkeby.gateway.pokt.network\";\n                break;\n            case \"ropsten\":\n                host = \"eth-ropsten.gateway.pokt.network\";\n                break;\n            default:\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n        }\n        const url = `https:/\\/${host}/v1/lb/${apiKey.applicationId}`;\n        const connection = { headers: {}, url };\n        if (apiKey.applicationSecretKey != null) {\n            connection.user = \"\";\n            connection.password = apiKey.applicationSecretKey;\n        }\n        return connection;\n    }\n    isCommunityResource() {\n        return (this.applicationId === defaultApplicationId);\n    }\n}\n//# sourceMappingURL=pocket-provider.js.map"]},"metadata":{},"sourceType":"module"}