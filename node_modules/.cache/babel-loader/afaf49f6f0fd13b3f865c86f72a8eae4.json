{"ast":null,"code":"const BigNumber = require(\"bignumber.js\");\nconst {\n  ethers\n} = require(\"ethers\");\nconst networks = require(\"./../assets/networks.json\");\nconst Web3 = require(\"web3\");\nconst formatAmountIn = (tokenMultiply, amount) => {\n  const tokenAmount = new BigNumber((tokenMultiply * amount).toString());\n  const amountIn = ethers.utils.parseUnits(tokenAmount.toFixed(), \"wei\");\n  return amountIn;\n};\nconst convertTokens = tokenArray => {\n  const convertedArray = [];\n  for (let x in tokenArray) {\n    convertedArray.push({\n      address: tokenArray[x][0],\n      image: tokenArray[x][1],\n      name: tokenArray[x][2],\n      symbol: tokenArray[x][3]\n    });\n  }\n  return convertedArray;\n};\nconst usDollar = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  minimumFractionDigits: 2\n});\nconst getUserData = async msg => {\n  let name;\n  let network;\n  let address;\n  let chainList = [];\n  let signer;\n  let chainId;\n  if (msg) {\n    try {\n      const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n      if (!!provider) {\n        signer = provider.getSigner();\n        chainId = await signer.getChainId();\n      }\n      try {\n        address = await signer.getAddress();\n      } catch (error) {\n        console.error(`An error arose while getting address: ${error}`);\n      }\n      for (let x = 0; x < networks.length; x++) {\n        chainList.push(networks[x].id);\n        if (chainId === networks[x].id) {\n          name = networks[x].networkName;\n          network = networks[x];\n        }\n      }\n      if (!address && !!network) {\n        return {\n          usDollar,\n          provider,\n          signer,\n          network: networks[5],\n          networks,\n          chainId,\n          chainList,\n          message: \"Error\"\n        };\n      } else {\n        var _network, _network2, _network3, _network4, _network5;\n        const balance = await signer.getBalance(),\n          routerContract = new ethers.Contract((_network = network) === null || _network === void 0 ? void 0 : _network.routerAddress, (_network2 = network) === null || _network2 === void 0 ? void 0 : _network2.routerJson.abi, signer),\n          factoryAddress = await routerContract.factory(),\n          factoryContract = new ethers.Contract(factoryAddress, (_network3 = network) === null || _network3 === void 0 ? void 0 : _network3.factoryJson, provider),\n          pathList = [{\n            address: Web3.utils.toChecksumAddress(network.btc),\n            symbol: \"WBTC\"\n          }, {\n            address: Web3.utils.toChecksumAddress(network.usdc),\n            symbol: \"USDC\"\n          }, {\n            address: Web3.utils.toChecksumAddress(network.usdt),\n            symbol: \"USDT\"\n          }, {\n            address: Web3.utils.toChecksumAddress(network.tokens[0][0]),\n            symbol: (_network4 = network) === null || _network4 === void 0 ? void 0 : _network4.tokens[0][3]\n          }, {\n            address: Web3.utils.toChecksumAddress(network.tokens[1][0]),\n            symbol: (_network5 = network) === null || _network5 === void 0 ? void 0 : _network5.tokens[1][3]\n          }];\n        return {\n          usDollar,\n          pathList,\n          routerContract,\n          factoryContract,\n          provider,\n          signer,\n          address,\n          balance,\n          chainId: parseInt(chainId),\n          network,\n          networks,\n          chainList,\n          message: `${address.slice(0, 5)}...${address.slice(-4)}`\n        };\n      }\n    } catch (error) {\n      console.error(\"ðŸš« ERROR IN ETHERS.JS\", error);\n    }\n    return {\n      usDollar,\n      network: networks[5],\n      networks,\n      chainId: 1,\n      chainList: [1666600000, 1, 250, 43114, 56, 137],\n      message: \"Error\"\n    };\n  }\n};\nconst getPaths = async (factory, pathList, baseAddress, targetAddress, baseLabel, targetLabel) => {\n  const noPair = \"0x0000000000000000000000000000000000000000\";\n  const paths = [];\n  const pair = await factory.getPair(baseAddress, targetAddress);\n  if (pair !== noPair) {\n    paths.push([{\n      address: baseAddress,\n      symbol: baseLabel\n    }, {\n      address: targetAddress,\n      symbol: targetLabel\n    }]);\n  }\n  for (let x = 0; x < pathList.length; x++) {\n    if (pathList[x].address !== baseAddress && pathList[x].address !== targetAddress) {\n      let altPair0;\n      let altPair1;\n      try {\n        altPair0 = await factory.getPair(baseAddress, pathList[x].address);\n        altPair1 = await factory.getPair(targetAddress, pathList[x].address);\n      } catch (e) {\n        console.error(\"Alt Pair Error:\", e);\n      }\n      if (altPair0 !== noPair && altPair1 !== noPair) {\n        paths.push([{\n          address: baseAddress,\n          symbol: baseLabel\n        }, pathList[x], {\n          address: targetAddress,\n          symbol: targetLabel\n        }]);\n      }\n    }\n  }\n  return paths;\n};\nconst approve = async (baseAmount, baseInstance, routerAddress, baseMultiply) => {\n  let result = false;\n  if (!!baseAmount) {\n    const address = routerAddress;\n    const hexAmountIn = await formatAmountIn(baseMultiply, baseAmount);\n    const weth = baseInstance;\n    try {\n      await weth.approve(address, hexAmountIn);\n      result = true;\n    } catch (e) {\n      var _e$data;\n      console.error(\"An error occurred during approval: \", e);\n      result = (await ((_e$data = e.data) === null || _e$data === void 0 ? void 0 : _e$data.message)) || (await e.message);\n    }\n  }\n  return result;\n};\nconst swapTokens = async (baseAmount, baseMultiply, baseSymbol, wethSymbol, targetSymbol, targetDecimal, currentPrice, contract, account, path, ammData) => {\n  let result = false;\n  if (baseAmount > 0) {\n    path = path.map(token => token.address);\n    const amountIn = formatAmountIn(baseMultiply, baseAmount);\n    const amountOut = new BigNumber((currentPrice * Math.pow(10, targetDecimal)).toFixed());\n    const amountOutMin0 = amountOut.minus(amountOut.dividedToIntegerBy(\"10\"));\n    const amountOutMin = ethers.utils.parseUnits(amountOutMin0.toString(), \"wei\");\n    const deadline = Date.now() + 1000 * 60 * 10; //10 minutes\n    if (baseSymbol !== wethSymbol && targetSymbol !== wethSymbol) {\n      try {\n        await contract.swapExactTokensForTokens(amountIn, amountOutMin, path, account, deadline).then(() => {\n          result = true;\n        });\n      } catch (e) {\n        var _e$data2;\n        console.error(\"swapExactTokensForTokens\", e);\n        result = (await ((_e$data2 = e.data) === null || _e$data2 === void 0 ? void 0 : _e$data2.message)) || (await e.message);\n      }\n    } else if (baseSymbol === wethSymbol && targetSymbol !== wethSymbol) {\n      if (ammData.name === \"Pangolin\") {\n        try {\n          await contract.swapExactAVAXForTokens(amountOutMin, path, account, deadline, {\n            value: amountIn\n          }).then(receipt => {\n            result = true;\n          });\n        } catch (e) {\n          var _e$data3;\n          console.error(\"swapExactAVAXForTokens\", e);\n          result = (await ((_e$data3 = e.data) === null || _e$data3 === void 0 ? void 0 : _e$data3.message)) || (await e.message);\n        }\n      } else {\n        try {\n          await contract.swapExactETHForTokens(amountOutMin, path, account, deadline, {\n            value: amountIn\n          }).then(receipt => {\n            result = true;\n          });\n        } catch (e) {\n          var _e$data4;\n          console.error(\"swapExactETHForTokens\", e);\n          result = (await ((_e$data4 = e.data) === null || _e$data4 === void 0 ? void 0 : _e$data4.message)) || (await e.message);\n        }\n      }\n    } else {\n      if (ammData.name === \"Pangolin\") {\n        try {\n          await contract.swapExactTokensForAVAX(amountIn, amountOutMin, path, account, deadline).then(receipt => {\n            result = true;\n          });\n        } catch (e) {\n          var _e$data5;\n          console.error(\"swapExactTokensForAVAX\", e);\n          result = (await ((_e$data5 = e.data) === null || _e$data5 === void 0 ? void 0 : _e$data5.message)) || (await e.message);\n        }\n      } else {\n        try {\n          await contract.swapExactTokensForETH(amountIn, amountOutMin, path, account, deadline).then(() => {\n            result = true;\n          });\n        } catch (e) {\n          var _e$data6;\n          console.error(\"swapExactTokensForETH\", e);\n          result = (await ((_e$data6 = e.data) === null || _e$data6 === void 0 ? void 0 : _e$data6.message)) || (await e.message);\n        }\n      }\n    }\n  }\n  return result;\n};\nconst getBalance = async (contract, address, decimal) => {\n  const value = await contract.balanceOf(address);\n  return Number(ethers.utils.formatUnits(value, decimal)).toFixed(6);\n};\nexport { formatAmountIn, getPaths, approve, swapTokens, getUserData, convertTokens, getBalance, usDollar };","map":{"version":3,"names":["BigNumber","require","ethers","networks","Web3","formatAmountIn","tokenMultiply","amount","tokenAmount","toString","amountIn","utils","parseUnits","toFixed","convertTokens","tokenArray","convertedArray","x","push","address","image","name","symbol","usDollar","Intl","NumberFormat","style","currency","minimumFractionDigits","getUserData","msg","network","chainList","signer","chainId","provider","providers","Web3Provider","window","ethereum","getSigner","getChainId","getAddress","error","console","length","id","networkName","message","balance","getBalance","routerContract","Contract","routerAddress","routerJson","abi","factoryAddress","factory","factoryContract","factoryJson","pathList","toChecksumAddress","btc","usdc","usdt","tokens","parseInt","slice","getPaths","baseAddress","targetAddress","baseLabel","targetLabel","noPair","paths","pair","getPair","altPair0","altPair1","e","approve","baseAmount","baseInstance","baseMultiply","result","hexAmountIn","weth","data","swapTokens","baseSymbol","wethSymbol","targetSymbol","targetDecimal","currentPrice","contract","account","path","ammData","map","token","amountOut","Math","pow","amountOutMin0","minus","dividedToIntegerBy","amountOutMin","deadline","Date","now","swapExactTokensForTokens","then","swapExactAVAXForTokens","value","receipt","swapExactETHForTokens","swapExactTokensForAVAX","swapExactTokensForETH","decimal","balanceOf","Number","formatUnits"],"sources":["/Users/Ibis/Projects/project_mern_memories/client/src/components/services/transactions.service.js"],"sourcesContent":["const BigNumber = require(\"bignumber.js\");\nconst { ethers } = require(\"ethers\");\nconst networks = require(\"./../assets/networks.json\");\nconst Web3 = require(\"web3\");\n\nconst formatAmountIn = (tokenMultiply, amount) => {\n  const tokenAmount = new BigNumber((tokenMultiply * amount).toString());\n  const amountIn = ethers.utils.parseUnits(tokenAmount.toFixed(), \"wei\");\n  return amountIn;\n};\n\nconst convertTokens = (tokenArray) => {\n  const convertedArray = [];\n  for (let x in tokenArray) {\n    convertedArray.push({\n      address: tokenArray[x][0],\n      image: tokenArray[x][1],\n      name: tokenArray[x][2],\n      symbol: tokenArray[x][3],\n    });\n  }\n  return convertedArray;\n};\n\nconst usDollar = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  minimumFractionDigits: 2,\n});\n\nconst getUserData = async (msg) => {\n  let name;\n  let network;\n  let address;\n  let chainList = [];\n  let signer;\n  let chainId;\n\n  if (msg) {\n    try {\n      const provider = new ethers.providers.Web3Provider(\n        window.ethereum,\n        \"any\"\n      );\n\n      if (!!provider) {\n        signer = provider.getSigner();\n        chainId = await signer.getChainId();\n      }\n\n      try {\n        address = await signer.getAddress();\n      } catch (error) {\n        console.error(`An error arose while getting address: ${error}`);\n      }\n      for (let x = 0; x < networks.length; x++) {\n        chainList.push(networks[x].id);\n\n        if (chainId === networks[x].id) {\n          name = networks[x].networkName;\n\n          network = networks[x];\n        }\n      }\n      if (!address && !!network) {\n        return {\n          usDollar,\n          provider,\n          signer,\n          network: networks[5],\n          networks,\n          chainId,\n          chainList,\n          message: \"Error\",\n        };\n      } else {\n        const balance = await signer.getBalance(),\n          routerContract = new ethers.Contract(\n            network?.routerAddress,\n            network?.routerJson.abi,\n            signer\n          ),\n          factoryAddress = await routerContract.factory(),\n          factoryContract = new ethers.Contract(\n            factoryAddress,\n            network?.factoryJson,\n            provider\n          ),\n          pathList = [\n            {\n              address: Web3.utils.toChecksumAddress(network.btc),\n              symbol: \"WBTC\",\n            },\n            {\n              address: Web3.utils.toChecksumAddress(network.usdc),\n              symbol: \"USDC\",\n            },\n            {\n              address: Web3.utils.toChecksumAddress(network.usdt),\n              symbol: \"USDT\",\n            },\n            {\n              address: Web3.utils.toChecksumAddress(network.tokens[0][0]),\n              symbol: network?.tokens[0][3],\n            },\n            {\n              address: Web3.utils.toChecksumAddress(network.tokens[1][0]),\n              symbol: network?.tokens[1][3],\n            },\n          ];\n      \n        return {\n          usDollar,\n          pathList,\n          routerContract,\n          factoryContract,\n          provider,\n          signer,\n          address,\n          balance,\n          chainId: parseInt(chainId),\n          network,\n          networks,\n          chainList,\n          message: `${address.slice(0, 5)}...${address.slice(-4)}`,\n        };\n      }\n    } catch (error) {\n      console.error(\"ðŸš« ERROR IN ETHERS.JS\", error);\n    }\n\n    return {\n      usDollar,\n      network: networks[5],\n      networks,\n      chainId: 1,\n      chainList: [1666600000, 1, 250, 43114, 56, 137],\n      message: \"Error\",\n    };\n  }\n};\n\nconst getPaths = async (\n  factory,\n  pathList,\n  baseAddress,\n  targetAddress,\n  baseLabel,\n  targetLabel\n) => {\n  const noPair = \"0x0000000000000000000000000000000000000000\";\n  const paths = [];\n  const pair = await factory.getPair(baseAddress, targetAddress);\n\n  if (pair !== noPair) {\n    paths.push([\n      { address: baseAddress, symbol: baseLabel },\n      { address: targetAddress, symbol: targetLabel },\n    ]);\n  }\n  for (let x = 0; x < pathList.length; x++) {\n    if (\n      pathList[x].address !== baseAddress &&\n      pathList[x].address !== targetAddress\n    ) {\n      let altPair0;\n      let altPair1;\n\n      try {\n        altPair0 = await factory.getPair(baseAddress, pathList[x].address);\n\n        altPair1 = await factory.getPair(targetAddress, pathList[x].address);\n      } catch (e) {\n        console.error(\"Alt Pair Error:\", e);\n      }\n\n      if (altPair0 !== noPair && altPair1 !== noPair) {\n        paths.push([\n          { address: baseAddress, symbol: baseLabel },\n          pathList[x],\n          { address: targetAddress, symbol: targetLabel },\n        ]);\n      }\n    }\n  }\n  return paths;\n};\n\nconst approve = async (\n  baseAmount,\n  baseInstance,\n  routerAddress,\n  baseMultiply\n) => {\n  let result = false;\n  if (!!baseAmount) {\n    const address = routerAddress;\n    const hexAmountIn = await formatAmountIn(baseMultiply, baseAmount);\n    const weth = baseInstance;\n    try {\n      await weth.approve(address, hexAmountIn);\n      result = true;\n    } catch (e) {\n      console.error(\"An error occurred during approval: \", e);\n      result = (await e.data?.message) || (await e.message);\n    }\n  }\n  return result;\n};\n\nconst swapTokens = async (\n  baseAmount,\n  baseMultiply,\n  baseSymbol,\n  wethSymbol,\n  targetSymbol,\n  targetDecimal,\n  currentPrice,\n  contract,\n  account,\n  path,\n  ammData\n) => {\n  let result = false;\n  if (baseAmount > 0) {\n    path = path.map((token) => token.address);\n\n    const amountIn = formatAmountIn(baseMultiply, baseAmount);\n    const amountOut = new BigNumber(\n      (currentPrice * Math.pow(10, targetDecimal)).toFixed()\n    );\n    const amountOutMin0 = amountOut.minus(amountOut.dividedToIntegerBy(\"10\"));\n    const amountOutMin = ethers.utils.parseUnits(\n      amountOutMin0.toString(),\n      \"wei\"\n    );\n    const deadline = Date.now() + 1000 * 60 * 10; //10 minutes\n    if (baseSymbol !== wethSymbol && targetSymbol !== wethSymbol) {\n      try {\n        await contract\n          .swapExactTokensForTokens(\n            amountIn,\n            amountOutMin,\n            path,\n            account,\n            deadline\n          )\n          .then(() => {\n            result = true;\n          });\n      } catch (e) {\n        console.error(\"swapExactTokensForTokens\", e);\n        result = (await e.data?.message) || (await e.message);\n      }\n    } else if (baseSymbol === wethSymbol && targetSymbol !== wethSymbol) {\n      if (ammData.name === \"Pangolin\") {\n        try {\n          await contract\n            .swapExactAVAXForTokens(amountOutMin, path, account, deadline, {\n              value: amountIn,\n            })\n            .then((receipt) => {\n              result = true;\n            });\n        } catch (e) {\n          console.error(\"swapExactAVAXForTokens\", e);\n          result = (await e.data?.message) || (await e.message);\n        }\n      } else {\n        try {\n          await contract\n            .swapExactETHForTokens(amountOutMin, path, account, deadline, {\n              value: amountIn,\n            })\n            .then((receipt) => {\n              result = true;\n            });\n        } catch (e) {\n          console.error(\"swapExactETHForTokens\", e);\n          result = (await e.data?.message) || (await e.message);\n        }\n      }\n    } else {\n      if (ammData.name === \"Pangolin\") {\n        try {\n          await contract\n            .swapExactTokensForAVAX(\n              amountIn,\n              amountOutMin,\n              path,\n              account,\n              deadline\n            )\n            .then((receipt) => {\n              result = true;\n            });\n        } catch (e) {\n          console.error(\"swapExactTokensForAVAX\", e);\n          result = (await e.data?.message) || (await e.message);\n        }\n      } else {\n        try {\n          await contract\n            .swapExactTokensForETH(\n              amountIn,\n              amountOutMin,\n              path,\n              account,\n              deadline\n            )\n            .then(() => {\n              result = true;\n            });\n        } catch (e) {\n          console.error(\"swapExactTokensForETH\", e);\n          result = (await e.data?.message) || (await e.message);\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst getBalance = async (contract, address, decimal) => {\n  const value = await contract.balanceOf(address);\n  return Number(ethers.utils.formatUnits(value, decimal)).toFixed(6);\n};\n\nexport {\n  formatAmountIn,\n  getPaths,\n  approve,\n  swapTokens,\n  getUserData,\n  convertTokens,\n  getBalance,\n  usDollar,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}