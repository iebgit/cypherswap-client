{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global[\"fast-equals\"] = {}));\n})(this, function (exports) {\n  'use strict';\n\n  var HAS_WEAKSET_SUPPORT = typeof WeakSet === 'function';\n  var keys = Object.keys;\n  /**\r\n   * are the values passed strictly equal or both NaN\r\n   *\r\n   * @param a the value to compare against\r\n   * @param b the value to test\r\n   * @returns are the values equal by the SameValueZero principle\r\n   */\n  function sameValueZeroEqual(a, b) {\n    return a === b || a !== a && b !== b;\n  }\n  /**\r\n   * is the value a plain object\r\n   *\r\n   * @param value the value to test\r\n   * @returns is the value a plain object\r\n   */\n  function isPlainObject(value) {\n    return value.constructor === Object || value.constructor == null;\n  }\n  /**\r\n   * is the value promise-like (meaning it is thenable)\r\n   *\r\n   * @param value the value to test\r\n   * @returns is the value promise-like\r\n   */\n  function isPromiseLike(value) {\n    return !!value && typeof value.then === 'function';\n  }\n  /**\r\n   * is the value passed a react element\r\n   *\r\n   * @param value the value to test\r\n   * @returns is the value a react element\r\n   */\n  function isReactElement(value) {\n    return !!(value && value.$$typeof);\n  }\n  /**\r\n   * in cases where WeakSet is not supported, creates a new custom\r\n   * object that mimics the necessary API aspects for cache purposes\r\n   *\r\n   * @returns the new cache object\r\n   */\n  function getNewCacheFallback() {\n    var values = [];\n    return {\n      add: function (value) {\n        values.push(value);\n      },\n      has: function (value) {\n        return values.indexOf(value) !== -1;\n      }\n    };\n  }\n  /**\r\n   * get a new cache object to prevent circular references\r\n   *\r\n   * @returns the new cache object\r\n   */\n  var getNewCache = function (canUseWeakMap) {\n    if (canUseWeakMap) {\n      return function _getNewCache() {\n        return new WeakSet();\n      };\n    }\n    return getNewCacheFallback;\n  }(HAS_WEAKSET_SUPPORT);\n  /**\r\n   * create a custom isEqual handler specific to circular objects\r\n   *\r\n   * @param [isEqual] the isEqual comparator to use instead of isDeepEqual\r\n   * @returns the method to create the `isEqual` function\r\n   */\n  function createCircularEqualCreator(isEqual) {\n    return function createCircularEqual(comparator) {\n      var _comparator = isEqual || comparator;\n      return function circularEqual(a, b, cache) {\n        if (cache === void 0) {\n          cache = getNewCache();\n        }\n        var isCacheableA = !!a && typeof a === 'object';\n        var isCacheableB = !!b && typeof b === 'object';\n        if (isCacheableA || isCacheableB) {\n          var hasA = isCacheableA && cache.has(a);\n          var hasB = isCacheableB && cache.has(b);\n          if (hasA || hasB) {\n            return hasA && hasB;\n          }\n          if (isCacheableA) {\n            cache.add(a);\n          }\n          if (isCacheableB) {\n            cache.add(b);\n          }\n        }\n        return _comparator(a, b, cache);\n      };\n    };\n  }\n  /**\r\n   * are the arrays equal in value\r\n   *\r\n   * @param a the array to test\r\n   * @param b the array to test against\r\n   * @param isEqual the comparator to determine equality\r\n   * @param meta the meta object to pass through\r\n   * @returns are the arrays equal\r\n   */\n  function areArraysEqual(a, b, isEqual, meta) {\n    var index = a.length;\n    if (b.length !== index) {\n      return false;\n    }\n    while (index-- > 0) {\n      if (!isEqual(a[index], b[index], meta)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\r\n   * are the maps equal in value\r\n   *\r\n   * @param a the map to test\r\n   * @param b the map to test against\r\n   * @param isEqual the comparator to determine equality\r\n   * @param meta the meta map to pass through\r\n   * @returns are the maps equal\r\n   */\n  function areMapsEqual(a, b, isEqual, meta) {\n    var isValueEqual = a.size === b.size;\n    if (isValueEqual && a.size) {\n      var matchedIndices_1 = {};\n      a.forEach(function (aValue, aKey) {\n        if (isValueEqual) {\n          var hasMatch_1 = false;\n          var matchIndex_1 = 0;\n          b.forEach(function (bValue, bKey) {\n            if (!hasMatch_1 && !matchedIndices_1[matchIndex_1]) {\n              hasMatch_1 = isEqual(aKey, bKey, meta) && isEqual(aValue, bValue, meta);\n              if (hasMatch_1) {\n                matchedIndices_1[matchIndex_1] = true;\n              }\n            }\n            matchIndex_1++;\n          });\n          isValueEqual = hasMatch_1;\n        }\n      });\n    }\n    return isValueEqual;\n  }\n  var OWNER = '_owner';\n  var hasOwnProperty = Function.prototype.bind.call(Function.prototype.call, Object.prototype.hasOwnProperty);\n  /**\r\n   * are the objects equal in value\r\n   *\r\n   * @param a the object to test\r\n   * @param b the object to test against\r\n   * @param isEqual the comparator to determine equality\r\n   * @param meta the meta object to pass through\r\n   * @returns are the objects equal\r\n   */\n  function areObjectsEqual(a, b, isEqual, meta) {\n    var keysA = keys(a);\n    var index = keysA.length;\n    if (keys(b).length !== index) {\n      return false;\n    }\n    if (index) {\n      var key = void 0;\n      while (index-- > 0) {\n        key = keysA[index];\n        if (key === OWNER) {\n          var reactElementA = isReactElement(a);\n          var reactElementB = isReactElement(b);\n          if ((reactElementA || reactElementB) && reactElementA !== reactElementB) {\n            return false;\n          }\n        }\n        if (!hasOwnProperty(b, key) || !isEqual(a[key], b[key], meta)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  /**\r\n   * are the regExps equal in value\r\n   *\r\n   * @param a the regExp to test\r\n   * @param b the regExp to test agains\r\n   * @returns are the regExps equal\r\n   */\n  function areRegExpsEqual(a, b) {\n    return a.source === b.source && a.global === b.global && a.ignoreCase === b.ignoreCase && a.multiline === b.multiline && a.unicode === b.unicode && a.sticky === b.sticky && a.lastIndex === b.lastIndex;\n  }\n  /**\r\n   * are the sets equal in value\r\n   *\r\n   * @param a the set to test\r\n   * @param b the set to test against\r\n   * @param isEqual the comparator to determine equality\r\n   * @param meta the meta set to pass through\r\n   * @returns are the sets equal\r\n   */\n  function areSetsEqual(a, b, isEqual, meta) {\n    var isValueEqual = a.size === b.size;\n    if (isValueEqual && a.size) {\n      var matchedIndices_2 = {};\n      a.forEach(function (aValue) {\n        if (isValueEqual) {\n          var hasMatch_2 = false;\n          var matchIndex_2 = 0;\n          b.forEach(function (bValue) {\n            if (!hasMatch_2 && !matchedIndices_2[matchIndex_2]) {\n              hasMatch_2 = isEqual(aValue, bValue, meta);\n              if (hasMatch_2) {\n                matchedIndices_2[matchIndex_2] = true;\n              }\n            }\n            matchIndex_2++;\n          });\n          isValueEqual = hasMatch_2;\n        }\n      });\n    }\n    return isValueEqual;\n  }\n  var HAS_MAP_SUPPORT = typeof Map === 'function';\n  var HAS_SET_SUPPORT = typeof Set === 'function';\n  function createComparator(createIsEqual) {\n    var isEqual = /* eslint-disable no-use-before-define */\n    typeof createIsEqual === 'function' ? createIsEqual(comparator) : comparator;\n    /* eslint-enable */\n    /**\r\n     * compare the value of the two objects and return true if they are equivalent in values\r\n     *\r\n     * @param a the value to test against\r\n     * @param b the value to test\r\n     * @param [meta] an optional meta object that is passed through to all equality test calls\r\n     * @returns are a and b equivalent in value\r\n     */\n    function comparator(a, b, meta) {\n      if (a === b) {\n        return true;\n      }\n      if (a && b && typeof a === 'object' && typeof b === 'object') {\n        if (isPlainObject(a) && isPlainObject(b)) {\n          return areObjectsEqual(a, b, isEqual, meta);\n        }\n        var aShape = Array.isArray(a);\n        var bShape = Array.isArray(b);\n        if (aShape || bShape) {\n          return aShape === bShape && areArraysEqual(a, b, isEqual, meta);\n        }\n        aShape = a instanceof Date;\n        bShape = b instanceof Date;\n        if (aShape || bShape) {\n          return aShape === bShape && sameValueZeroEqual(a.getTime(), b.getTime());\n        }\n        aShape = a instanceof RegExp;\n        bShape = b instanceof RegExp;\n        if (aShape || bShape) {\n          return aShape === bShape && areRegExpsEqual(a, b);\n        }\n        if (isPromiseLike(a) || isPromiseLike(b)) {\n          return a === b;\n        }\n        if (HAS_MAP_SUPPORT) {\n          aShape = a instanceof Map;\n          bShape = b instanceof Map;\n          if (aShape || bShape) {\n            return aShape === bShape && areMapsEqual(a, b, isEqual, meta);\n          }\n        }\n        if (HAS_SET_SUPPORT) {\n          aShape = a instanceof Set;\n          bShape = b instanceof Set;\n          if (aShape || bShape) {\n            return aShape === bShape && areSetsEqual(a, b, isEqual, meta);\n          }\n        }\n        return areObjectsEqual(a, b, isEqual, meta);\n      }\n      return a !== a && b !== b;\n    }\n    return comparator;\n  }\n  var deepEqual = createComparator();\n  var shallowEqual = createComparator(function () {\n    return sameValueZeroEqual;\n  });\n  var circularDeepEqual = createComparator(createCircularEqualCreator());\n  var circularShallowEqual = createComparator(createCircularEqualCreator(sameValueZeroEqual));\n  exports.circularDeepEqual = circularDeepEqual;\n  exports.circularShallowEqual = circularShallowEqual;\n  exports.createCustomEqual = createComparator;\n  exports.deepEqual = deepEqual;\n  exports.sameValueZeroEqual = sameValueZeroEqual;\n  exports.shallowEqual = shallowEqual;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":{"version":3,"sources":["../src/utils.ts","../src/comparator.ts","../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["const HAS_WEAKSET_SUPPORT = typeof WeakSet === 'function';\n\nconst { keys } = Object;\n\ntype Cache = {\n  add: (value: any) => void;\n  has: (value: any) => boolean;\n};\n\nexport type EqualityComparator = (a: any, b: any, meta?: any) => boolean;\n\n/**\n * are the values passed strictly equal or both NaN\n *\n * @param a the value to compare against\n * @param b the value to test\n * @returns are the values equal by the SameValueZero principle\n */\nexport function sameValueZeroEqual(a: any, b: any) {\n  return a === b || (a !== a && b !== b);\n}\n\n/**\n * is the value a plain object\n *\n * @param value the value to test\n * @returns is the value a plain object\n */\nexport function isPlainObject(value: any) {\n  return value.constructor === Object || value.constructor == null;\n}\n\n/**\n * is the value promise-like (meaning it is thenable)\n *\n * @param value the value to test\n * @returns is the value promise-like\n */\nexport function isPromiseLike(value: any) {\n  return !!value && typeof value.then === 'function';\n}\n\n/**\n * is the value passed a react element\n *\n * @param value the value to test\n * @returns is the value a react element\n */\nexport function isReactElement(value: any) {\n  return !!(value && value.$$typeof);\n}\n\n/**\n * in cases where WeakSet is not supported, creates a new custom\n * object that mimics the necessary API aspects for cache purposes\n *\n * @returns the new cache object\n */\nexport function getNewCacheFallback(): Cache {\n  const values: any[] = [];\n\n  return {\n    add(value: any) {\n      values.push(value);\n    },\n\n    has(value: any) {\n      return values.indexOf(value) !== -1;\n    },\n  };\n}\n\n/**\n * get a new cache object to prevent circular references\n *\n * @returns the new cache object\n */\nexport const getNewCache = ((canUseWeakMap: boolean) => {\n  if (canUseWeakMap) {\n    return function _getNewCache(): Cache {\n      return new WeakSet();\n    };\n  }\n\n  return getNewCacheFallback;\n})(HAS_WEAKSET_SUPPORT);\n\n/**\n * create a custom isEqual handler specific to circular objects\n *\n * @param [isEqual] the isEqual comparator to use instead of isDeepEqual\n * @returns the method to create the `isEqual` function\n */\nexport function createCircularEqualCreator(isEqual?: EqualityComparator) {\n  return function createCircularEqual(comparator: EqualityComparator) {\n    const _comparator = isEqual || comparator;\n\n    return function circularEqual(\n      a: any,\n      b: any,\n      cache: Cache = getNewCache(),\n    ) {\n      const isCacheableA = !!a && typeof a === 'object';\n      const isCacheableB = !!b && typeof b === 'object';\n\n      if (isCacheableA || isCacheableB) {\n        const hasA = isCacheableA && cache.has(a);\n        const hasB = isCacheableB && cache.has(b);\n\n        if (hasA || hasB) {\n          return hasA && hasB;\n        }\n\n        if (isCacheableA) {\n          cache.add(a);\n        }\n\n        if (isCacheableB) {\n          cache.add(b);\n        }\n      }\n\n      return _comparator(a, b, cache);\n    };\n  };\n}\n\n/**\n * are the arrays equal in value\n *\n * @param a the array to test\n * @param b the array to test against\n * @param isEqual the comparator to determine equality\n * @param meta the meta object to pass through\n * @returns are the arrays equal\n */\nexport function areArraysEqual(\n  a: any[],\n  b: any[],\n  isEqual: EqualityComparator,\n  meta: any,\n) {\n  let index = a.length;\n\n  if (b.length !== index) {\n    return false;\n  }\n\n  while (index-- > 0) {\n    if (!isEqual(a[index], b[index], meta)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * are the maps equal in value\n *\n * @param a the map to test\n * @param b the map to test against\n * @param isEqual the comparator to determine equality\n * @param meta the meta map to pass through\n * @returns are the maps equal\n */\nexport function areMapsEqual(\n  a: Map<any, any>,\n  b: Map<any, any>,\n  isEqual: EqualityComparator,\n  meta: any,\n) {\n  let isValueEqual = a.size === b.size;\n\n  if (isValueEqual && a.size) {\n    const matchedIndices: Record<number, true> = {};\n\n    a.forEach((aValue, aKey) => {\n      if (isValueEqual) {\n        let hasMatch = false;\n        let matchIndex = 0;\n\n        b.forEach((bValue, bKey) => {\n          if (!hasMatch && !matchedIndices[matchIndex]) {\n            hasMatch =\n              isEqual(aKey, bKey, meta) && isEqual(aValue, bValue, meta);\n\n            if (hasMatch) {\n              matchedIndices[matchIndex] = true;\n            }\n          }\n\n          matchIndex++;\n        });\n\n        isValueEqual = hasMatch;\n      }\n    });\n  }\n\n  return isValueEqual;\n}\n\ntype Dictionary<Type> = {\n  [key: string]: Type;\n  [index: number]: Type;\n};\n\nconst OWNER = '_owner';\n\nconst hasOwnProperty = Function.prototype.bind.call(\n  Function.prototype.call,\n  Object.prototype.hasOwnProperty,\n);\n\n/**\n * are the objects equal in value\n *\n * @param a the object to test\n * @param b the object to test against\n * @param isEqual the comparator to determine equality\n * @param meta the meta object to pass through\n * @returns are the objects equal\n */\nexport function areObjectsEqual(\n  a: Dictionary<any>,\n  b: Dictionary<any>,\n  isEqual: EqualityComparator,\n  meta: any,\n) {\n  const keysA = keys(a);\n\n  let index = keysA.length;\n\n  if (keys(b).length !== index) {\n    return false;\n  }\n\n  if (index) {\n    let key: string;\n\n    while (index-- > 0) {\n      key = keysA[index];\n\n      if (key === OWNER) {\n        const reactElementA = isReactElement(a);\n        const reactElementB = isReactElement(b);\n\n        if (\n          (reactElementA || reactElementB) &&\n          reactElementA !== reactElementB\n        ) {\n          return false;\n        }\n      }\n\n      if (!hasOwnProperty(b, key) || !isEqual(a[key], b[key], meta)) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\n/**\n * are the regExps equal in value\n *\n * @param a the regExp to test\n * @param b the regExp to test agains\n * @returns are the regExps equal\n */\nexport function areRegExpsEqual(a: RegExp, b: RegExp) {\n  return (\n    a.source === b.source &&\n    a.global === b.global &&\n    a.ignoreCase === b.ignoreCase &&\n    a.multiline === b.multiline &&\n    a.unicode === b.unicode &&\n    a.sticky === b.sticky &&\n    a.lastIndex === b.lastIndex\n  );\n}\n\n/**\n * are the sets equal in value\n *\n * @param a the set to test\n * @param b the set to test against\n * @param isEqual the comparator to determine equality\n * @param meta the meta set to pass through\n * @returns are the sets equal\n */\nexport function areSetsEqual(\n  a: Set<any>,\n  b: Set<any>,\n  isEqual: EqualityComparator,\n  meta: any,\n) {\n  let isValueEqual = a.size === b.size;\n\n  if (isValueEqual && a.size) {\n    const matchedIndices: Record<number, true> = {};\n\n    a.forEach((aValue) => {\n      if (isValueEqual) {\n        let hasMatch = false;\n        let matchIndex = 0;\n\n        b.forEach((bValue) => {\n          if (!hasMatch && !matchedIndices[matchIndex]) {\n            hasMatch = isEqual(aValue, bValue, meta);\n\n            if (hasMatch) {\n              matchedIndices[matchIndex] = true;\n            }\n          }\n\n          matchIndex++;\n        });\n\n        isValueEqual = hasMatch;\n      }\n    });\n  }\n\n  return isValueEqual;\n}\n","import {\n  EqualityComparator,\n  areArraysEqual,\n  areMapsEqual,\n  areObjectsEqual,\n  areRegExpsEqual,\n  areSetsEqual,\n  isPlainObject,\n  isPromiseLike,\n  sameValueZeroEqual,\n} from './utils';\n\nconst HAS_MAP_SUPPORT = typeof Map === 'function';\nconst HAS_SET_SUPPORT = typeof Set === 'function';\n\ntype EqualityComparatorCreator = (fn: EqualityComparator) => EqualityComparator;\n\nexport function createComparator(createIsEqual?: EqualityComparatorCreator) {\n  const isEqual: EqualityComparator =\n    /* eslint-disable no-use-before-define */\n    typeof createIsEqual === 'function'\n      ? createIsEqual(comparator)\n      : comparator;\n  /* eslint-enable */\n\n  /**\n   * compare the value of the two objects and return true if they are equivalent in values\n   *\n   * @param a the value to test against\n   * @param b the value to test\n   * @param [meta] an optional meta object that is passed through to all equality test calls\n   * @returns are a and b equivalent in value\n   */\n  function comparator(a: any, b: any, meta?: any) {\n    if (a === b) {\n      return true;\n    }\n\n    if (a && b && typeof a === 'object' && typeof b === 'object') {\n      if (isPlainObject(a) && isPlainObject(b)) {\n        return areObjectsEqual(a, b, isEqual, meta);\n      }\n\n      let aShape = Array.isArray(a);\n      let bShape = Array.isArray(b);\n\n      if (aShape || bShape) {\n        return aShape === bShape && areArraysEqual(a, b, isEqual, meta);\n      }\n\n      aShape = a instanceof Date;\n      bShape = b instanceof Date;\n\n      if (aShape || bShape) {\n        return (\n          aShape === bShape && sameValueZeroEqual(a.getTime(), b.getTime())\n        );\n      }\n\n      aShape = a instanceof RegExp;\n      bShape = b instanceof RegExp;\n\n      if (aShape || bShape) {\n        return aShape === bShape && areRegExpsEqual(a, b);\n      }\n\n      if (isPromiseLike(a) || isPromiseLike(b)) {\n        return a === b;\n      }\n\n      if (HAS_MAP_SUPPORT) {\n        aShape = a instanceof Map;\n        bShape = b instanceof Map;\n\n        if (aShape || bShape) {\n          return aShape === bShape && areMapsEqual(a, b, isEqual, meta);\n        }\n      }\n\n      if (HAS_SET_SUPPORT) {\n        aShape = a instanceof Set;\n        bShape = b instanceof Set;\n\n        if (aShape || bShape) {\n          return aShape === bShape && areSetsEqual(a, b, isEqual, meta);\n        }\n      }\n\n      return areObjectsEqual(a, b, isEqual, meta);\n    }\n\n    return a !== a && b !== b;\n  }\n\n  return comparator;\n}\n","import { createComparator } from './comparator';\nimport { createCircularEqualCreator, sameValueZeroEqual } from './utils';\n\nexport { createComparator as createCustomEqual, sameValueZeroEqual };\n\nexport const deepEqual = createComparator();\nexport const shallowEqual = createComparator(() => sameValueZeroEqual);\n\nexport const circularDeepEqual = createComparator(createCircularEqualCreator());\nexport const circularShallowEqual = createComparator(\n  createCircularEqualCreator(sameValueZeroEqual),\n);\n"]},"metadata":{},"sourceType":"script"}