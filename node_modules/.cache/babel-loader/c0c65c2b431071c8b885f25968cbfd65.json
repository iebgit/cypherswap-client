{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { getAddress } from \"@ethersproject/address\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { arrayify, concat, hexDataSlice, isHexString, joinSignature } from \"@ethersproject/bytes\";\nimport { hashMessage, _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { defaultPath, HDNode, entropyToMnemonic } from \"@ethersproject/hdnode\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, resolveProperties } from \"@ethersproject/properties\";\nimport { randomBytes } from \"@ethersproject/random\";\nimport { SigningKey } from \"@ethersproject/signing-key\";\nimport { decryptJsonWallet, decryptJsonWalletSync, encryptKeystore } from \"@ethersproject/json-wallets\";\nimport { computeAddress, recoverAddress, serialize } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nfunction isAccount(value) {\n  return value != null && isHexString(value.privateKey, 32) && value.address != null;\n}\nfunction hasMnemonic(value) {\n  const mnemonic = value.mnemonic;\n  return mnemonic && mnemonic.phrase;\n}\nexport class Wallet extends Signer {\n  constructor(privateKey, provider) {\n    super();\n    if (isAccount(privateKey)) {\n      const signingKey = new SigningKey(privateKey.privateKey);\n      defineReadOnly(this, \"_signingKey\", () => signingKey);\n      defineReadOnly(this, \"address\", computeAddress(this.publicKey));\n      if (this.address !== getAddress(privateKey.address)) {\n        logger.throwArgumentError(\"privateKey/address mismatch\", \"privateKey\", \"[REDACTED]\");\n      }\n      if (hasMnemonic(privateKey)) {\n        const srcMnemonic = privateKey.mnemonic;\n        defineReadOnly(this, \"_mnemonic\", () => ({\n          phrase: srcMnemonic.phrase,\n          path: srcMnemonic.path || defaultPath,\n          locale: srcMnemonic.locale || \"en\"\n        }));\n        const mnemonic = this.mnemonic;\n        const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path);\n        if (computeAddress(node.privateKey) !== this.address) {\n          logger.throwArgumentError(\"mnemonic/address mismatch\", \"privateKey\", \"[REDACTED]\");\n        }\n      } else {\n        defineReadOnly(this, \"_mnemonic\", () => null);\n      }\n    } else {\n      if (SigningKey.isSigningKey(privateKey)) {\n        /* istanbul ignore if */\n        if (privateKey.curve !== \"secp256k1\") {\n          logger.throwArgumentError(\"unsupported curve; must be secp256k1\", \"privateKey\", \"[REDACTED]\");\n        }\n        defineReadOnly(this, \"_signingKey\", () => privateKey);\n      } else {\n        // A lot of common tools do not prefix private keys with a 0x (see: #1166)\n        if (typeof privateKey === \"string\") {\n          if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {\n            privateKey = \"0x\" + privateKey;\n          }\n        }\n        const signingKey = new SigningKey(privateKey);\n        defineReadOnly(this, \"_signingKey\", () => signingKey);\n      }\n      defineReadOnly(this, \"_mnemonic\", () => null);\n      defineReadOnly(this, \"address\", computeAddress(this.publicKey));\n    }\n    /* istanbul ignore if */\n    if (provider && !Provider.isProvider(provider)) {\n      logger.throwArgumentError(\"invalid provider\", \"provider\", provider);\n    }\n    defineReadOnly(this, \"provider\", provider || null);\n  }\n  get mnemonic() {\n    return this._mnemonic();\n  }\n  get privateKey() {\n    return this._signingKey().privateKey;\n  }\n  get publicKey() {\n    return this._signingKey().publicKey;\n  }\n  getAddress() {\n    return Promise.resolve(this.address);\n  }\n  connect(provider) {\n    return new Wallet(this, provider);\n  }\n  signTransaction(transaction) {\n    return resolveProperties(transaction).then(tx => {\n      if (tx.from != null) {\n        if (getAddress(tx.from) !== this.address) {\n          logger.throwArgumentError(\"transaction from address mismatch\", \"transaction.from\", transaction.from);\n        }\n        delete tx.from;\n      }\n      const signature = this._signingKey().signDigest(keccak256(serialize(tx)));\n      return serialize(tx, signature);\n    });\n  }\n  signMessage(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return joinSignature(this._signingKey().signDigest(hashMessage(message)));\n    });\n  }\n  _signTypedData(domain, types, value) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Populate any ENS names\n      const populated = yield _TypedDataEncoder.resolveNames(domain, types, value, name => {\n        if (this.provider == null) {\n          logger.throwError(\"cannot resolve ENS names without a provider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"resolveName\",\n            value: name\n          });\n        }\n        return this.provider.resolveName(name);\n      });\n      return joinSignature(this._signingKey().signDigest(_TypedDataEncoder.hash(populated.domain, types, populated.value)));\n    });\n  }\n  encrypt(password, options, progressCallback) {\n    if (typeof options === \"function\" && !progressCallback) {\n      progressCallback = options;\n      options = {};\n    }\n    if (progressCallback && typeof progressCallback !== \"function\") {\n      throw new Error(\"invalid callback\");\n    }\n    if (!options) {\n      options = {};\n    }\n    return encryptKeystore(this, password, options, progressCallback);\n  }\n  /**\n   *  Static methods to create Wallet instances.\n   */\n  static createRandom(options) {\n    let entropy = randomBytes(16);\n    if (!options) {\n      options = {};\n    }\n    if (options.extraEntropy) {\n      entropy = arrayify(hexDataSlice(keccak256(concat([entropy, options.extraEntropy])), 0, 16));\n    }\n    const mnemonic = entropyToMnemonic(entropy, options.locale);\n    return Wallet.fromMnemonic(mnemonic, options.path, options.locale);\n  }\n  static fromEncryptedJson(json, password, progressCallback) {\n    return decryptJsonWallet(json, password, progressCallback).then(account => {\n      return new Wallet(account);\n    });\n  }\n  static fromEncryptedJsonSync(json, password) {\n    return new Wallet(decryptJsonWalletSync(json, password));\n  }\n  static fromMnemonic(mnemonic, path, wordlist) {\n    if (!path) {\n      path = defaultPath;\n    }\n    return new Wallet(HDNode.fromMnemonic(mnemonic, null, wordlist).derivePath(path));\n  }\n}\nexport function verifyMessage(message, signature) {\n  return recoverAddress(hashMessage(message), signature);\n}\nexport function verifyTypedData(domain, types, value, signature) {\n  return recoverAddress(_TypedDataEncoder.hash(domain, types, value), signature);\n}","map":{"version":3,"sources":["../src.ts/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { getAddress } from \"@ethersproject/address\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { arrayify, concat, hexDataSlice, isHexString, joinSignature } from \"@ethersproject/bytes\";\nimport { hashMessage, _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { defaultPath, HDNode, entropyToMnemonic } from \"@ethersproject/hdnode\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, resolveProperties } from \"@ethersproject/properties\";\nimport { randomBytes } from \"@ethersproject/random\";\nimport { SigningKey } from \"@ethersproject/signing-key\";\nimport { decryptJsonWallet, decryptJsonWalletSync, encryptKeystore } from \"@ethersproject/json-wallets\";\nimport { computeAddress, recoverAddress, serialize } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nfunction isAccount(value) {\n    return (value != null && isHexString(value.privateKey, 32) && value.address != null);\n}\nfunction hasMnemonic(value) {\n    const mnemonic = value.mnemonic;\n    return (mnemonic && mnemonic.phrase);\n}\nexport class Wallet extends Signer {\n    constructor(privateKey, provider) {\n        super();\n        if (isAccount(privateKey)) {\n            const signingKey = new SigningKey(privateKey.privateKey);\n            defineReadOnly(this, \"_signingKey\", () => signingKey);\n            defineReadOnly(this, \"address\", computeAddress(this.publicKey));\n            if (this.address !== getAddress(privateKey.address)) {\n                logger.throwArgumentError(\"privateKey/address mismatch\", \"privateKey\", \"[REDACTED]\");\n            }\n            if (hasMnemonic(privateKey)) {\n                const srcMnemonic = privateKey.mnemonic;\n                defineReadOnly(this, \"_mnemonic\", () => ({\n                    phrase: srcMnemonic.phrase,\n                    path: srcMnemonic.path || defaultPath,\n                    locale: srcMnemonic.locale || \"en\"\n                }));\n                const mnemonic = this.mnemonic;\n                const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path);\n                if (computeAddress(node.privateKey) !== this.address) {\n                    logger.throwArgumentError(\"mnemonic/address mismatch\", \"privateKey\", \"[REDACTED]\");\n                }\n            }\n            else {\n                defineReadOnly(this, \"_mnemonic\", () => null);\n            }\n        }\n        else {\n            if (SigningKey.isSigningKey(privateKey)) {\n                /* istanbul ignore if */\n                if (privateKey.curve !== \"secp256k1\") {\n                    logger.throwArgumentError(\"unsupported curve; must be secp256k1\", \"privateKey\", \"[REDACTED]\");\n                }\n                defineReadOnly(this, \"_signingKey\", () => privateKey);\n            }\n            else {\n                // A lot of common tools do not prefix private keys with a 0x (see: #1166)\n                if (typeof (privateKey) === \"string\") {\n                    if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {\n                        privateKey = \"0x\" + privateKey;\n                    }\n                }\n                const signingKey = new SigningKey(privateKey);\n                defineReadOnly(this, \"_signingKey\", () => signingKey);\n            }\n            defineReadOnly(this, \"_mnemonic\", () => null);\n            defineReadOnly(this, \"address\", computeAddress(this.publicKey));\n        }\n        /* istanbul ignore if */\n        if (provider && !Provider.isProvider(provider)) {\n            logger.throwArgumentError(\"invalid provider\", \"provider\", provider);\n        }\n        defineReadOnly(this, \"provider\", provider || null);\n    }\n    get mnemonic() { return this._mnemonic(); }\n    get privateKey() { return this._signingKey().privateKey; }\n    get publicKey() { return this._signingKey().publicKey; }\n    getAddress() {\n        return Promise.resolve(this.address);\n    }\n    connect(provider) {\n        return new Wallet(this, provider);\n    }\n    signTransaction(transaction) {\n        return resolveProperties(transaction).then((tx) => {\n            if (tx.from != null) {\n                if (getAddress(tx.from) !== this.address) {\n                    logger.throwArgumentError(\"transaction from address mismatch\", \"transaction.from\", transaction.from);\n                }\n                delete tx.from;\n            }\n            const signature = this._signingKey().signDigest(keccak256(serialize(tx)));\n            return serialize(tx, signature);\n        });\n    }\n    signMessage(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return joinSignature(this._signingKey().signDigest(hashMessage(message)));\n        });\n    }\n    _signTypedData(domain, types, value) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Populate any ENS names\n            const populated = yield _TypedDataEncoder.resolveNames(domain, types, value, (name) => {\n                if (this.provider == null) {\n                    logger.throwError(\"cannot resolve ENS names without a provider\", Logger.errors.UNSUPPORTED_OPERATION, {\n                        operation: \"resolveName\",\n                        value: name\n                    });\n                }\n                return this.provider.resolveName(name);\n            });\n            return joinSignature(this._signingKey().signDigest(_TypedDataEncoder.hash(populated.domain, types, populated.value)));\n        });\n    }\n    encrypt(password, options, progressCallback) {\n        if (typeof (options) === \"function\" && !progressCallback) {\n            progressCallback = options;\n            options = {};\n        }\n        if (progressCallback && typeof (progressCallback) !== \"function\") {\n            throw new Error(\"invalid callback\");\n        }\n        if (!options) {\n            options = {};\n        }\n        return encryptKeystore(this, password, options, progressCallback);\n    }\n    /**\n     *  Static methods to create Wallet instances.\n     */\n    static createRandom(options) {\n        let entropy = randomBytes(16);\n        if (!options) {\n            options = {};\n        }\n        if (options.extraEntropy) {\n            entropy = arrayify(hexDataSlice(keccak256(concat([entropy, options.extraEntropy])), 0, 16));\n        }\n        const mnemonic = entropyToMnemonic(entropy, options.locale);\n        return Wallet.fromMnemonic(mnemonic, options.path, options.locale);\n    }\n    static fromEncryptedJson(json, password, progressCallback) {\n        return decryptJsonWallet(json, password, progressCallback).then((account) => {\n            return new Wallet(account);\n        });\n    }\n    static fromEncryptedJsonSync(json, password) {\n        return new Wallet(decryptJsonWalletSync(json, password));\n    }\n    static fromMnemonic(mnemonic, path, wordlist) {\n        if (!path) {\n            path = defaultPath;\n        }\n        return new Wallet(HDNode.fromMnemonic(mnemonic, null, wordlist).derivePath(path));\n    }\n}\nexport function verifyMessage(message, signature) {\n    return recoverAddress(hashMessage(message), signature);\n}\nexport function verifyTypedData(domain, types, value, signature) {\n    return recoverAddress(_TypedDataEncoder.hash(domain, types, value), signature);\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}