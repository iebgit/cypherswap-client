{"ast":null,"code":"\"use strict\";\n\nimport aes from \"aes-js\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { pbkdf2 } from \"@ethersproject/pbkdf2\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { Description } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { getPassword, looseArrayify, searchPath } from \"./utils\";\nexport class CrowdsaleAccount extends Description {\n  isCrowdsaleAccount(value) {\n    return !!(value && value._isCrowdsaleAccount);\n  }\n}\n// See: https://github.com/ethereum/pyethsaletool\nexport function decrypt(json, password) {\n  const data = JSON.parse(json);\n  password = getPassword(password);\n  // Ethereum Address\n  const ethaddr = getAddress(searchPath(data, \"ethaddr\"));\n  // Encrypted Seed\n  const encseed = looseArrayify(searchPath(data, \"encseed\"));\n  if (!encseed || encseed.length % 16 !== 0) {\n    logger.throwArgumentError(\"invalid encseed\", \"json\", json);\n  }\n  const key = arrayify(pbkdf2(password, password, 2000, 32, \"sha256\")).slice(0, 16);\n  const iv = encseed.slice(0, 16);\n  const encryptedSeed = encseed.slice(16);\n  // Decrypt the seed\n  const aesCbc = new aes.ModeOfOperation.cbc(key, iv);\n  const seed = aes.padding.pkcs7.strip(arrayify(aesCbc.decrypt(encryptedSeed)));\n  // This wallet format is weird... Convert the binary encoded hex to a string.\n  let seedHex = \"\";\n  for (let i = 0; i < seed.length; i++) {\n    seedHex += String.fromCharCode(seed[i]);\n  }\n  const seedHexBytes = toUtf8Bytes(seedHex);\n  const privateKey = keccak256(seedHexBytes);\n  return new CrowdsaleAccount({\n    _isCrowdsaleAccount: true,\n    address: ethaddr,\n    privateKey: privateKey\n  });\n}","map":{"version":3,"sources":["../src.ts/crowdsale.ts"],"names":[],"mappings":"AAAA,YAAY;;AAEZ,OAAO,GAAG,MAAM,QAAQ;AAGxB,SAAS,UAAU,QAAQ,wBAAwB;AACnD,SAAS,QAAQ,QAAe,sBAAsB;AACtD,SAAS,SAAS,QAAQ,0BAA0B;AACpD,SAAS,MAAM,QAAQ,uBAAuB;AAC9C,SAAS,WAAW,QAAQ,wBAAwB;AACpD,SAAS,WAAW,QAAQ,2BAA2B;AAEvD,SAAS,MAAM,QAAQ,uBAAuB;AAC9C,SAAS,OAAO,QAAQ,YAAY;AACpC,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,OAAO,CAAC;AAElC,SAAS,WAAW,EAAE,aAAa,EAAE,UAAU,QAAQ,SAAS;AAShE,OAAM,MAAO,gBAAiB,SAAQ,WAA8B,CAAA;EAQhE,kBAAkB,CAAC,KAAU,EAAA;IACzB,OAAO,CAAC,EAAE,KAAK,IAAI,KAAK,CAAC,mBAAmB,CAAC;EACjD;AACH;AAED;AACA,OAAM,SAAU,OAAO,CAAC,IAAY,EAAE,QAAwB,EAAA;EAC1D,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;EAE7B,QAAQ,GAAG,WAAW,CAAC,QAAQ,CAAC;EAEhC;EACA,MAAM,OAAO,GAAG,UAAU,CAAC,UAAU,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;EAEvD;EACA,MAAM,OAAO,GAAG,aAAa,CAAC,UAAU,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;EAC1D,IAAI,CAAC,OAAO,IAAK,OAAO,CAAC,MAAM,GAAG,EAAE,KAAM,CAAC,EAAE;IACzC,MAAM,CAAC,kBAAkB,CAAC,iBAAiB,EAAE,MAAM,EAAE,IAAI,CAAC;EAC7D;EAED,MAAM,GAAG,GAAG,QAAQ,CAAC,MAAM,CAAC,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;EAEjF,MAAM,EAAE,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;EAC/B,MAAM,aAAa,GAAG,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC;EAEvC;EACA,MAAM,MAAM,GAAG,IAAI,GAAG,CAAC,eAAe,CAAC,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC;EACnD,MAAM,IAAI,GAAG,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;EAE7E;EACA,IAAI,OAAO,GAAG,EAAE;EAChB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IAClC,OAAO,IAAI,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;EAC1C;EAED,MAAM,YAAY,GAAG,WAAW,CAAC,OAAO,CAAC;EAEzC,MAAM,UAAU,GAAG,SAAS,CAAC,YAAY,CAAC;EAE1C,OAAO,IAAI,gBAAgB,CAAE;IACzB,mBAAmB,EAAE,IAAI;IACzB,OAAO,EAAE,OAAO;IAChB,UAAU,EAAE;GACf,CAAC;AACN","sourceRoot":"","sourcesContent":["\"use strict\";\nimport aes from \"aes-js\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { pbkdf2 } from \"@ethersproject/pbkdf2\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { Description } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { getPassword, looseArrayify, searchPath } from \"./utils\";\nexport class CrowdsaleAccount extends Description {\n    isCrowdsaleAccount(value) {\n        return !!(value && value._isCrowdsaleAccount);\n    }\n}\n// See: https://github.com/ethereum/pyethsaletool\nexport function decrypt(json, password) {\n    const data = JSON.parse(json);\n    password = getPassword(password);\n    // Ethereum Address\n    const ethaddr = getAddress(searchPath(data, \"ethaddr\"));\n    // Encrypted Seed\n    const encseed = looseArrayify(searchPath(data, \"encseed\"));\n    if (!encseed || (encseed.length % 16) !== 0) {\n        logger.throwArgumentError(\"invalid encseed\", \"json\", json);\n    }\n    const key = arrayify(pbkdf2(password, password, 2000, 32, \"sha256\")).slice(0, 16);\n    const iv = encseed.slice(0, 16);\n    const encryptedSeed = encseed.slice(16);\n    // Decrypt the seed\n    const aesCbc = new aes.ModeOfOperation.cbc(key, iv);\n    const seed = aes.padding.pkcs7.strip(arrayify(aesCbc.decrypt(encryptedSeed)));\n    // This wallet format is weird... Convert the binary encoded hex to a string.\n    let seedHex = \"\";\n    for (let i = 0; i < seed.length; i++) {\n        seedHex += String.fromCharCode(seed[i]);\n    }\n    const seedHexBytes = toUtf8Bytes(seedHex);\n    const privateKey = keccak256(seedHexBytes);\n    return new CrowdsaleAccount({\n        _isCrowdsaleAccount: true,\n        address: ethaddr,\n        privateKey: privateKey\n    });\n}\n//# sourceMappingURL=crowdsale.js.map"]},"metadata":{},"sourceType":"module"}