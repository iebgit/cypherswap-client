{"ast":null,"code":"import { showThrottleMessage } from \"./formatter\";\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nconst defaultApiKey = \"9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972\";\nfunction getHost(name) {\n  switch (name) {\n    case \"homestead\":\n      return \"rpc.ankr.com/eth/\";\n    case \"ropsten\":\n      return \"rpc.ankr.com/eth_ropsten/\";\n    case \"rinkeby\":\n      return \"rpc.ankr.com/eth_rinkeby/\";\n    case \"goerli\":\n      return \"rpc.ankr.com/eth_goerli/\";\n    case \"matic\":\n      return \"rpc.ankr.com/polygon/\";\n    case \"arbitrum\":\n      return \"rpc.ankr.com/arbitrum/\";\n  }\n  return logger.throwArgumentError(\"unsupported network\", \"name\", name);\n}\nexport class AnkrProvider extends UrlJsonRpcProvider {\n  isCommunityResource() {\n    return this.apiKey === defaultApiKey;\n  }\n  static getApiKey(apiKey) {\n    if (apiKey == null) {\n      return defaultApiKey;\n    }\n    return apiKey;\n  }\n  static getUrl(network, apiKey) {\n    if (apiKey == null) {\n      apiKey = defaultApiKey;\n    }\n    const connection = {\n      allowGzip: true,\n      url: \"https:/\\/\" + getHost(network.name) + apiKey,\n      throttleCallback: (attempt, url) => {\n        if (apiKey.apiKey === defaultApiKey) {\n          showThrottleMessage();\n        }\n        return Promise.resolve(true);\n      }\n    };\n    if (apiKey.projectSecret != null) {\n      connection.user = \"\";\n      connection.password = apiKey.projectSecret;\n    }\n    return connection;\n  }\n}","map":{"version":3,"sources":["../src.ts/ankr-provider.ts"],"names":[],"mappings":"AAGA,SAAS,mBAAmB,QAAQ,aAAa;AACjD,SAAS,kBAAkB,QAAQ,yBAAyB;AAI5D,SAAS,MAAM,QAAQ,uBAAuB;AAC9C,SAAS,OAAO,QAAQ,YAAY;AACpC,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,OAAO,CAAC;AAGlC,MAAM,aAAa,GAAG,kEAAkE;AAExF,SAAS,OAAO,CAAC,IAAY,EAAA;EACzB,QAAQ,IAAI;IACR,KAAK,WAAW;MACZ,OAAO,mBAAmB;IAC9B,KAAK,SAAS;MACV,OAAO,2BAA2B;IACtC,KAAK,SAAS;MACV,OAAO,2BAA2B;IACtC,KAAK,QAAQ;MACT,OAAO,0BAA0B;IAErC,KAAK,OAAO;MACR,OAAO,uBAAuB;IAElC,KAAK,UAAU;MACX,OAAO,wBAAwB;EAAC;EAExC,OAAO,MAAM,CAAC,kBAAkB,CAAC,qBAAqB,EAAE,MAAM,EAAE,IAAI,CAAC;AACzE;AAEA,OAAM,MAAO,YAAa,SAAQ,kBAAkB,CAAA;EAGhD,mBAAmB,GAAA;IACf,OAAQ,IAAI,CAAC,MAAM,KAAK,aAAa;EACzC;EAEA,OAAO,SAAS,CAAC,MAAW,EAAA;IACxB,IAAI,MAAM,IAAI,IAAI,EAAE;MAAE,OAAO,aAAa;IAAG;IAC7C,OAAO,MAAM;EACjB;EAEA,OAAO,MAAM,CAAC,OAAgB,EAAE,MAAW,EAAA;IACvC,IAAI,MAAM,IAAI,IAAI,EAAE;MAAE,MAAM,GAAG,aAAa;IAAG;IAC/C,MAAM,UAAU,GAAmB;MAC/B,SAAS,EAAE,IAAI;MACf,GAAG,EAAG,WAAW,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,MAAO;MACnD,gBAAgB,EAAE,CAAC,OAAe,EAAE,GAAW,KAAI;QAC/C,IAAI,MAAM,CAAC,MAAM,KAAK,aAAa,EAAE;UACjC,mBAAmB,EAAE;QACxB;QACD,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC;MAChC;KACH;IAED,IAAI,MAAM,CAAC,aAAa,IAAI,IAAI,EAAE;MAC9B,UAAU,CAAC,IAAI,GAAG,EAAE;MACpB,UAAU,CAAC,QAAQ,GAAG,MAAM,CAAC,aAAa;IAC7C;IAED,OAAO,UAAU;EACrB;AACH","sourceRoot":"","sourcesContent":["import { showThrottleMessage } from \"./formatter\";\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nconst defaultApiKey = \"9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972\";\nfunction getHost(name) {\n    switch (name) {\n        case \"homestead\":\n            return \"rpc.ankr.com/eth/\";\n        case \"ropsten\":\n            return \"rpc.ankr.com/eth_ropsten/\";\n        case \"rinkeby\":\n            return \"rpc.ankr.com/eth_rinkeby/\";\n        case \"goerli\":\n            return \"rpc.ankr.com/eth_goerli/\";\n        case \"matic\":\n            return \"rpc.ankr.com/polygon/\";\n        case \"arbitrum\":\n            return \"rpc.ankr.com/arbitrum/\";\n    }\n    return logger.throwArgumentError(\"unsupported network\", \"name\", name);\n}\nexport class AnkrProvider extends UrlJsonRpcProvider {\n    isCommunityResource() {\n        return (this.apiKey === defaultApiKey);\n    }\n    static getApiKey(apiKey) {\n        if (apiKey == null) {\n            return defaultApiKey;\n        }\n        return apiKey;\n    }\n    static getUrl(network, apiKey) {\n        if (apiKey == null) {\n            apiKey = defaultApiKey;\n        }\n        const connection = {\n            allowGzip: true,\n            url: (\"https:/\\/\" + getHost(network.name) + apiKey),\n            throttleCallback: (attempt, url) => {\n                if (apiKey.apiKey === defaultApiKey) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n        if (apiKey.projectSecret != null) {\n            connection.user = \"\";\n            connection.password = apiKey.projectSecret;\n        }\n        return connection;\n    }\n}\n//# sourceMappingURL=ankr-provider.js.map"]},"metadata":{},"sourceType":"module"}