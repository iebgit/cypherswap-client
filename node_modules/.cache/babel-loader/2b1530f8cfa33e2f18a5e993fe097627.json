{"ast":null,"code":"\"use strict\";\n\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { showThrottleMessage } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nconst defaultProjectId = \"84842078b09946638c03157f83405213\";\nexport class InfuraWebSocketProvider extends WebSocketProvider {\n  constructor(network, apiKey) {\n    const provider = new InfuraProvider(network, apiKey);\n    const connection = provider.connection;\n    if (connection.password) {\n      logger.throwError(\"INFURA WebSocket project secrets unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"InfuraProvider.getWebSocketProvider()\"\n      });\n    }\n    const url = connection.url.replace(/^http/i, \"ws\").replace(\"/v3/\", \"/ws/v3/\");\n    super(url, network);\n    defineReadOnly(this, \"apiKey\", provider.projectId);\n    defineReadOnly(this, \"projectId\", provider.projectId);\n    defineReadOnly(this, \"projectSecret\", provider.projectSecret);\n  }\n  isCommunityResource() {\n    return this.projectId === defaultProjectId;\n  }\n}\nexport class InfuraProvider extends UrlJsonRpcProvider {\n  static getWebSocketProvider(network, apiKey) {\n    return new InfuraWebSocketProvider(network, apiKey);\n  }\n  static getApiKey(apiKey) {\n    const apiKeyObj = {\n      apiKey: defaultProjectId,\n      projectId: defaultProjectId,\n      projectSecret: null\n    };\n    if (apiKey == null) {\n      return apiKeyObj;\n    }\n    if (typeof apiKey === \"string\") {\n      apiKeyObj.projectId = apiKey;\n    } else if (apiKey.projectSecret != null) {\n      logger.assertArgument(typeof apiKey.projectId === \"string\", \"projectSecret requires a projectId\", \"projectId\", apiKey.projectId);\n      logger.assertArgument(typeof apiKey.projectSecret === \"string\", \"invalid projectSecret\", \"projectSecret\", \"[REDACTED]\");\n      apiKeyObj.projectId = apiKey.projectId;\n      apiKeyObj.projectSecret = apiKey.projectSecret;\n    } else if (apiKey.projectId) {\n      apiKeyObj.projectId = apiKey.projectId;\n    }\n    apiKeyObj.apiKey = apiKeyObj.projectId;\n    return apiKeyObj;\n  }\n  static getUrl(network, apiKey) {\n    let host = null;\n    switch (network ? network.name : \"unknown\") {\n      case \"homestead\":\n        host = \"mainnet.infura.io\";\n        break;\n      case \"goerli\":\n        host = \"goerli.infura.io\";\n        break;\n      case \"sepolia\":\n        host = \"sepolia.infura.io\";\n        break;\n      case \"matic\":\n        host = \"polygon-mainnet.infura.io\";\n        break;\n      case \"maticmum\":\n        host = \"polygon-mumbai.infura.io\";\n        break;\n      case \"optimism\":\n        host = \"optimism-mainnet.infura.io\";\n        break;\n      case \"optimism-goerli\":\n        host = \"optimism-goerli.infura.io\";\n        break;\n      case \"arbitrum\":\n        host = \"arbitrum-mainnet.infura.io\";\n        break;\n      case \"arbitrum-goerli\":\n        host = \"arbitrum-goerli.infura.io\";\n        break;\n      default:\n        logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"network\",\n          value: network\n        });\n    }\n    const connection = {\n      allowGzip: true,\n      url: \"https:/\" + \"/\" + host + \"/v3/\" + apiKey.projectId,\n      throttleCallback: (attempt, url) => {\n        if (apiKey.projectId === defaultProjectId) {\n          showThrottleMessage();\n        }\n        return Promise.resolve(true);\n      }\n    };\n    if (apiKey.projectSecret != null) {\n      connection.user = \"\";\n      connection.password = apiKey.projectSecret;\n    }\n    return connection;\n  }\n  isCommunityResource() {\n    return this.projectId === defaultProjectId;\n  }\n}","map":{"version":3,"sources":["../src.ts/infura-provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { showThrottleMessage } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nconst defaultProjectId = \"84842078b09946638c03157f83405213\";\nexport class InfuraWebSocketProvider extends WebSocketProvider {\n    constructor(network, apiKey) {\n        const provider = new InfuraProvider(network, apiKey);\n        const connection = provider.connection;\n        if (connection.password) {\n            logger.throwError(\"INFURA WebSocket project secrets unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"InfuraProvider.getWebSocketProvider()\"\n            });\n        }\n        const url = connection.url.replace(/^http/i, \"ws\").replace(\"/v3/\", \"/ws/v3/\");\n        super(url, network);\n        defineReadOnly(this, \"apiKey\", provider.projectId);\n        defineReadOnly(this, \"projectId\", provider.projectId);\n        defineReadOnly(this, \"projectSecret\", provider.projectSecret);\n    }\n    isCommunityResource() {\n        return (this.projectId === defaultProjectId);\n    }\n}\nexport class InfuraProvider extends UrlJsonRpcProvider {\n    static getWebSocketProvider(network, apiKey) {\n        return new InfuraWebSocketProvider(network, apiKey);\n    }\n    static getApiKey(apiKey) {\n        const apiKeyObj = {\n            apiKey: defaultProjectId,\n            projectId: defaultProjectId,\n            projectSecret: null\n        };\n        if (apiKey == null) {\n            return apiKeyObj;\n        }\n        if (typeof (apiKey) === \"string\") {\n            apiKeyObj.projectId = apiKey;\n        }\n        else if (apiKey.projectSecret != null) {\n            logger.assertArgument((typeof (apiKey.projectId) === \"string\"), \"projectSecret requires a projectId\", \"projectId\", apiKey.projectId);\n            logger.assertArgument((typeof (apiKey.projectSecret) === \"string\"), \"invalid projectSecret\", \"projectSecret\", \"[REDACTED]\");\n            apiKeyObj.projectId = apiKey.projectId;\n            apiKeyObj.projectSecret = apiKey.projectSecret;\n        }\n        else if (apiKey.projectId) {\n            apiKeyObj.projectId = apiKey.projectId;\n        }\n        apiKeyObj.apiKey = apiKeyObj.projectId;\n        return apiKeyObj;\n    }\n    static getUrl(network, apiKey) {\n        let host = null;\n        switch (network ? network.name : \"unknown\") {\n            case \"homestead\":\n                host = \"mainnet.infura.io\";\n                break;\n            case \"goerli\":\n                host = \"goerli.infura.io\";\n                break;\n            case \"sepolia\":\n                host = \"sepolia.infura.io\";\n                break;\n            case \"matic\":\n                host = \"polygon-mainnet.infura.io\";\n                break;\n            case \"maticmum\":\n                host = \"polygon-mumbai.infura.io\";\n                break;\n            case \"optimism\":\n                host = \"optimism-mainnet.infura.io\";\n                break;\n            case \"optimism-goerli\":\n                host = \"optimism-goerli.infura.io\";\n                break;\n            case \"arbitrum\":\n                host = \"arbitrum-mainnet.infura.io\";\n                break;\n            case \"arbitrum-goerli\":\n                host = \"arbitrum-goerli.infura.io\";\n                break;\n            default:\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n        }\n        const connection = {\n            allowGzip: true,\n            url: (\"https:/\" + \"/\" + host + \"/v3/\" + apiKey.projectId),\n            throttleCallback: (attempt, url) => {\n                if (apiKey.projectId === defaultProjectId) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n        if (apiKey.projectSecret != null) {\n            connection.user = \"\";\n            connection.password = apiKey.projectSecret;\n        }\n        return connection;\n    }\n    isCommunityResource() {\n        return (this.projectId === defaultProjectId);\n    }\n}\n//# sourceMappingURL=infura-provider.js.map"]},"metadata":{},"sourceType":"module"}