{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { hexlify, hexValue, isHexString } from \"@ethersproject/bytes\";\nimport { deepCopy, defineReadOnly } from \"@ethersproject/properties\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { fetchJson } from \"@ethersproject/web\";\nimport { showThrottleMessage } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { BaseProvider } from \"./base-provider\";\n// The transaction has already been sanitized by the calls in Provider\nfunction getTransactionPostData(transaction) {\n  const result = {};\n  for (let key in transaction) {\n    if (transaction[key] == null) {\n      continue;\n    }\n    let value = transaction[key];\n    if (key === \"type\" && value === 0) {\n      continue;\n    }\n    // Quantity-types require no leading zero, unless 0\n    if ({\n      type: true,\n      gasLimit: true,\n      gasPrice: true,\n      maxFeePerGs: true,\n      maxPriorityFeePerGas: true,\n      nonce: true,\n      value: true\n    }[key]) {\n      value = hexValue(hexlify(value));\n    } else if (key === \"accessList\") {\n      value = \"[\" + accessListify(value).map(set => {\n        return `{address:\"${set.address}\",storageKeys:[\"${set.storageKeys.join('\",\"')}\"]}`;\n      }).join(\",\") + \"]\";\n    } else {\n      value = hexlify(value);\n    }\n    result[key] = value;\n  }\n  return result;\n}\nfunction getResult(result) {\n  // getLogs, getHistory have weird success responses\n  if (result.status == 0 && (result.message === \"No records found\" || result.message === \"No transactions found\")) {\n    return result.result;\n  }\n  if (result.status != 1 || typeof result.message !== \"string\" || !result.message.match(/^OK/)) {\n    const error = new Error(\"invalid response\");\n    error.result = JSON.stringify(result);\n    if ((result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n      error.throttleRetry = true;\n    }\n    throw error;\n  }\n  return result.result;\n}\nfunction getJsonResult(result) {\n  // This response indicates we are being throttled\n  if (result && result.status == 0 && result.message == \"NOTOK\" && (result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n    const error = new Error(\"throttled response\");\n    error.result = JSON.stringify(result);\n    error.throttleRetry = true;\n    throw error;\n  }\n  if (result.jsonrpc != \"2.0\") {\n    // @TODO: not any\n    const error = new Error(\"invalid response\");\n    error.result = JSON.stringify(result);\n    throw error;\n  }\n  if (result.error) {\n    // @TODO: not any\n    const error = new Error(result.error.message || \"unknown error\");\n    if (result.error.code) {\n      error.code = result.error.code;\n    }\n    if (result.error.data) {\n      error.data = result.error.data;\n    }\n    throw error;\n  }\n  return result.result;\n}\n// The blockTag was normalized as a string by the Provider pre-perform operations\nfunction checkLogTag(blockTag) {\n  if (blockTag === \"pending\") {\n    throw new Error(\"pending not supported\");\n  }\n  if (blockTag === \"latest\") {\n    return blockTag;\n  }\n  return parseInt(blockTag.substring(2), 16);\n}\nfunction checkError(method, error, transaction) {\n  // Undo the \"convenience\" some nodes are attempting to prevent backwards\n  // incompatibility; maybe for v6 consider forwarding reverts as errors\n  if (method === \"call\" && error.code === Logger.errors.SERVER_ERROR) {\n    const e = error.error;\n    // Etherscan keeps changing their string\n    if (e && (e.message.match(/reverted/i) || e.message.match(/VM execution error/i))) {\n      // Etherscan prefixes the data like \"Reverted 0x1234\"\n      let data = e.data;\n      if (data) {\n        data = \"0x\" + data.replace(/^.*0x/i, \"\");\n      }\n      if (isHexString(data)) {\n        return data;\n      }\n      logger.throwError(\"missing revert data in call exception\", Logger.errors.CALL_EXCEPTION, {\n        error,\n        data: \"0x\"\n      });\n    }\n  }\n  // Get the message from any nested error structure\n  let message = error.message;\n  if (error.code === Logger.errors.SERVER_ERROR) {\n    if (error.error && typeof error.error.message === \"string\") {\n      message = error.error.message;\n    } else if (typeof error.body === \"string\") {\n      message = error.body;\n    } else if (typeof error.responseText === \"string\") {\n      message = error.responseText;\n    }\n  }\n  message = (message || \"\").toLowerCase();\n  // \"Insufficient funds. The account you tried to send transaction from does not have enough funds. Required 21464000000000 and got: 0\"\n  if (message.match(/insufficient funds/)) {\n    logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n      error,\n      method,\n      transaction\n    });\n  }\n  // \"Transaction with the same hash was already imported.\"\n  if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {\n    logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n      error,\n      method,\n      transaction\n    });\n  }\n  // \"Transaction gas price is too low. There is another transaction with same nonce in the queue. Try increasing the gas price or incrementing the nonce.\"\n  if (message.match(/another transaction with same nonce/)) {\n    logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n      error,\n      method,\n      transaction\n    });\n  }\n  if (message.match(/execution failed due to an exception|execution reverted/)) {\n    logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n      error,\n      method,\n      transaction\n    });\n  }\n  throw error;\n}\nexport class EtherscanProvider extends BaseProvider {\n  constructor(network, apiKey) {\n    super(network);\n    defineReadOnly(this, \"baseUrl\", this.getBaseUrl());\n    defineReadOnly(this, \"apiKey\", apiKey || null);\n  }\n  getBaseUrl() {\n    switch (this.network ? this.network.name : \"invalid\") {\n      case \"homestead\":\n        return \"https:/\\/api.etherscan.io\";\n      case \"goerli\":\n        return \"https:/\\/api-goerli.etherscan.io\";\n      case \"sepolia\":\n        return \"https:/\\/api-sepolia.etherscan.io\";\n      case \"matic\":\n        return \"https:/\\/api.polygonscan.com\";\n      case \"maticmum\":\n        return \"https:/\\/api-testnet.polygonscan.com\";\n      case \"arbitrum\":\n        return \"https:/\\/api.arbiscan.io\";\n      case \"arbitrum-goerli\":\n        return \"https:/\\/api-goerli.arbiscan.io\";\n      case \"optimism\":\n        return \"https:/\\/api-optimistic.etherscan.io\";\n      case \"optimism-goerli\":\n        return \"https:/\\/api-goerli-optimistic.etherscan.io\";\n      default:\n    }\n    return logger.throwArgumentError(\"unsupported network\", \"network\", this.network.name);\n  }\n  getUrl(module, params) {\n    const query = Object.keys(params).reduce((accum, key) => {\n      const value = params[key];\n      if (value != null) {\n        accum += `&${key}=${value}`;\n      }\n      return accum;\n    }, \"\");\n    const apiKey = this.apiKey ? `&apikey=${this.apiKey}` : \"\";\n    return `${this.baseUrl}/api?module=${module}${query}${apiKey}`;\n  }\n  getPostUrl() {\n    return `${this.baseUrl}/api`;\n  }\n  getPostData(module, params) {\n    params.module = module;\n    params.apikey = this.apiKey;\n    return params;\n  }\n  fetch(module, params, post) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const url = post ? this.getPostUrl() : this.getUrl(module, params);\n      const payload = post ? this.getPostData(module, params) : null;\n      const procFunc = module === \"proxy\" ? getJsonResult : getResult;\n      this.emit(\"debug\", {\n        action: \"request\",\n        request: url,\n        provider: this\n      });\n      const connection = {\n        url: url,\n        throttleSlotInterval: 1000,\n        throttleCallback: (attempt, url) => {\n          if (this.isCommunityResource()) {\n            showThrottleMessage();\n          }\n          return Promise.resolve(true);\n        }\n      };\n      let payloadStr = null;\n      if (payload) {\n        connection.headers = {\n          \"content-type\": \"application/x-www-form-urlencoded; charset=UTF-8\"\n        };\n        payloadStr = Object.keys(payload).map(key => {\n          return `${key}=${payload[key]}`;\n        }).join(\"&\");\n      }\n      const result = yield fetchJson(connection, payloadStr, procFunc || getJsonResult);\n      this.emit(\"debug\", {\n        action: \"response\",\n        request: url,\n        response: deepCopy(result),\n        provider: this\n      });\n      return result;\n    });\n  }\n  detectNetwork() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.network;\n    });\n  }\n  perform(method, params) {\n    const _super = Object.create(null, {\n      perform: {\n        get: () => super.perform\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      switch (method) {\n        case \"getBlockNumber\":\n          return this.fetch(\"proxy\", {\n            action: \"eth_blockNumber\"\n          });\n        case \"getGasPrice\":\n          return this.fetch(\"proxy\", {\n            action: \"eth_gasPrice\"\n          });\n        case \"getBalance\":\n          // Returns base-10 result\n          return this.fetch(\"account\", {\n            action: \"balance\",\n            address: params.address,\n            tag: params.blockTag\n          });\n        case \"getTransactionCount\":\n          return this.fetch(\"proxy\", {\n            action: \"eth_getTransactionCount\",\n            address: params.address,\n            tag: params.blockTag\n          });\n        case \"getCode\":\n          return this.fetch(\"proxy\", {\n            action: \"eth_getCode\",\n            address: params.address,\n            tag: params.blockTag\n          });\n        case \"getStorageAt\":\n          return this.fetch(\"proxy\", {\n            action: \"eth_getStorageAt\",\n            address: params.address,\n            position: params.position,\n            tag: params.blockTag\n          });\n        case \"sendTransaction\":\n          return this.fetch(\"proxy\", {\n            action: \"eth_sendRawTransaction\",\n            hex: params.signedTransaction\n          }, true).catch(error => {\n            return checkError(\"sendTransaction\", error, params.signedTransaction);\n          });\n        case \"getBlock\":\n          if (params.blockTag) {\n            return this.fetch(\"proxy\", {\n              action: \"eth_getBlockByNumber\",\n              tag: params.blockTag,\n              boolean: params.includeTransactions ? \"true\" : \"false\"\n            });\n          }\n          throw new Error(\"getBlock by blockHash not implemented\");\n        case \"getTransaction\":\n          return this.fetch(\"proxy\", {\n            action: \"eth_getTransactionByHash\",\n            txhash: params.transactionHash\n          });\n        case \"getTransactionReceipt\":\n          return this.fetch(\"proxy\", {\n            action: \"eth_getTransactionReceipt\",\n            txhash: params.transactionHash\n          });\n        case \"call\":\n          {\n            if (params.blockTag !== \"latest\") {\n              throw new Error(\"EtherscanProvider does not support blockTag for call\");\n            }\n            const postData = getTransactionPostData(params.transaction);\n            postData.module = \"proxy\";\n            postData.action = \"eth_call\";\n            try {\n              return yield this.fetch(\"proxy\", postData, true);\n            } catch (error) {\n              return checkError(\"call\", error, params.transaction);\n            }\n          }\n        case \"estimateGas\":\n          {\n            const postData = getTransactionPostData(params.transaction);\n            postData.module = \"proxy\";\n            postData.action = \"eth_estimateGas\";\n            try {\n              return yield this.fetch(\"proxy\", postData, true);\n            } catch (error) {\n              return checkError(\"estimateGas\", error, params.transaction);\n            }\n          }\n        case \"getLogs\":\n          {\n            const args = {\n              action: \"getLogs\"\n            };\n            if (params.filter.fromBlock) {\n              args.fromBlock = checkLogTag(params.filter.fromBlock);\n            }\n            if (params.filter.toBlock) {\n              args.toBlock = checkLogTag(params.filter.toBlock);\n            }\n            if (params.filter.address) {\n              args.address = params.filter.address;\n            }\n            // @TODO: We can handle slightly more complicated logs using the logs API\n            if (params.filter.topics && params.filter.topics.length > 0) {\n              if (params.filter.topics.length > 1) {\n                logger.throwError(\"unsupported topic count\", Logger.errors.UNSUPPORTED_OPERATION, {\n                  topics: params.filter.topics\n                });\n              }\n              if (params.filter.topics.length === 1) {\n                const topic0 = params.filter.topics[0];\n                if (typeof topic0 !== \"string\" || topic0.length !== 66) {\n                  logger.throwError(\"unsupported topic format\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    topic0: topic0\n                  });\n                }\n                args.topic0 = topic0;\n              }\n            }\n            const logs = yield this.fetch(\"logs\", args);\n            // Cache txHash => blockHash\n            let blocks = {};\n            // Add any missing blockHash to the logs\n            for (let i = 0; i < logs.length; i++) {\n              const log = logs[i];\n              if (log.blockHash != null) {\n                continue;\n              }\n              if (blocks[log.blockNumber] == null) {\n                const block = yield this.getBlock(log.blockNumber);\n                if (block) {\n                  blocks[log.blockNumber] = block.hash;\n                }\n              }\n              log.blockHash = blocks[log.blockNumber];\n            }\n            return logs;\n          }\n        case \"getEtherPrice\":\n          if (this.network.name !== \"homestead\") {\n            return 0.0;\n          }\n          return parseFloat((yield this.fetch(\"stats\", {\n            action: \"ethprice\"\n          })).ethusd);\n        default:\n          break;\n      }\n      return _super.perform.call(this, method, params);\n    });\n  }\n  // Note: The `page` page parameter only allows pagination within the\n  //       10,000 window available without a page and offset parameter\n  //       Error: Result window is too large, PageNo x Offset size must\n  //              be less than or equal to 10000\n  getHistory(addressOrName, startBlock, endBlock) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const params = {\n        action: \"txlist\",\n        address: yield this.resolveName(addressOrName),\n        startblock: startBlock == null ? 0 : startBlock,\n        endblock: endBlock == null ? 99999999 : endBlock,\n        sort: \"asc\"\n      };\n      const result = yield this.fetch(\"account\", params);\n      return result.map(tx => {\n        [\"contractAddress\", \"to\"].forEach(function (key) {\n          if (tx[key] == \"\") {\n            delete tx[key];\n          }\n        });\n        if (tx.creates == null && tx.contractAddress != null) {\n          tx.creates = tx.contractAddress;\n        }\n        const item = this.formatter.transactionResponse(tx);\n        if (tx.timeStamp) {\n          item.timestamp = parseInt(tx.timeStamp);\n        }\n        return item;\n      });\n    });\n  }\n  isCommunityResource() {\n    return this.apiKey == null;\n  }\n}","map":{"version":3,"sources":["../src.ts/etherscan-provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { hexlify, hexValue, isHexString } from \"@ethersproject/bytes\";\nimport { deepCopy, defineReadOnly } from \"@ethersproject/properties\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { fetchJson } from \"@ethersproject/web\";\nimport { showThrottleMessage } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { BaseProvider } from \"./base-provider\";\n// The transaction has already been sanitized by the calls in Provider\nfunction getTransactionPostData(transaction) {\n    const result = {};\n    for (let key in transaction) {\n        if (transaction[key] == null) {\n            continue;\n        }\n        let value = transaction[key];\n        if (key === \"type\" && value === 0) {\n            continue;\n        }\n        // Quantity-types require no leading zero, unless 0\n        if ({ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true }[key]) {\n            value = hexValue(hexlify(value));\n        }\n        else if (key === \"accessList\") {\n            value = \"[\" + accessListify(value).map((set) => {\n                return `{address:\"${set.address}\",storageKeys:[\"${set.storageKeys.join('\",\"')}\"]}`;\n            }).join(\",\") + \"]\";\n        }\n        else {\n            value = hexlify(value);\n        }\n        result[key] = value;\n    }\n    return result;\n}\nfunction getResult(result) {\n    // getLogs, getHistory have weird success responses\n    if (result.status == 0 && (result.message === \"No records found\" || result.message === \"No transactions found\")) {\n        return result.result;\n    }\n    if (result.status != 1 || typeof (result.message) !== \"string\" || !result.message.match(/^OK/)) {\n        const error = new Error(\"invalid response\");\n        error.result = JSON.stringify(result);\n        if ((result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n            error.throttleRetry = true;\n        }\n        throw error;\n    }\n    return result.result;\n}\nfunction getJsonResult(result) {\n    // This response indicates we are being throttled\n    if (result && result.status == 0 && result.message == \"NOTOK\" && (result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n        const error = new Error(\"throttled response\");\n        error.result = JSON.stringify(result);\n        error.throttleRetry = true;\n        throw error;\n    }\n    if (result.jsonrpc != \"2.0\") {\n        // @TODO: not any\n        const error = new Error(\"invalid response\");\n        error.result = JSON.stringify(result);\n        throw error;\n    }\n    if (result.error) {\n        // @TODO: not any\n        const error = new Error(result.error.message || \"unknown error\");\n        if (result.error.code) {\n            error.code = result.error.code;\n        }\n        if (result.error.data) {\n            error.data = result.error.data;\n        }\n        throw error;\n    }\n    return result.result;\n}\n// The blockTag was normalized as a string by the Provider pre-perform operations\nfunction checkLogTag(blockTag) {\n    if (blockTag === \"pending\") {\n        throw new Error(\"pending not supported\");\n    }\n    if (blockTag === \"latest\") {\n        return blockTag;\n    }\n    return parseInt(blockTag.substring(2), 16);\n}\nfunction checkError(method, error, transaction) {\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\" && error.code === Logger.errors.SERVER_ERROR) {\n        const e = error.error;\n        // Etherscan keeps changing their string\n        if (e && (e.message.match(/reverted/i) || e.message.match(/VM execution error/i))) {\n            // Etherscan prefixes the data like \"Reverted 0x1234\"\n            let data = e.data;\n            if (data) {\n                data = \"0x\" + data.replace(/^.*0x/i, \"\");\n            }\n            if (isHexString(data)) {\n                return data;\n            }\n            logger.throwError(\"missing revert data in call exception\", Logger.errors.CALL_EXCEPTION, {\n                error, data: \"0x\"\n            });\n        }\n    }\n    // Get the message from any nested error structure\n    let message = error.message;\n    if (error.code === Logger.errors.SERVER_ERROR) {\n        if (error.error && typeof (error.error.message) === \"string\") {\n            message = error.error.message;\n        }\n        else if (typeof (error.body) === \"string\") {\n            message = error.body;\n        }\n        else if (typeof (error.responseText) === \"string\") {\n            message = error.responseText;\n        }\n    }\n    message = (message || \"\").toLowerCase();\n    // \"Insufficient funds. The account you tried to send transaction from does not have enough funds. Required 21464000000000 and got: 0\"\n    if (message.match(/insufficient funds/)) {\n        logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n            error, method, transaction\n        });\n    }\n    // \"Transaction with the same hash was already imported.\"\n    if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {\n        logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n            error, method, transaction\n        });\n    }\n    // \"Transaction gas price is too low. There is another transaction with same nonce in the queue. Try increasing the gas price or incrementing the nonce.\"\n    if (message.match(/another transaction with same nonce/)) {\n        logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n            error, method, transaction\n        });\n    }\n    if (message.match(/execution failed due to an exception|execution reverted/)) {\n        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error, method, transaction\n        });\n    }\n    throw error;\n}\nexport class EtherscanProvider extends BaseProvider {\n    constructor(network, apiKey) {\n        super(network);\n        defineReadOnly(this, \"baseUrl\", this.getBaseUrl());\n        defineReadOnly(this, \"apiKey\", apiKey || null);\n    }\n    getBaseUrl() {\n        switch (this.network ? this.network.name : \"invalid\") {\n            case \"homestead\":\n                return \"https:/\\/api.etherscan.io\";\n            case \"goerli\":\n                return \"https:/\\/api-goerli.etherscan.io\";\n            case \"sepolia\":\n                return \"https:/\\/api-sepolia.etherscan.io\";\n            case \"matic\":\n                return \"https:/\\/api.polygonscan.com\";\n            case \"maticmum\":\n                return \"https:/\\/api-testnet.polygonscan.com\";\n            case \"arbitrum\":\n                return \"https:/\\/api.arbiscan.io\";\n            case \"arbitrum-goerli\":\n                return \"https:/\\/api-goerli.arbiscan.io\";\n            case \"optimism\":\n                return \"https:/\\/api-optimistic.etherscan.io\";\n            case \"optimism-goerli\":\n                return \"https:/\\/api-goerli-optimistic.etherscan.io\";\n            default:\n        }\n        return logger.throwArgumentError(\"unsupported network\", \"network\", this.network.name);\n    }\n    getUrl(module, params) {\n        const query = Object.keys(params).reduce((accum, key) => {\n            const value = params[key];\n            if (value != null) {\n                accum += `&${key}=${value}`;\n            }\n            return accum;\n        }, \"\");\n        const apiKey = ((this.apiKey) ? `&apikey=${this.apiKey}` : \"\");\n        return `${this.baseUrl}/api?module=${module}${query}${apiKey}`;\n    }\n    getPostUrl() {\n        return `${this.baseUrl}/api`;\n    }\n    getPostData(module, params) {\n        params.module = module;\n        params.apikey = this.apiKey;\n        return params;\n    }\n    fetch(module, params, post) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const url = (post ? this.getPostUrl() : this.getUrl(module, params));\n            const payload = (post ? this.getPostData(module, params) : null);\n            const procFunc = (module === \"proxy\") ? getJsonResult : getResult;\n            this.emit(\"debug\", {\n                action: \"request\",\n                request: url,\n                provider: this\n            });\n            const connection = {\n                url: url,\n                throttleSlotInterval: 1000,\n                throttleCallback: (attempt, url) => {\n                    if (this.isCommunityResource()) {\n                        showThrottleMessage();\n                    }\n                    return Promise.resolve(true);\n                }\n            };\n            let payloadStr = null;\n            if (payload) {\n                connection.headers = { \"content-type\": \"application/x-www-form-urlencoded; charset=UTF-8\" };\n                payloadStr = Object.keys(payload).map((key) => {\n                    return `${key}=${payload[key]}`;\n                }).join(\"&\");\n            }\n            const result = yield fetchJson(connection, payloadStr, procFunc || getJsonResult);\n            this.emit(\"debug\", {\n                action: \"response\",\n                request: url,\n                response: deepCopy(result),\n                provider: this\n            });\n            return result;\n        });\n    }\n    detectNetwork() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.network;\n        });\n    }\n    perform(method, params) {\n        const _super = Object.create(null, {\n            perform: { get: () => super.perform }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            switch (method) {\n                case \"getBlockNumber\":\n                    return this.fetch(\"proxy\", { action: \"eth_blockNumber\" });\n                case \"getGasPrice\":\n                    return this.fetch(\"proxy\", { action: \"eth_gasPrice\" });\n                case \"getBalance\":\n                    // Returns base-10 result\n                    return this.fetch(\"account\", {\n                        action: \"balance\",\n                        address: params.address,\n                        tag: params.blockTag\n                    });\n                case \"getTransactionCount\":\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_getTransactionCount\",\n                        address: params.address,\n                        tag: params.blockTag\n                    });\n                case \"getCode\":\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_getCode\",\n                        address: params.address,\n                        tag: params.blockTag\n                    });\n                case \"getStorageAt\":\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_getStorageAt\",\n                        address: params.address,\n                        position: params.position,\n                        tag: params.blockTag\n                    });\n                case \"sendTransaction\":\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_sendRawTransaction\",\n                        hex: params.signedTransaction\n                    }, true).catch((error) => {\n                        return checkError(\"sendTransaction\", error, params.signedTransaction);\n                    });\n                case \"getBlock\":\n                    if (params.blockTag) {\n                        return this.fetch(\"proxy\", {\n                            action: \"eth_getBlockByNumber\",\n                            tag: params.blockTag,\n                            boolean: (params.includeTransactions ? \"true\" : \"false\")\n                        });\n                    }\n                    throw new Error(\"getBlock by blockHash not implemented\");\n                case \"getTransaction\":\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_getTransactionByHash\",\n                        txhash: params.transactionHash\n                    });\n                case \"getTransactionReceipt\":\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_getTransactionReceipt\",\n                        txhash: params.transactionHash\n                    });\n                case \"call\": {\n                    if (params.blockTag !== \"latest\") {\n                        throw new Error(\"EtherscanProvider does not support blockTag for call\");\n                    }\n                    const postData = getTransactionPostData(params.transaction);\n                    postData.module = \"proxy\";\n                    postData.action = \"eth_call\";\n                    try {\n                        return yield this.fetch(\"proxy\", postData, true);\n                    }\n                    catch (error) {\n                        return checkError(\"call\", error, params.transaction);\n                    }\n                }\n                case \"estimateGas\": {\n                    const postData = getTransactionPostData(params.transaction);\n                    postData.module = \"proxy\";\n                    postData.action = \"eth_estimateGas\";\n                    try {\n                        return yield this.fetch(\"proxy\", postData, true);\n                    }\n                    catch (error) {\n                        return checkError(\"estimateGas\", error, params.transaction);\n                    }\n                }\n                case \"getLogs\": {\n                    const args = { action: \"getLogs\" };\n                    if (params.filter.fromBlock) {\n                        args.fromBlock = checkLogTag(params.filter.fromBlock);\n                    }\n                    if (params.filter.toBlock) {\n                        args.toBlock = checkLogTag(params.filter.toBlock);\n                    }\n                    if (params.filter.address) {\n                        args.address = params.filter.address;\n                    }\n                    // @TODO: We can handle slightly more complicated logs using the logs API\n                    if (params.filter.topics && params.filter.topics.length > 0) {\n                        if (params.filter.topics.length > 1) {\n                            logger.throwError(\"unsupported topic count\", Logger.errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });\n                        }\n                        if (params.filter.topics.length === 1) {\n                            const topic0 = params.filter.topics[0];\n                            if (typeof (topic0) !== \"string\" || topic0.length !== 66) {\n                                logger.throwError(\"unsupported topic format\", Logger.errors.UNSUPPORTED_OPERATION, { topic0: topic0 });\n                            }\n                            args.topic0 = topic0;\n                        }\n                    }\n                    const logs = yield this.fetch(\"logs\", args);\n                    // Cache txHash => blockHash\n                    let blocks = {};\n                    // Add any missing blockHash to the logs\n                    for (let i = 0; i < logs.length; i++) {\n                        const log = logs[i];\n                        if (log.blockHash != null) {\n                            continue;\n                        }\n                        if (blocks[log.blockNumber] == null) {\n                            const block = yield this.getBlock(log.blockNumber);\n                            if (block) {\n                                blocks[log.blockNumber] = block.hash;\n                            }\n                        }\n                        log.blockHash = blocks[log.blockNumber];\n                    }\n                    return logs;\n                }\n                case \"getEtherPrice\":\n                    if (this.network.name !== \"homestead\") {\n                        return 0.0;\n                    }\n                    return parseFloat((yield this.fetch(\"stats\", { action: \"ethprice\" })).ethusd);\n                default:\n                    break;\n            }\n            return _super.perform.call(this, method, params);\n        });\n    }\n    // Note: The `page` page parameter only allows pagination within the\n    //       10,000 window available without a page and offset parameter\n    //       Error: Result window is too large, PageNo x Offset size must\n    //              be less than or equal to 10000\n    getHistory(addressOrName, startBlock, endBlock) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                action: \"txlist\",\n                address: (yield this.resolveName(addressOrName)),\n                startblock: ((startBlock == null) ? 0 : startBlock),\n                endblock: ((endBlock == null) ? 99999999 : endBlock),\n                sort: \"asc\"\n            };\n            const result = yield this.fetch(\"account\", params);\n            return result.map((tx) => {\n                [\"contractAddress\", \"to\"].forEach(function (key) {\n                    if (tx[key] == \"\") {\n                        delete tx[key];\n                    }\n                });\n                if (tx.creates == null && tx.contractAddress != null) {\n                    tx.creates = tx.contractAddress;\n                }\n                const item = this.formatter.transactionResponse(tx);\n                if (tx.timeStamp) {\n                    item.timestamp = parseInt(tx.timeStamp);\n                }\n                return item;\n            });\n        });\n    }\n    isCommunityResource() {\n        return (this.apiKey == null);\n    }\n}\n//# sourceMappingURL=etherscan-provider.js.map"]},"metadata":{},"sourceType":"module"}