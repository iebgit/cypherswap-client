{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { checkResultErrors, Indexed, Interface } from \"@ethersproject/abi\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { Signer, VoidSigner } from \"@ethersproject/abstract-signer\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\nimport { defineReadOnly, deepCopy, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n;\n;\n///////////////////////////////\nconst allowedTransactionKeys = {\n  chainId: true,\n  data: true,\n  from: true,\n  gasLimit: true,\n  gasPrice: true,\n  nonce: true,\n  to: true,\n  value: true,\n  type: true,\n  accessList: true,\n  maxFeePerGas: true,\n  maxPriorityFeePerGas: true,\n  customData: true,\n  ccipReadEnabled: true\n};\nfunction resolveName(resolver, nameOrPromise) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const name = yield nameOrPromise;\n    if (typeof name !== \"string\") {\n      logger.throwArgumentError(\"invalid address or ENS name\", \"name\", name);\n    }\n    // If it is already an address, just use it (after adding checksum)\n    try {\n      return getAddress(name);\n    } catch (error) {}\n    if (!resolver) {\n      logger.throwError(\"a provider or signer is needed to resolve ENS names\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"resolveName\"\n      });\n    }\n    const address = yield resolver.resolveName(name);\n    if (address == null) {\n      logger.throwArgumentError(\"resolver or addr is not configured for ENS name\", \"name\", name);\n    }\n    return address;\n  });\n}\n// Recursively replaces ENS names with promises to resolve the name and resolves all properties\nfunction resolveAddresses(resolver, value, paramType) {\n  return __awaiter(this, void 0, void 0, function* () {\n    if (Array.isArray(paramType)) {\n      return yield Promise.all(paramType.map((paramType, index) => {\n        return resolveAddresses(resolver, Array.isArray(value) ? value[index] : value[paramType.name], paramType);\n      }));\n    }\n    if (paramType.type === \"address\") {\n      return yield resolveName(resolver, value);\n    }\n    if (paramType.type === \"tuple\") {\n      return yield resolveAddresses(resolver, value, paramType.components);\n    }\n    if (paramType.baseType === \"array\") {\n      if (!Array.isArray(value)) {\n        return Promise.reject(logger.makeError(\"invalid value for array\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"value\",\n          value\n        }));\n      }\n      return yield Promise.all(value.map(v => resolveAddresses(resolver, v, paramType.arrayChildren)));\n    }\n    return value;\n  });\n}\nfunction populateTransaction(contract, fragment, args) {\n  return __awaiter(this, void 0, void 0, function* () {\n    // If an extra argument is given, it is overrides\n    let overrides = {};\n    if (args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === \"object\") {\n      overrides = shallowCopy(args.pop());\n    }\n    // Make sure the parameter count matches\n    logger.checkArgumentCount(args.length, fragment.inputs.length, \"passed to contract\");\n    // Populate \"from\" override (allow promises)\n    if (contract.signer) {\n      if (overrides.from) {\n        // Contracts with a Signer are from the Signer's frame-of-reference;\n        // but we allow overriding \"from\" if it matches the signer\n        overrides.from = resolveProperties({\n          override: resolveName(contract.signer, overrides.from),\n          signer: contract.signer.getAddress()\n        }).then(check => __awaiter(this, void 0, void 0, function* () {\n          if (getAddress(check.signer) !== check.override) {\n            logger.throwError(\"Contract with a Signer cannot override from\", Logger.errors.UNSUPPORTED_OPERATION, {\n              operation: \"overrides.from\"\n            });\n          }\n          return check.override;\n        }));\n      } else {\n        overrides.from = contract.signer.getAddress();\n      }\n    } else if (overrides.from) {\n      overrides.from = resolveName(contract.provider, overrides.from);\n      //} else {\n      // Contracts without a signer can override \"from\", and if\n      // unspecified the zero address is used\n      //overrides.from = AddressZero;\n    }\n    // Wait for all dependencies to be resolved (prefer the signer over the provider)\n    const resolved = yield resolveProperties({\n      args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),\n      address: contract.resolvedAddress,\n      overrides: resolveProperties(overrides) || {}\n    });\n    // The ABI coded transaction\n    const data = contract.interface.encodeFunctionData(fragment, resolved.args);\n    const tx = {\n      data: data,\n      to: resolved.address\n    };\n    // Resolved Overrides\n    const ro = resolved.overrides;\n    // Populate simple overrides\n    if (ro.nonce != null) {\n      tx.nonce = BigNumber.from(ro.nonce).toNumber();\n    }\n    if (ro.gasLimit != null) {\n      tx.gasLimit = BigNumber.from(ro.gasLimit);\n    }\n    if (ro.gasPrice != null) {\n      tx.gasPrice = BigNumber.from(ro.gasPrice);\n    }\n    if (ro.maxFeePerGas != null) {\n      tx.maxFeePerGas = BigNumber.from(ro.maxFeePerGas);\n    }\n    if (ro.maxPriorityFeePerGas != null) {\n      tx.maxPriorityFeePerGas = BigNumber.from(ro.maxPriorityFeePerGas);\n    }\n    if (ro.from != null) {\n      tx.from = ro.from;\n    }\n    if (ro.type != null) {\n      tx.type = ro.type;\n    }\n    if (ro.accessList != null) {\n      tx.accessList = accessListify(ro.accessList);\n    }\n    // If there was no \"gasLimit\" override, but the ABI specifies a default, use it\n    if (tx.gasLimit == null && fragment.gas != null) {\n      // Compute the intrinsic gas cost for this transaction\n      // @TODO: This is based on the yellow paper as of Petersburg; this is something\n      // we may wish to parameterize in v6 as part of the Network object. Since this\n      // is always a non-nil to address, we can ignore G_create, but may wish to add\n      // similar logic to the ContractFactory.\n      let intrinsic = 21000;\n      const bytes = arrayify(data);\n      for (let i = 0; i < bytes.length; i++) {\n        intrinsic += 4;\n        if (bytes[i]) {\n          intrinsic += 64;\n        }\n      }\n      tx.gasLimit = BigNumber.from(fragment.gas).add(intrinsic);\n    }\n    // Populate \"value\" override\n    if (ro.value) {\n      const roValue = BigNumber.from(ro.value);\n      if (!roValue.isZero() && !fragment.payable) {\n        logger.throwError(\"non-payable method cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"overrides.value\",\n          value: overrides.value\n        });\n      }\n      tx.value = roValue;\n    }\n    if (ro.customData) {\n      tx.customData = shallowCopy(ro.customData);\n    }\n    if (ro.ccipReadEnabled) {\n      tx.ccipReadEnabled = !!ro.ccipReadEnabled;\n    }\n    // Remove the overrides\n    delete overrides.nonce;\n    delete overrides.gasLimit;\n    delete overrides.gasPrice;\n    delete overrides.from;\n    delete overrides.value;\n    delete overrides.type;\n    delete overrides.accessList;\n    delete overrides.maxFeePerGas;\n    delete overrides.maxPriorityFeePerGas;\n    delete overrides.customData;\n    delete overrides.ccipReadEnabled;\n    // Make sure there are no stray overrides, which may indicate a\n    // typo or using an unsupported key.\n    const leftovers = Object.keys(overrides).filter(key => overrides[key] != null);\n    if (leftovers.length) {\n      logger.throwError(`cannot override ${leftovers.map(l => JSON.stringify(l)).join(\",\")}`, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"overrides\",\n        overrides: leftovers\n      });\n    }\n    return tx;\n  });\n}\nfunction buildPopulate(contract, fragment) {\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return populateTransaction(contract, fragment, args);\n  };\n}\nfunction buildEstimate(contract, fragment) {\n  const signerOrProvider = contract.signer || contract.provider;\n  return function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!signerOrProvider) {\n        logger.throwError(\"estimate require a provider or signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"estimateGas\"\n        });\n      }\n      const tx = yield populateTransaction(contract, fragment, args);\n      return yield signerOrProvider.estimateGas(tx);\n    });\n  };\n}\nfunction addContractWait(contract, tx) {\n  const wait = tx.wait.bind(tx);\n  tx.wait = confirmations => {\n    return wait(confirmations).then(receipt => {\n      receipt.events = receipt.logs.map(log => {\n        let event = deepCopy(log);\n        let parsed = null;\n        try {\n          parsed = contract.interface.parseLog(log);\n        } catch (e) {}\n        // Successfully parsed the event log; include it\n        if (parsed) {\n          event.args = parsed.args;\n          event.decode = (data, topics) => {\n            return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);\n          };\n          event.event = parsed.name;\n          event.eventSignature = parsed.signature;\n        }\n        // Useful operations\n        event.removeListener = () => {\n          return contract.provider;\n        };\n        event.getBlock = () => {\n          return contract.provider.getBlock(receipt.blockHash);\n        };\n        event.getTransaction = () => {\n          return contract.provider.getTransaction(receipt.transactionHash);\n        };\n        event.getTransactionReceipt = () => {\n          return Promise.resolve(receipt);\n        };\n        return event;\n      });\n      return receipt;\n    });\n  };\n}\nfunction buildCall(contract, fragment, collapseSimple) {\n  const signerOrProvider = contract.signer || contract.provider;\n  return function () {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    return __awaiter(this, void 0, void 0, function* () {\n      // Extract the \"blockTag\" override if present\n      let blockTag = undefined;\n      if (args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === \"object\") {\n        const overrides = shallowCopy(args.pop());\n        if (overrides.blockTag != null) {\n          blockTag = yield overrides.blockTag;\n        }\n        delete overrides.blockTag;\n        args.push(overrides);\n      }\n      // If the contract was just deployed, wait until it is mined\n      if (contract.deployTransaction != null) {\n        yield contract._deployed(blockTag);\n      }\n      // Call a node and get the result\n      const tx = yield populateTransaction(contract, fragment, args);\n      const result = yield signerOrProvider.call(tx, blockTag);\n      try {\n        let value = contract.interface.decodeFunctionResult(fragment, result);\n        if (collapseSimple && fragment.outputs.length === 1) {\n          value = value[0];\n        }\n        return value;\n      } catch (error) {\n        if (error.code === Logger.errors.CALL_EXCEPTION) {\n          error.address = contract.address;\n          error.args = args;\n          error.transaction = tx;\n        }\n        throw error;\n      }\n    });\n  };\n}\nfunction buildSend(contract, fragment) {\n  return function () {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!contract.signer) {\n        logger.throwError(\"sending a transaction requires a signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"sendTransaction\"\n        });\n      }\n      // If the contract was just deployed, wait until it is mined\n      if (contract.deployTransaction != null) {\n        yield contract._deployed();\n      }\n      const txRequest = yield populateTransaction(contract, fragment, args);\n      const tx = yield contract.signer.sendTransaction(txRequest);\n      // Tweak the tx.wait so the receipt has extra properties\n      addContractWait(contract, tx);\n      return tx;\n    });\n  };\n}\nfunction buildDefault(contract, fragment, collapseSimple) {\n  if (fragment.constant) {\n    return buildCall(contract, fragment, collapseSimple);\n  }\n  return buildSend(contract, fragment);\n}\nfunction getEventTag(filter) {\n  if (filter.address && (filter.topics == null || filter.topics.length === 0)) {\n    return \"*\";\n  }\n  return (filter.address || \"*\") + \"@\" + (filter.topics ? filter.topics.map(topic => {\n    if (Array.isArray(topic)) {\n      return topic.join(\"|\");\n    }\n    return topic;\n  }).join(\":\") : \"\");\n}\nclass RunningEvent {\n  constructor(tag, filter) {\n    defineReadOnly(this, \"tag\", tag);\n    defineReadOnly(this, \"filter\", filter);\n    this._listeners = [];\n  }\n  addListener(listener, once) {\n    this._listeners.push({\n      listener: listener,\n      once: once\n    });\n  }\n  removeListener(listener) {\n    let done = false;\n    this._listeners = this._listeners.filter(item => {\n      if (done || item.listener !== listener) {\n        return true;\n      }\n      done = true;\n      return false;\n    });\n  }\n  removeAllListeners() {\n    this._listeners = [];\n  }\n  listeners() {\n    return this._listeners.map(i => i.listener);\n  }\n  listenerCount() {\n    return this._listeners.length;\n  }\n  run(args) {\n    const listenerCount = this.listenerCount();\n    this._listeners = this._listeners.filter(item => {\n      const argsCopy = args.slice();\n      // Call the callback in the next event loop\n      setTimeout(() => {\n        item.listener.apply(this, argsCopy);\n      }, 0);\n      // Reschedule it if it not \"once\"\n      return !item.once;\n    });\n    return listenerCount;\n  }\n  prepareEvent(event) {}\n  // Returns the array that will be applied to an emit\n  getEmit(event) {\n    return [event];\n  }\n}\nclass ErrorRunningEvent extends RunningEvent {\n  constructor() {\n    super(\"error\", null);\n  }\n}\n// @TODO Fragment should inherit Wildcard? and just override getEmit?\n//       or have a common abstract super class, with enough constructor\n//       options to configure both.\n// A Fragment Event will populate all the properties that Wildcard\n// will, and additionally dereference the arguments when emitting\nclass FragmentRunningEvent extends RunningEvent {\n  constructor(address, contractInterface, fragment, topics) {\n    const filter = {\n      address: address\n    };\n    let topic = contractInterface.getEventTopic(fragment);\n    if (topics) {\n      if (topic !== topics[0]) {\n        logger.throwArgumentError(\"topic mismatch\", \"topics\", topics);\n      }\n      filter.topics = topics.slice();\n    } else {\n      filter.topics = [topic];\n    }\n    super(getEventTag(filter), filter);\n    defineReadOnly(this, \"address\", address);\n    defineReadOnly(this, \"interface\", contractInterface);\n    defineReadOnly(this, \"fragment\", fragment);\n  }\n  prepareEvent(event) {\n    super.prepareEvent(event);\n    event.event = this.fragment.name;\n    event.eventSignature = this.fragment.format();\n    event.decode = (data, topics) => {\n      return this.interface.decodeEventLog(this.fragment, data, topics);\n    };\n    try {\n      event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);\n    } catch (error) {\n      event.args = null;\n      event.decodeError = error;\n    }\n  }\n  getEmit(event) {\n    const errors = checkResultErrors(event.args);\n    if (errors.length) {\n      throw errors[0].error;\n    }\n    const args = (event.args || []).slice();\n    args.push(event);\n    return args;\n  }\n}\n// A Wildcard Event will attempt to populate:\n//  - event            The name of the event name\n//  - eventSignature   The full signature of the event\n//  - decode           A function to decode data and topics\n//  - args             The decoded data and topics\nclass WildcardRunningEvent extends RunningEvent {\n  constructor(address, contractInterface) {\n    super(\"*\", {\n      address: address\n    });\n    defineReadOnly(this, \"address\", address);\n    defineReadOnly(this, \"interface\", contractInterface);\n  }\n  prepareEvent(event) {\n    super.prepareEvent(event);\n    try {\n      const parsed = this.interface.parseLog(event);\n      event.event = parsed.name;\n      event.eventSignature = parsed.signature;\n      event.decode = (data, topics) => {\n        return this.interface.decodeEventLog(parsed.eventFragment, data, topics);\n      };\n      event.args = parsed.args;\n    } catch (error) {\n      // No matching event\n    }\n  }\n}\nexport class BaseContract {\n  constructor(addressOrName, contractInterface, signerOrProvider) {\n    var _this = this;\n    // @TODO: Maybe still check the addressOrName looks like a valid address or name?\n    //address = getAddress(address);\n    defineReadOnly(this, \"interface\", getStatic(new.target, \"getInterface\")(contractInterface));\n    if (signerOrProvider == null) {\n      defineReadOnly(this, \"provider\", null);\n      defineReadOnly(this, \"signer\", null);\n    } else if (Signer.isSigner(signerOrProvider)) {\n      defineReadOnly(this, \"provider\", signerOrProvider.provider || null);\n      defineReadOnly(this, \"signer\", signerOrProvider);\n    } else if (Provider.isProvider(signerOrProvider)) {\n      defineReadOnly(this, \"provider\", signerOrProvider);\n      defineReadOnly(this, \"signer\", null);\n    } else {\n      logger.throwArgumentError(\"invalid signer or provider\", \"signerOrProvider\", signerOrProvider);\n    }\n    defineReadOnly(this, \"callStatic\", {});\n    defineReadOnly(this, \"estimateGas\", {});\n    defineReadOnly(this, \"functions\", {});\n    defineReadOnly(this, \"populateTransaction\", {});\n    defineReadOnly(this, \"filters\", {});\n    {\n      const uniqueFilters = {};\n      Object.keys(this.interface.events).forEach(eventSignature => {\n        const event = this.interface.events[eventSignature];\n        defineReadOnly(this.filters, eventSignature, function () {\n          for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n            args[_key5] = arguments[_key5];\n          }\n          return {\n            address: _this.address,\n            topics: _this.interface.encodeFilterTopics(event, args)\n          };\n        });\n        if (!uniqueFilters[event.name]) {\n          uniqueFilters[event.name] = [];\n        }\n        uniqueFilters[event.name].push(eventSignature);\n      });\n      Object.keys(uniqueFilters).forEach(name => {\n        const filters = uniqueFilters[name];\n        if (filters.length === 1) {\n          defineReadOnly(this.filters, name, this.filters[filters[0]]);\n        } else {\n          logger.warn(`Duplicate definition of ${name} (${filters.join(\", \")})`);\n        }\n      });\n    }\n    defineReadOnly(this, \"_runningEvents\", {});\n    defineReadOnly(this, \"_wrappedEmits\", {});\n    if (addressOrName == null) {\n      logger.throwArgumentError(\"invalid contract address or ENS name\", \"addressOrName\", addressOrName);\n    }\n    defineReadOnly(this, \"address\", addressOrName);\n    if (this.provider) {\n      defineReadOnly(this, \"resolvedAddress\", resolveName(this.provider, addressOrName));\n    } else {\n      try {\n        defineReadOnly(this, \"resolvedAddress\", Promise.resolve(getAddress(addressOrName)));\n      } catch (error) {\n        // Without a provider, we cannot use ENS names\n        logger.throwError(\"provider is required to use ENS name as contract address\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"new Contract\"\n        });\n      }\n    }\n    // Swallow bad ENS names to prevent Unhandled Exceptions\n    this.resolvedAddress.catch(e => {});\n    const uniqueNames = {};\n    const uniqueSignatures = {};\n    Object.keys(this.interface.functions).forEach(signature => {\n      const fragment = this.interface.functions[signature];\n      // Check that the signature is unique; if not the ABI generation has\n      // not been cleaned or may be incorrectly generated\n      if (uniqueSignatures[signature]) {\n        logger.warn(`Duplicate ABI entry for ${JSON.stringify(signature)}`);\n        return;\n      }\n      uniqueSignatures[signature] = true;\n      // Track unique names; we only expose bare named functions if they\n      // are ambiguous\n      {\n        const name = fragment.name;\n        if (!uniqueNames[`%${name}`]) {\n          uniqueNames[`%${name}`] = [];\n        }\n        uniqueNames[`%${name}`].push(signature);\n      }\n      if (this[signature] == null) {\n        defineReadOnly(this, signature, buildDefault(this, fragment, true));\n      }\n      // We do not collapse simple calls on this bucket, which allows\n      // frameworks to safely use this without introspection as well as\n      // allows decoding error recovery.\n      if (this.functions[signature] == null) {\n        defineReadOnly(this.functions, signature, buildDefault(this, fragment, false));\n      }\n      if (this.callStatic[signature] == null) {\n        defineReadOnly(this.callStatic, signature, buildCall(this, fragment, true));\n      }\n      if (this.populateTransaction[signature] == null) {\n        defineReadOnly(this.populateTransaction, signature, buildPopulate(this, fragment));\n      }\n      if (this.estimateGas[signature] == null) {\n        defineReadOnly(this.estimateGas, signature, buildEstimate(this, fragment));\n      }\n    });\n    Object.keys(uniqueNames).forEach(name => {\n      // Ambiguous names to not get attached as bare names\n      const signatures = uniqueNames[name];\n      if (signatures.length > 1) {\n        return;\n      }\n      // Strip off the leading \"%\" used for prototype protection\n      name = name.substring(1);\n      const signature = signatures[0];\n      // If overwriting a member property that is null, swallow the error\n      try {\n        if (this[name] == null) {\n          defineReadOnly(this, name, this[signature]);\n        }\n      } catch (e) {}\n      if (this.functions[name] == null) {\n        defineReadOnly(this.functions, name, this.functions[signature]);\n      }\n      if (this.callStatic[name] == null) {\n        defineReadOnly(this.callStatic, name, this.callStatic[signature]);\n      }\n      if (this.populateTransaction[name] == null) {\n        defineReadOnly(this.populateTransaction, name, this.populateTransaction[signature]);\n      }\n      if (this.estimateGas[name] == null) {\n        defineReadOnly(this.estimateGas, name, this.estimateGas[signature]);\n      }\n    });\n  }\n  static getContractAddress(transaction) {\n    return getContractAddress(transaction);\n  }\n  static getInterface(contractInterface) {\n    if (Interface.isInterface(contractInterface)) {\n      return contractInterface;\n    }\n    return new Interface(contractInterface);\n  }\n  // @TODO: Allow timeout?\n  deployed() {\n    return this._deployed();\n  }\n  _deployed(blockTag) {\n    if (!this._deployedPromise) {\n      // If we were just deployed, we know the transaction we should occur in\n      if (this.deployTransaction) {\n        this._deployedPromise = this.deployTransaction.wait().then(() => {\n          return this;\n        });\n      } else {\n        // @TODO: Once we allow a timeout to be passed in, we will wait\n        // up to that many blocks for getCode\n        // Otherwise, poll for our code to be deployed\n        this._deployedPromise = this.provider.getCode(this.address, blockTag).then(code => {\n          if (code === \"0x\") {\n            logger.throwError(\"contract not deployed\", Logger.errors.UNSUPPORTED_OPERATION, {\n              contractAddress: this.address,\n              operation: \"getDeployed\"\n            });\n          }\n          return this;\n        });\n      }\n    }\n    return this._deployedPromise;\n  }\n  // @TODO:\n  // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>\n  // @TODO:\n  // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>\n  fallback(overrides) {\n    if (!this.signer) {\n      logger.throwError(\"sending a transactions require a signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"sendTransaction(fallback)\"\n      });\n    }\n    const tx = shallowCopy(overrides || {});\n    [\"from\", \"to\"].forEach(function (key) {\n      if (tx[key] == null) {\n        return;\n      }\n      logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: key\n      });\n    });\n    tx.to = this.resolvedAddress;\n    return this.deployed().then(() => {\n      return this.signer.sendTransaction(tx);\n    });\n  }\n  // Reconnect to a different signer or provider\n  connect(signerOrProvider) {\n    if (typeof signerOrProvider === \"string\") {\n      signerOrProvider = new VoidSigner(signerOrProvider, this.provider);\n    }\n    const contract = new this.constructor(this.address, this.interface, signerOrProvider);\n    if (this.deployTransaction) {\n      defineReadOnly(contract, \"deployTransaction\", this.deployTransaction);\n    }\n    return contract;\n  }\n  // Re-attach to a different on-chain instance of this contract\n  attach(addressOrName) {\n    return new this.constructor(addressOrName, this.interface, this.signer || this.provider);\n  }\n  static isIndexed(value) {\n    return Indexed.isIndexed(value);\n  }\n  _normalizeRunningEvent(runningEvent) {\n    // Already have an instance of this event running; we can re-use it\n    if (this._runningEvents[runningEvent.tag]) {\n      return this._runningEvents[runningEvent.tag];\n    }\n    return runningEvent;\n  }\n  _getRunningEvent(eventName) {\n    if (typeof eventName === \"string\") {\n      // Listen for \"error\" events (if your contract has an error event, include\n      // the full signature to bypass this special event keyword)\n      if (eventName === \"error\") {\n        return this._normalizeRunningEvent(new ErrorRunningEvent());\n      }\n      // Listen for any event that is registered\n      if (eventName === \"event\") {\n        return this._normalizeRunningEvent(new RunningEvent(\"event\", null));\n      }\n      // Listen for any event\n      if (eventName === \"*\") {\n        return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n      }\n      // Get the event Fragment (throws if ambiguous/unknown event)\n      const fragment = this.interface.getEvent(eventName);\n      return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));\n    }\n    // We have topics to filter by...\n    if (eventName.topics && eventName.topics.length > 0) {\n      // Is it a known topichash? (throws if no matching topichash)\n      try {\n        const topic = eventName.topics[0];\n        if (typeof topic !== \"string\") {\n          throw new Error(\"invalid topic\"); // @TODO: May happen for anonymous events\n        }\n\n        const fragment = this.interface.getEvent(topic);\n        return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));\n      } catch (error) {}\n      // Filter by the unknown topichash\n      const filter = {\n        address: this.address,\n        topics: eventName.topics\n      };\n      return this._normalizeRunningEvent(new RunningEvent(getEventTag(filter), filter));\n    }\n    return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n  }\n  _checkRunningEvents(runningEvent) {\n    if (runningEvent.listenerCount() === 0) {\n      delete this._runningEvents[runningEvent.tag];\n      // If we have a poller for this, remove it\n      const emit = this._wrappedEmits[runningEvent.tag];\n      if (emit && runningEvent.filter) {\n        this.provider.off(runningEvent.filter, emit);\n        delete this._wrappedEmits[runningEvent.tag];\n      }\n    }\n  }\n  // Subclasses can override this to gracefully recover\n  // from parse errors if they wish\n  _wrapEvent(runningEvent, log, listener) {\n    const event = deepCopy(log);\n    event.removeListener = () => {\n      if (!listener) {\n        return;\n      }\n      runningEvent.removeListener(listener);\n      this._checkRunningEvents(runningEvent);\n    };\n    event.getBlock = () => {\n      return this.provider.getBlock(log.blockHash);\n    };\n    event.getTransaction = () => {\n      return this.provider.getTransaction(log.transactionHash);\n    };\n    event.getTransactionReceipt = () => {\n      return this.provider.getTransactionReceipt(log.transactionHash);\n    };\n    // This may throw if the topics and data mismatch the signature\n    runningEvent.prepareEvent(event);\n    return event;\n  }\n  _addEventListener(runningEvent, listener, once) {\n    if (!this.provider) {\n      logger.throwError(\"events require a provider or a signer with a provider\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"once\"\n      });\n    }\n    runningEvent.addListener(listener, once);\n    // Track this running event and its listeners (may already be there; but no hard in updating)\n    this._runningEvents[runningEvent.tag] = runningEvent;\n    // If we are not polling the provider, start polling\n    if (!this._wrappedEmits[runningEvent.tag]) {\n      const wrappedEmit = log => {\n        let event = this._wrapEvent(runningEvent, log, listener);\n        // Try to emit the result for the parameterized event...\n        if (event.decodeError == null) {\n          try {\n            const args = runningEvent.getEmit(event);\n            this.emit(runningEvent.filter, ...args);\n          } catch (error) {\n            event.decodeError = error.error;\n          }\n        }\n        // Always emit \"event\" for fragment-base events\n        if (runningEvent.filter != null) {\n          this.emit(\"event\", event);\n        }\n        // Emit \"error\" if there was an error\n        if (event.decodeError != null) {\n          this.emit(\"error\", event.decodeError, event);\n        }\n      };\n      this._wrappedEmits[runningEvent.tag] = wrappedEmit;\n      // Special events, like \"error\" do not have a filter\n      if (runningEvent.filter != null) {\n        this.provider.on(runningEvent.filter, wrappedEmit);\n      }\n    }\n  }\n  queryFilter(event, fromBlockOrBlockhash, toBlock) {\n    const runningEvent = this._getRunningEvent(event);\n    const filter = shallowCopy(runningEvent.filter);\n    if (typeof fromBlockOrBlockhash === \"string\" && isHexString(fromBlockOrBlockhash, 32)) {\n      if (toBlock != null) {\n        logger.throwArgumentError(\"cannot specify toBlock with blockhash\", \"toBlock\", toBlock);\n      }\n      filter.blockHash = fromBlockOrBlockhash;\n    } else {\n      filter.fromBlock = fromBlockOrBlockhash != null ? fromBlockOrBlockhash : 0;\n      filter.toBlock = toBlock != null ? toBlock : \"latest\";\n    }\n    return this.provider.getLogs(filter).then(logs => {\n      return logs.map(log => this._wrapEvent(runningEvent, log, null));\n    });\n  }\n  on(event, listener) {\n    this._addEventListener(this._getRunningEvent(event), listener, false);\n    return this;\n  }\n  once(event, listener) {\n    this._addEventListener(this._getRunningEvent(event), listener, true);\n    return this;\n  }\n  emit(eventName) {\n    if (!this.provider) {\n      return false;\n    }\n    const runningEvent = this._getRunningEvent(eventName);\n    for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n      args[_key6 - 1] = arguments[_key6];\n    }\n    const result = runningEvent.run(args) > 0;\n    // May have drained all the \"once\" events; check for living events\n    this._checkRunningEvents(runningEvent);\n    return result;\n  }\n  listenerCount(eventName) {\n    if (!this.provider) {\n      return 0;\n    }\n    if (eventName == null) {\n      return Object.keys(this._runningEvents).reduce((accum, key) => {\n        return accum + this._runningEvents[key].listenerCount();\n      }, 0);\n    }\n    return this._getRunningEvent(eventName).listenerCount();\n  }\n  listeners(eventName) {\n    if (!this.provider) {\n      return [];\n    }\n    if (eventName == null) {\n      const result = [];\n      for (let tag in this._runningEvents) {\n        this._runningEvents[tag].listeners().forEach(listener => {\n          result.push(listener);\n        });\n      }\n      return result;\n    }\n    return this._getRunningEvent(eventName).listeners();\n  }\n  removeAllListeners(eventName) {\n    if (!this.provider) {\n      return this;\n    }\n    if (eventName == null) {\n      for (const tag in this._runningEvents) {\n        const runningEvent = this._runningEvents[tag];\n        runningEvent.removeAllListeners();\n        this._checkRunningEvents(runningEvent);\n      }\n      return this;\n    }\n    // Delete any listeners\n    const runningEvent = this._getRunningEvent(eventName);\n    runningEvent.removeAllListeners();\n    this._checkRunningEvents(runningEvent);\n    return this;\n  }\n  off(eventName, listener) {\n    if (!this.provider) {\n      return this;\n    }\n    const runningEvent = this._getRunningEvent(eventName);\n    runningEvent.removeListener(listener);\n    this._checkRunningEvents(runningEvent);\n    return this;\n  }\n  removeListener(eventName, listener) {\n    return this.off(eventName, listener);\n  }\n}\nexport class Contract extends BaseContract {}\nexport class ContractFactory {\n  constructor(contractInterface, bytecode, signer) {\n    let bytecodeHex = null;\n    if (typeof bytecode === \"string\") {\n      bytecodeHex = bytecode;\n    } else if (isBytes(bytecode)) {\n      bytecodeHex = hexlify(bytecode);\n    } else if (bytecode && typeof bytecode.object === \"string\") {\n      // Allow the bytecode object from the Solidity compiler\n      bytecodeHex = bytecode.object;\n    } else {\n      // Crash in the next verification step\n      bytecodeHex = \"!\";\n    }\n    // Make sure it is 0x prefixed\n    if (bytecodeHex.substring(0, 2) !== \"0x\") {\n      bytecodeHex = \"0x\" + bytecodeHex;\n    }\n    // Make sure the final result is valid bytecode\n    if (!isHexString(bytecodeHex) || bytecodeHex.length % 2) {\n      logger.throwArgumentError(\"invalid bytecode\", \"bytecode\", bytecode);\n    }\n    // If we have a signer, make sure it is valid\n    if (signer && !Signer.isSigner(signer)) {\n      logger.throwArgumentError(\"invalid signer\", \"signer\", signer);\n    }\n    defineReadOnly(this, \"bytecode\", bytecodeHex);\n    defineReadOnly(this, \"interface\", getStatic(new.target, \"getInterface\")(contractInterface));\n    defineReadOnly(this, \"signer\", signer || null);\n  }\n  // @TODO: Future; rename to populateTransaction?\n  getDeployTransaction() {\n    let tx = {};\n    // If we have 1 additional argument, we allow transaction overrides\n    for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      args[_key7] = arguments[_key7];\n    }\n    if (args.length === this.interface.deploy.inputs.length + 1 && typeof args[args.length - 1] === \"object\") {\n      tx = shallowCopy(args.pop());\n      for (const key in tx) {\n        if (!allowedTransactionKeys[key]) {\n          throw new Error(\"unknown transaction override \" + key);\n        }\n      }\n    }\n    // Do not allow these to be overridden in a deployment transaction\n    [\"data\", \"from\", \"to\"].forEach(key => {\n      if (tx[key] == null) {\n        return;\n      }\n      logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: key\n      });\n    });\n    if (tx.value) {\n      const value = BigNumber.from(tx.value);\n      if (!value.isZero() && !this.interface.deploy.payable) {\n        logger.throwError(\"non-payable constructor cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"overrides.value\",\n          value: tx.value\n        });\n      }\n    }\n    // Make sure the call matches the constructor signature\n    logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n    // Set the data to the bytecode + the encoded constructor arguments\n    tx.data = hexlify(concat([this.bytecode, this.interface.encodeDeploy(args)]));\n    return tx;\n  }\n  deploy() {\n    for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n      args[_key8] = arguments[_key8];\n    }\n    return __awaiter(this, void 0, void 0, function* () {\n      let overrides = {};\n      // If 1 extra parameter was passed in, it contains overrides\n      if (args.length === this.interface.deploy.inputs.length + 1) {\n        overrides = args.pop();\n      }\n      // Make sure the call matches the constructor signature\n      logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n      // Resolve ENS names and promises in the arguments\n      const params = yield resolveAddresses(this.signer, args, this.interface.deploy.inputs);\n      params.push(overrides);\n      // Get the deployment transaction (with optional overrides)\n      const unsignedTx = this.getDeployTransaction(...params);\n      // Send the deployment transaction\n      const tx = yield this.signer.sendTransaction(unsignedTx);\n      const address = getStatic(this.constructor, \"getContractAddress\")(tx);\n      const contract = getStatic(this.constructor, \"getContract\")(address, this.interface, this.signer);\n      // Add the modified wait that wraps events\n      addContractWait(contract, tx);\n      defineReadOnly(contract, \"deployTransaction\", tx);\n      return contract;\n    });\n  }\n  attach(address) {\n    return this.constructor.getContract(address, this.interface, this.signer);\n  }\n  connect(signer) {\n    return new this.constructor(this.interface, this.bytecode, signer);\n  }\n  static fromSolidity(compilerOutput, signer) {\n    if (compilerOutput == null) {\n      logger.throwError(\"missing compiler output\", Logger.errors.MISSING_ARGUMENT, {\n        argument: \"compilerOutput\"\n      });\n    }\n    if (typeof compilerOutput === \"string\") {\n      compilerOutput = JSON.parse(compilerOutput);\n    }\n    const abi = compilerOutput.abi;\n    let bytecode = null;\n    if (compilerOutput.bytecode) {\n      bytecode = compilerOutput.bytecode;\n    } else if (compilerOutput.evm && compilerOutput.evm.bytecode) {\n      bytecode = compilerOutput.evm.bytecode;\n    }\n    return new this(abi, bytecode, signer);\n  }\n  static getInterface(contractInterface) {\n    return Contract.getInterface(contractInterface);\n  }\n  static getContractAddress(tx) {\n    return getContractAddress(tx);\n  }\n  static getContract(address, contractInterface, signer) {\n    return new Contract(address, contractInterface, signer);\n  }\n}","map":{"version":3,"sources":["../src.ts/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { checkResultErrors, Indexed, Interface } from \"@ethersproject/abi\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { Signer, VoidSigner } from \"@ethersproject/abstract-signer\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\nimport { defineReadOnly, deepCopy, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n;\n;\n///////////////////////////////\nconst allowedTransactionKeys = {\n    chainId: true, data: true, from: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true,\n    type: true, accessList: true,\n    maxFeePerGas: true, maxPriorityFeePerGas: true,\n    customData: true,\n    ccipReadEnabled: true\n};\nfunction resolveName(resolver, nameOrPromise) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const name = yield nameOrPromise;\n        if (typeof (name) !== \"string\") {\n            logger.throwArgumentError(\"invalid address or ENS name\", \"name\", name);\n        }\n        // If it is already an address, just use it (after adding checksum)\n        try {\n            return getAddress(name);\n        }\n        catch (error) { }\n        if (!resolver) {\n            logger.throwError(\"a provider or signer is needed to resolve ENS names\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"resolveName\"\n            });\n        }\n        const address = yield resolver.resolveName(name);\n        if (address == null) {\n            logger.throwArgumentError(\"resolver or addr is not configured for ENS name\", \"name\", name);\n        }\n        return address;\n    });\n}\n// Recursively replaces ENS names with promises to resolve the name and resolves all properties\nfunction resolveAddresses(resolver, value, paramType) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (Array.isArray(paramType)) {\n            return yield Promise.all(paramType.map((paramType, index) => {\n                return resolveAddresses(resolver, ((Array.isArray(value)) ? value[index] : value[paramType.name]), paramType);\n            }));\n        }\n        if (paramType.type === \"address\") {\n            return yield resolveName(resolver, value);\n        }\n        if (paramType.type === \"tuple\") {\n            return yield resolveAddresses(resolver, value, paramType.components);\n        }\n        if (paramType.baseType === \"array\") {\n            if (!Array.isArray(value)) {\n                return Promise.reject(logger.makeError(\"invalid value for array\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"value\",\n                    value\n                }));\n            }\n            return yield Promise.all(value.map((v) => resolveAddresses(resolver, v, paramType.arrayChildren)));\n        }\n        return value;\n    });\n}\nfunction populateTransaction(contract, fragment, args) {\n    return __awaiter(this, void 0, void 0, function* () {\n        // If an extra argument is given, it is overrides\n        let overrides = {};\n        if (args.length === fragment.inputs.length + 1 && typeof (args[args.length - 1]) === \"object\") {\n            overrides = shallowCopy(args.pop());\n        }\n        // Make sure the parameter count matches\n        logger.checkArgumentCount(args.length, fragment.inputs.length, \"passed to contract\");\n        // Populate \"from\" override (allow promises)\n        if (contract.signer) {\n            if (overrides.from) {\n                // Contracts with a Signer are from the Signer's frame-of-reference;\n                // but we allow overriding \"from\" if it matches the signer\n                overrides.from = resolveProperties({\n                    override: resolveName(contract.signer, overrides.from),\n                    signer: contract.signer.getAddress()\n                }).then((check) => __awaiter(this, void 0, void 0, function* () {\n                    if (getAddress(check.signer) !== check.override) {\n                        logger.throwError(\"Contract with a Signer cannot override from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                            operation: \"overrides.from\"\n                        });\n                    }\n                    return check.override;\n                }));\n            }\n            else {\n                overrides.from = contract.signer.getAddress();\n            }\n        }\n        else if (overrides.from) {\n            overrides.from = resolveName(contract.provider, overrides.from);\n            //} else {\n            // Contracts without a signer can override \"from\", and if\n            // unspecified the zero address is used\n            //overrides.from = AddressZero;\n        }\n        // Wait for all dependencies to be resolved (prefer the signer over the provider)\n        const resolved = yield resolveProperties({\n            args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),\n            address: contract.resolvedAddress,\n            overrides: (resolveProperties(overrides) || {})\n        });\n        // The ABI coded transaction\n        const data = contract.interface.encodeFunctionData(fragment, resolved.args);\n        const tx = {\n            data: data,\n            to: resolved.address\n        };\n        // Resolved Overrides\n        const ro = resolved.overrides;\n        // Populate simple overrides\n        if (ro.nonce != null) {\n            tx.nonce = BigNumber.from(ro.nonce).toNumber();\n        }\n        if (ro.gasLimit != null) {\n            tx.gasLimit = BigNumber.from(ro.gasLimit);\n        }\n        if (ro.gasPrice != null) {\n            tx.gasPrice = BigNumber.from(ro.gasPrice);\n        }\n        if (ro.maxFeePerGas != null) {\n            tx.maxFeePerGas = BigNumber.from(ro.maxFeePerGas);\n        }\n        if (ro.maxPriorityFeePerGas != null) {\n            tx.maxPriorityFeePerGas = BigNumber.from(ro.maxPriorityFeePerGas);\n        }\n        if (ro.from != null) {\n            tx.from = ro.from;\n        }\n        if (ro.type != null) {\n            tx.type = ro.type;\n        }\n        if (ro.accessList != null) {\n            tx.accessList = accessListify(ro.accessList);\n        }\n        // If there was no \"gasLimit\" override, but the ABI specifies a default, use it\n        if (tx.gasLimit == null && fragment.gas != null) {\n            // Compute the intrinsic gas cost for this transaction\n            // @TODO: This is based on the yellow paper as of Petersburg; this is something\n            // we may wish to parameterize in v6 as part of the Network object. Since this\n            // is always a non-nil to address, we can ignore G_create, but may wish to add\n            // similar logic to the ContractFactory.\n            let intrinsic = 21000;\n            const bytes = arrayify(data);\n            for (let i = 0; i < bytes.length; i++) {\n                intrinsic += 4;\n                if (bytes[i]) {\n                    intrinsic += 64;\n                }\n            }\n            tx.gasLimit = BigNumber.from(fragment.gas).add(intrinsic);\n        }\n        // Populate \"value\" override\n        if (ro.value) {\n            const roValue = BigNumber.from(ro.value);\n            if (!roValue.isZero() && !fragment.payable) {\n                logger.throwError(\"non-payable method cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"overrides.value\",\n                    value: overrides.value\n                });\n            }\n            tx.value = roValue;\n        }\n        if (ro.customData) {\n            tx.customData = shallowCopy(ro.customData);\n        }\n        if (ro.ccipReadEnabled) {\n            tx.ccipReadEnabled = !!ro.ccipReadEnabled;\n        }\n        // Remove the overrides\n        delete overrides.nonce;\n        delete overrides.gasLimit;\n        delete overrides.gasPrice;\n        delete overrides.from;\n        delete overrides.value;\n        delete overrides.type;\n        delete overrides.accessList;\n        delete overrides.maxFeePerGas;\n        delete overrides.maxPriorityFeePerGas;\n        delete overrides.customData;\n        delete overrides.ccipReadEnabled;\n        // Make sure there are no stray overrides, which may indicate a\n        // typo or using an unsupported key.\n        const leftovers = Object.keys(overrides).filter((key) => (overrides[key] != null));\n        if (leftovers.length) {\n            logger.throwError(`cannot override ${leftovers.map((l) => JSON.stringify(l)).join(\",\")}`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"overrides\",\n                overrides: leftovers\n            });\n        }\n        return tx;\n    });\n}\nfunction buildPopulate(contract, fragment) {\n    return function (...args) {\n        return populateTransaction(contract, fragment, args);\n    };\n}\nfunction buildEstimate(contract, fragment) {\n    const signerOrProvider = (contract.signer || contract.provider);\n    return function (...args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!signerOrProvider) {\n                logger.throwError(\"estimate require a provider or signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"estimateGas\"\n                });\n            }\n            const tx = yield populateTransaction(contract, fragment, args);\n            return yield signerOrProvider.estimateGas(tx);\n        });\n    };\n}\nfunction addContractWait(contract, tx) {\n    const wait = tx.wait.bind(tx);\n    tx.wait = (confirmations) => {\n        return wait(confirmations).then((receipt) => {\n            receipt.events = receipt.logs.map((log) => {\n                let event = deepCopy(log);\n                let parsed = null;\n                try {\n                    parsed = contract.interface.parseLog(log);\n                }\n                catch (e) { }\n                // Successfully parsed the event log; include it\n                if (parsed) {\n                    event.args = parsed.args;\n                    event.decode = (data, topics) => {\n                        return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);\n                    };\n                    event.event = parsed.name;\n                    event.eventSignature = parsed.signature;\n                }\n                // Useful operations\n                event.removeListener = () => { return contract.provider; };\n                event.getBlock = () => {\n                    return contract.provider.getBlock(receipt.blockHash);\n                };\n                event.getTransaction = () => {\n                    return contract.provider.getTransaction(receipt.transactionHash);\n                };\n                event.getTransactionReceipt = () => {\n                    return Promise.resolve(receipt);\n                };\n                return event;\n            });\n            return receipt;\n        });\n    };\n}\nfunction buildCall(contract, fragment, collapseSimple) {\n    const signerOrProvider = (contract.signer || contract.provider);\n    return function (...args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Extract the \"blockTag\" override if present\n            let blockTag = undefined;\n            if (args.length === fragment.inputs.length + 1 && typeof (args[args.length - 1]) === \"object\") {\n                const overrides = shallowCopy(args.pop());\n                if (overrides.blockTag != null) {\n                    blockTag = yield overrides.blockTag;\n                }\n                delete overrides.blockTag;\n                args.push(overrides);\n            }\n            // If the contract was just deployed, wait until it is mined\n            if (contract.deployTransaction != null) {\n                yield contract._deployed(blockTag);\n            }\n            // Call a node and get the result\n            const tx = yield populateTransaction(contract, fragment, args);\n            const result = yield signerOrProvider.call(tx, blockTag);\n            try {\n                let value = contract.interface.decodeFunctionResult(fragment, result);\n                if (collapseSimple && fragment.outputs.length === 1) {\n                    value = value[0];\n                }\n                return value;\n            }\n            catch (error) {\n                if (error.code === Logger.errors.CALL_EXCEPTION) {\n                    error.address = contract.address;\n                    error.args = args;\n                    error.transaction = tx;\n                }\n                throw error;\n            }\n        });\n    };\n}\nfunction buildSend(contract, fragment) {\n    return function (...args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!contract.signer) {\n                logger.throwError(\"sending a transaction requires a signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"sendTransaction\"\n                });\n            }\n            // If the contract was just deployed, wait until it is mined\n            if (contract.deployTransaction != null) {\n                yield contract._deployed();\n            }\n            const txRequest = yield populateTransaction(contract, fragment, args);\n            const tx = yield contract.signer.sendTransaction(txRequest);\n            // Tweak the tx.wait so the receipt has extra properties\n            addContractWait(contract, tx);\n            return tx;\n        });\n    };\n}\nfunction buildDefault(contract, fragment, collapseSimple) {\n    if (fragment.constant) {\n        return buildCall(contract, fragment, collapseSimple);\n    }\n    return buildSend(contract, fragment);\n}\nfunction getEventTag(filter) {\n    if (filter.address && (filter.topics == null || filter.topics.length === 0)) {\n        return \"*\";\n    }\n    return (filter.address || \"*\") + \"@\" + (filter.topics ? filter.topics.map((topic) => {\n        if (Array.isArray(topic)) {\n            return topic.join(\"|\");\n        }\n        return topic;\n    }).join(\":\") : \"\");\n}\nclass RunningEvent {\n    constructor(tag, filter) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"filter\", filter);\n        this._listeners = [];\n    }\n    addListener(listener, once) {\n        this._listeners.push({ listener: listener, once: once });\n    }\n    removeListener(listener) {\n        let done = false;\n        this._listeners = this._listeners.filter((item) => {\n            if (done || item.listener !== listener) {\n                return true;\n            }\n            done = true;\n            return false;\n        });\n    }\n    removeAllListeners() {\n        this._listeners = [];\n    }\n    listeners() {\n        return this._listeners.map((i) => i.listener);\n    }\n    listenerCount() {\n        return this._listeners.length;\n    }\n    run(args) {\n        const listenerCount = this.listenerCount();\n        this._listeners = this._listeners.filter((item) => {\n            const argsCopy = args.slice();\n            // Call the callback in the next event loop\n            setTimeout(() => {\n                item.listener.apply(this, argsCopy);\n            }, 0);\n            // Reschedule it if it not \"once\"\n            return !(item.once);\n        });\n        return listenerCount;\n    }\n    prepareEvent(event) {\n    }\n    // Returns the array that will be applied to an emit\n    getEmit(event) {\n        return [event];\n    }\n}\nclass ErrorRunningEvent extends RunningEvent {\n    constructor() {\n        super(\"error\", null);\n    }\n}\n// @TODO Fragment should inherit Wildcard? and just override getEmit?\n//       or have a common abstract super class, with enough constructor\n//       options to configure both.\n// A Fragment Event will populate all the properties that Wildcard\n// will, and additionally dereference the arguments when emitting\nclass FragmentRunningEvent extends RunningEvent {\n    constructor(address, contractInterface, fragment, topics) {\n        const filter = {\n            address: address\n        };\n        let topic = contractInterface.getEventTopic(fragment);\n        if (topics) {\n            if (topic !== topics[0]) {\n                logger.throwArgumentError(\"topic mismatch\", \"topics\", topics);\n            }\n            filter.topics = topics.slice();\n        }\n        else {\n            filter.topics = [topic];\n        }\n        super(getEventTag(filter), filter);\n        defineReadOnly(this, \"address\", address);\n        defineReadOnly(this, \"interface\", contractInterface);\n        defineReadOnly(this, \"fragment\", fragment);\n    }\n    prepareEvent(event) {\n        super.prepareEvent(event);\n        event.event = this.fragment.name;\n        event.eventSignature = this.fragment.format();\n        event.decode = (data, topics) => {\n            return this.interface.decodeEventLog(this.fragment, data, topics);\n        };\n        try {\n            event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);\n        }\n        catch (error) {\n            event.args = null;\n            event.decodeError = error;\n        }\n    }\n    getEmit(event) {\n        const errors = checkResultErrors(event.args);\n        if (errors.length) {\n            throw errors[0].error;\n        }\n        const args = (event.args || []).slice();\n        args.push(event);\n        return args;\n    }\n}\n// A Wildcard Event will attempt to populate:\n//  - event            The name of the event name\n//  - eventSignature   The full signature of the event\n//  - decode           A function to decode data and topics\n//  - args             The decoded data and topics\nclass WildcardRunningEvent extends RunningEvent {\n    constructor(address, contractInterface) {\n        super(\"*\", { address: address });\n        defineReadOnly(this, \"address\", address);\n        defineReadOnly(this, \"interface\", contractInterface);\n    }\n    prepareEvent(event) {\n        super.prepareEvent(event);\n        try {\n            const parsed = this.interface.parseLog(event);\n            event.event = parsed.name;\n            event.eventSignature = parsed.signature;\n            event.decode = (data, topics) => {\n                return this.interface.decodeEventLog(parsed.eventFragment, data, topics);\n            };\n            event.args = parsed.args;\n        }\n        catch (error) {\n            // No matching event\n        }\n    }\n}\nexport class BaseContract {\n    constructor(addressOrName, contractInterface, signerOrProvider) {\n        // @TODO: Maybe still check the addressOrName looks like a valid address or name?\n        //address = getAddress(address);\n        defineReadOnly(this, \"interface\", getStatic(new.target, \"getInterface\")(contractInterface));\n        if (signerOrProvider == null) {\n            defineReadOnly(this, \"provider\", null);\n            defineReadOnly(this, \"signer\", null);\n        }\n        else if (Signer.isSigner(signerOrProvider)) {\n            defineReadOnly(this, \"provider\", signerOrProvider.provider || null);\n            defineReadOnly(this, \"signer\", signerOrProvider);\n        }\n        else if (Provider.isProvider(signerOrProvider)) {\n            defineReadOnly(this, \"provider\", signerOrProvider);\n            defineReadOnly(this, \"signer\", null);\n        }\n        else {\n            logger.throwArgumentError(\"invalid signer or provider\", \"signerOrProvider\", signerOrProvider);\n        }\n        defineReadOnly(this, \"callStatic\", {});\n        defineReadOnly(this, \"estimateGas\", {});\n        defineReadOnly(this, \"functions\", {});\n        defineReadOnly(this, \"populateTransaction\", {});\n        defineReadOnly(this, \"filters\", {});\n        {\n            const uniqueFilters = {};\n            Object.keys(this.interface.events).forEach((eventSignature) => {\n                const event = this.interface.events[eventSignature];\n                defineReadOnly(this.filters, eventSignature, (...args) => {\n                    return {\n                        address: this.address,\n                        topics: this.interface.encodeFilterTopics(event, args)\n                    };\n                });\n                if (!uniqueFilters[event.name]) {\n                    uniqueFilters[event.name] = [];\n                }\n                uniqueFilters[event.name].push(eventSignature);\n            });\n            Object.keys(uniqueFilters).forEach((name) => {\n                const filters = uniqueFilters[name];\n                if (filters.length === 1) {\n                    defineReadOnly(this.filters, name, this.filters[filters[0]]);\n                }\n                else {\n                    logger.warn(`Duplicate definition of ${name} (${filters.join(\", \")})`);\n                }\n            });\n        }\n        defineReadOnly(this, \"_runningEvents\", {});\n        defineReadOnly(this, \"_wrappedEmits\", {});\n        if (addressOrName == null) {\n            logger.throwArgumentError(\"invalid contract address or ENS name\", \"addressOrName\", addressOrName);\n        }\n        defineReadOnly(this, \"address\", addressOrName);\n        if (this.provider) {\n            defineReadOnly(this, \"resolvedAddress\", resolveName(this.provider, addressOrName));\n        }\n        else {\n            try {\n                defineReadOnly(this, \"resolvedAddress\", Promise.resolve(getAddress(addressOrName)));\n            }\n            catch (error) {\n                // Without a provider, we cannot use ENS names\n                logger.throwError(\"provider is required to use ENS name as contract address\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"new Contract\"\n                });\n            }\n        }\n        // Swallow bad ENS names to prevent Unhandled Exceptions\n        this.resolvedAddress.catch((e) => { });\n        const uniqueNames = {};\n        const uniqueSignatures = {};\n        Object.keys(this.interface.functions).forEach((signature) => {\n            const fragment = this.interface.functions[signature];\n            // Check that the signature is unique; if not the ABI generation has\n            // not been cleaned or may be incorrectly generated\n            if (uniqueSignatures[signature]) {\n                logger.warn(`Duplicate ABI entry for ${JSON.stringify(signature)}`);\n                return;\n            }\n            uniqueSignatures[signature] = true;\n            // Track unique names; we only expose bare named functions if they\n            // are ambiguous\n            {\n                const name = fragment.name;\n                if (!uniqueNames[`%${name}`]) {\n                    uniqueNames[`%${name}`] = [];\n                }\n                uniqueNames[`%${name}`].push(signature);\n            }\n            if (this[signature] == null) {\n                defineReadOnly(this, signature, buildDefault(this, fragment, true));\n            }\n            // We do not collapse simple calls on this bucket, which allows\n            // frameworks to safely use this without introspection as well as\n            // allows decoding error recovery.\n            if (this.functions[signature] == null) {\n                defineReadOnly(this.functions, signature, buildDefault(this, fragment, false));\n            }\n            if (this.callStatic[signature] == null) {\n                defineReadOnly(this.callStatic, signature, buildCall(this, fragment, true));\n            }\n            if (this.populateTransaction[signature] == null) {\n                defineReadOnly(this.populateTransaction, signature, buildPopulate(this, fragment));\n            }\n            if (this.estimateGas[signature] == null) {\n                defineReadOnly(this.estimateGas, signature, buildEstimate(this, fragment));\n            }\n        });\n        Object.keys(uniqueNames).forEach((name) => {\n            // Ambiguous names to not get attached as bare names\n            const signatures = uniqueNames[name];\n            if (signatures.length > 1) {\n                return;\n            }\n            // Strip off the leading \"%\" used for prototype protection\n            name = name.substring(1);\n            const signature = signatures[0];\n            // If overwriting a member property that is null, swallow the error\n            try {\n                if (this[name] == null) {\n                    defineReadOnly(this, name, this[signature]);\n                }\n            }\n            catch (e) { }\n            if (this.functions[name] == null) {\n                defineReadOnly(this.functions, name, this.functions[signature]);\n            }\n            if (this.callStatic[name] == null) {\n                defineReadOnly(this.callStatic, name, this.callStatic[signature]);\n            }\n            if (this.populateTransaction[name] == null) {\n                defineReadOnly(this.populateTransaction, name, this.populateTransaction[signature]);\n            }\n            if (this.estimateGas[name] == null) {\n                defineReadOnly(this.estimateGas, name, this.estimateGas[signature]);\n            }\n        });\n    }\n    static getContractAddress(transaction) {\n        return getContractAddress(transaction);\n    }\n    static getInterface(contractInterface) {\n        if (Interface.isInterface(contractInterface)) {\n            return contractInterface;\n        }\n        return new Interface(contractInterface);\n    }\n    // @TODO: Allow timeout?\n    deployed() {\n        return this._deployed();\n    }\n    _deployed(blockTag) {\n        if (!this._deployedPromise) {\n            // If we were just deployed, we know the transaction we should occur in\n            if (this.deployTransaction) {\n                this._deployedPromise = this.deployTransaction.wait().then(() => {\n                    return this;\n                });\n            }\n            else {\n                // @TODO: Once we allow a timeout to be passed in, we will wait\n                // up to that many blocks for getCode\n                // Otherwise, poll for our code to be deployed\n                this._deployedPromise = this.provider.getCode(this.address, blockTag).then((code) => {\n                    if (code === \"0x\") {\n                        logger.throwError(\"contract not deployed\", Logger.errors.UNSUPPORTED_OPERATION, {\n                            contractAddress: this.address,\n                            operation: \"getDeployed\"\n                        });\n                    }\n                    return this;\n                });\n            }\n        }\n        return this._deployedPromise;\n    }\n    // @TODO:\n    // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>\n    // @TODO:\n    // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>\n    fallback(overrides) {\n        if (!this.signer) {\n            logger.throwError(\"sending a transactions require a signer\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"sendTransaction(fallback)\" });\n        }\n        const tx = shallowCopy(overrides || {});\n        [\"from\", \"to\"].forEach(function (key) {\n            if (tx[key] == null) {\n                return;\n            }\n            logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, { operation: key });\n        });\n        tx.to = this.resolvedAddress;\n        return this.deployed().then(() => {\n            return this.signer.sendTransaction(tx);\n        });\n    }\n    // Reconnect to a different signer or provider\n    connect(signerOrProvider) {\n        if (typeof (signerOrProvider) === \"string\") {\n            signerOrProvider = new VoidSigner(signerOrProvider, this.provider);\n        }\n        const contract = new (this.constructor)(this.address, this.interface, signerOrProvider);\n        if (this.deployTransaction) {\n            defineReadOnly(contract, \"deployTransaction\", this.deployTransaction);\n        }\n        return contract;\n    }\n    // Re-attach to a different on-chain instance of this contract\n    attach(addressOrName) {\n        return new (this.constructor)(addressOrName, this.interface, this.signer || this.provider);\n    }\n    static isIndexed(value) {\n        return Indexed.isIndexed(value);\n    }\n    _normalizeRunningEvent(runningEvent) {\n        // Already have an instance of this event running; we can re-use it\n        if (this._runningEvents[runningEvent.tag]) {\n            return this._runningEvents[runningEvent.tag];\n        }\n        return runningEvent;\n    }\n    _getRunningEvent(eventName) {\n        if (typeof (eventName) === \"string\") {\n            // Listen for \"error\" events (if your contract has an error event, include\n            // the full signature to bypass this special event keyword)\n            if (eventName === \"error\") {\n                return this._normalizeRunningEvent(new ErrorRunningEvent());\n            }\n            // Listen for any event that is registered\n            if (eventName === \"event\") {\n                return this._normalizeRunningEvent(new RunningEvent(\"event\", null));\n            }\n            // Listen for any event\n            if (eventName === \"*\") {\n                return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n            }\n            // Get the event Fragment (throws if ambiguous/unknown event)\n            const fragment = this.interface.getEvent(eventName);\n            return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));\n        }\n        // We have topics to filter by...\n        if (eventName.topics && eventName.topics.length > 0) {\n            // Is it a known topichash? (throws if no matching topichash)\n            try {\n                const topic = eventName.topics[0];\n                if (typeof (topic) !== \"string\") {\n                    throw new Error(\"invalid topic\"); // @TODO: May happen for anonymous events\n                }\n                const fragment = this.interface.getEvent(topic);\n                return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));\n            }\n            catch (error) { }\n            // Filter by the unknown topichash\n            const filter = {\n                address: this.address,\n                topics: eventName.topics\n            };\n            return this._normalizeRunningEvent(new RunningEvent(getEventTag(filter), filter));\n        }\n        return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n    }\n    _checkRunningEvents(runningEvent) {\n        if (runningEvent.listenerCount() === 0) {\n            delete this._runningEvents[runningEvent.tag];\n            // If we have a poller for this, remove it\n            const emit = this._wrappedEmits[runningEvent.tag];\n            if (emit && runningEvent.filter) {\n                this.provider.off(runningEvent.filter, emit);\n                delete this._wrappedEmits[runningEvent.tag];\n            }\n        }\n    }\n    // Subclasses can override this to gracefully recover\n    // from parse errors if they wish\n    _wrapEvent(runningEvent, log, listener) {\n        const event = deepCopy(log);\n        event.removeListener = () => {\n            if (!listener) {\n                return;\n            }\n            runningEvent.removeListener(listener);\n            this._checkRunningEvents(runningEvent);\n        };\n        event.getBlock = () => { return this.provider.getBlock(log.blockHash); };\n        event.getTransaction = () => { return this.provider.getTransaction(log.transactionHash); };\n        event.getTransactionReceipt = () => { return this.provider.getTransactionReceipt(log.transactionHash); };\n        // This may throw if the topics and data mismatch the signature\n        runningEvent.prepareEvent(event);\n        return event;\n    }\n    _addEventListener(runningEvent, listener, once) {\n        if (!this.provider) {\n            logger.throwError(\"events require a provider or a signer with a provider\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"once\" });\n        }\n        runningEvent.addListener(listener, once);\n        // Track this running event and its listeners (may already be there; but no hard in updating)\n        this._runningEvents[runningEvent.tag] = runningEvent;\n        // If we are not polling the provider, start polling\n        if (!this._wrappedEmits[runningEvent.tag]) {\n            const wrappedEmit = (log) => {\n                let event = this._wrapEvent(runningEvent, log, listener);\n                // Try to emit the result for the parameterized event...\n                if (event.decodeError == null) {\n                    try {\n                        const args = runningEvent.getEmit(event);\n                        this.emit(runningEvent.filter, ...args);\n                    }\n                    catch (error) {\n                        event.decodeError = error.error;\n                    }\n                }\n                // Always emit \"event\" for fragment-base events\n                if (runningEvent.filter != null) {\n                    this.emit(\"event\", event);\n                }\n                // Emit \"error\" if there was an error\n                if (event.decodeError != null) {\n                    this.emit(\"error\", event.decodeError, event);\n                }\n            };\n            this._wrappedEmits[runningEvent.tag] = wrappedEmit;\n            // Special events, like \"error\" do not have a filter\n            if (runningEvent.filter != null) {\n                this.provider.on(runningEvent.filter, wrappedEmit);\n            }\n        }\n    }\n    queryFilter(event, fromBlockOrBlockhash, toBlock) {\n        const runningEvent = this._getRunningEvent(event);\n        const filter = shallowCopy(runningEvent.filter);\n        if (typeof (fromBlockOrBlockhash) === \"string\" && isHexString(fromBlockOrBlockhash, 32)) {\n            if (toBlock != null) {\n                logger.throwArgumentError(\"cannot specify toBlock with blockhash\", \"toBlock\", toBlock);\n            }\n            filter.blockHash = fromBlockOrBlockhash;\n        }\n        else {\n            filter.fromBlock = ((fromBlockOrBlockhash != null) ? fromBlockOrBlockhash : 0);\n            filter.toBlock = ((toBlock != null) ? toBlock : \"latest\");\n        }\n        return this.provider.getLogs(filter).then((logs) => {\n            return logs.map((log) => this._wrapEvent(runningEvent, log, null));\n        });\n    }\n    on(event, listener) {\n        this._addEventListener(this._getRunningEvent(event), listener, false);\n        return this;\n    }\n    once(event, listener) {\n        this._addEventListener(this._getRunningEvent(event), listener, true);\n        return this;\n    }\n    emit(eventName, ...args) {\n        if (!this.provider) {\n            return false;\n        }\n        const runningEvent = this._getRunningEvent(eventName);\n        const result = (runningEvent.run(args) > 0);\n        // May have drained all the \"once\" events; check for living events\n        this._checkRunningEvents(runningEvent);\n        return result;\n    }\n    listenerCount(eventName) {\n        if (!this.provider) {\n            return 0;\n        }\n        if (eventName == null) {\n            return Object.keys(this._runningEvents).reduce((accum, key) => {\n                return accum + this._runningEvents[key].listenerCount();\n            }, 0);\n        }\n        return this._getRunningEvent(eventName).listenerCount();\n    }\n    listeners(eventName) {\n        if (!this.provider) {\n            return [];\n        }\n        if (eventName == null) {\n            const result = [];\n            for (let tag in this._runningEvents) {\n                this._runningEvents[tag].listeners().forEach((listener) => {\n                    result.push(listener);\n                });\n            }\n            return result;\n        }\n        return this._getRunningEvent(eventName).listeners();\n    }\n    removeAllListeners(eventName) {\n        if (!this.provider) {\n            return this;\n        }\n        if (eventName == null) {\n            for (const tag in this._runningEvents) {\n                const runningEvent = this._runningEvents[tag];\n                runningEvent.removeAllListeners();\n                this._checkRunningEvents(runningEvent);\n            }\n            return this;\n        }\n        // Delete any listeners\n        const runningEvent = this._getRunningEvent(eventName);\n        runningEvent.removeAllListeners();\n        this._checkRunningEvents(runningEvent);\n        return this;\n    }\n    off(eventName, listener) {\n        if (!this.provider) {\n            return this;\n        }\n        const runningEvent = this._getRunningEvent(eventName);\n        runningEvent.removeListener(listener);\n        this._checkRunningEvents(runningEvent);\n        return this;\n    }\n    removeListener(eventName, listener) {\n        return this.off(eventName, listener);\n    }\n}\nexport class Contract extends BaseContract {\n}\nexport class ContractFactory {\n    constructor(contractInterface, bytecode, signer) {\n        let bytecodeHex = null;\n        if (typeof (bytecode) === \"string\") {\n            bytecodeHex = bytecode;\n        }\n        else if (isBytes(bytecode)) {\n            bytecodeHex = hexlify(bytecode);\n        }\n        else if (bytecode && typeof (bytecode.object) === \"string\") {\n            // Allow the bytecode object from the Solidity compiler\n            bytecodeHex = bytecode.object;\n        }\n        else {\n            // Crash in the next verification step\n            bytecodeHex = \"!\";\n        }\n        // Make sure it is 0x prefixed\n        if (bytecodeHex.substring(0, 2) !== \"0x\") {\n            bytecodeHex = \"0x\" + bytecodeHex;\n        }\n        // Make sure the final result is valid bytecode\n        if (!isHexString(bytecodeHex) || (bytecodeHex.length % 2)) {\n            logger.throwArgumentError(\"invalid bytecode\", \"bytecode\", bytecode);\n        }\n        // If we have a signer, make sure it is valid\n        if (signer && !Signer.isSigner(signer)) {\n            logger.throwArgumentError(\"invalid signer\", \"signer\", signer);\n        }\n        defineReadOnly(this, \"bytecode\", bytecodeHex);\n        defineReadOnly(this, \"interface\", getStatic(new.target, \"getInterface\")(contractInterface));\n        defineReadOnly(this, \"signer\", signer || null);\n    }\n    // @TODO: Future; rename to populateTransaction?\n    getDeployTransaction(...args) {\n        let tx = {};\n        // If we have 1 additional argument, we allow transaction overrides\n        if (args.length === this.interface.deploy.inputs.length + 1 && typeof (args[args.length - 1]) === \"object\") {\n            tx = shallowCopy(args.pop());\n            for (const key in tx) {\n                if (!allowedTransactionKeys[key]) {\n                    throw new Error(\"unknown transaction override \" + key);\n                }\n            }\n        }\n        // Do not allow these to be overridden in a deployment transaction\n        [\"data\", \"from\", \"to\"].forEach((key) => {\n            if (tx[key] == null) {\n                return;\n            }\n            logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, { operation: key });\n        });\n        if (tx.value) {\n            const value = BigNumber.from(tx.value);\n            if (!value.isZero() && !this.interface.deploy.payable) {\n                logger.throwError(\"non-payable constructor cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"overrides.value\",\n                    value: tx.value\n                });\n            }\n        }\n        // Make sure the call matches the constructor signature\n        logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n        // Set the data to the bytecode + the encoded constructor arguments\n        tx.data = hexlify(concat([\n            this.bytecode,\n            this.interface.encodeDeploy(args)\n        ]));\n        return tx;\n    }\n    deploy(...args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let overrides = {};\n            // If 1 extra parameter was passed in, it contains overrides\n            if (args.length === this.interface.deploy.inputs.length + 1) {\n                overrides = args.pop();\n            }\n            // Make sure the call matches the constructor signature\n            logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n            // Resolve ENS names and promises in the arguments\n            const params = yield resolveAddresses(this.signer, args, this.interface.deploy.inputs);\n            params.push(overrides);\n            // Get the deployment transaction (with optional overrides)\n            const unsignedTx = this.getDeployTransaction(...params);\n            // Send the deployment transaction\n            const tx = yield this.signer.sendTransaction(unsignedTx);\n            const address = getStatic(this.constructor, \"getContractAddress\")(tx);\n            const contract = getStatic(this.constructor, \"getContract\")(address, this.interface, this.signer);\n            // Add the modified wait that wraps events\n            addContractWait(contract, tx);\n            defineReadOnly(contract, \"deployTransaction\", tx);\n            return contract;\n        });\n    }\n    attach(address) {\n        return (this.constructor).getContract(address, this.interface, this.signer);\n    }\n    connect(signer) {\n        return new (this.constructor)(this.interface, this.bytecode, signer);\n    }\n    static fromSolidity(compilerOutput, signer) {\n        if (compilerOutput == null) {\n            logger.throwError(\"missing compiler output\", Logger.errors.MISSING_ARGUMENT, { argument: \"compilerOutput\" });\n        }\n        if (typeof (compilerOutput) === \"string\") {\n            compilerOutput = JSON.parse(compilerOutput);\n        }\n        const abi = compilerOutput.abi;\n        let bytecode = null;\n        if (compilerOutput.bytecode) {\n            bytecode = compilerOutput.bytecode;\n        }\n        else if (compilerOutput.evm && compilerOutput.evm.bytecode) {\n            bytecode = compilerOutput.evm.bytecode;\n        }\n        return new this(abi, bytecode, signer);\n    }\n    static getInterface(contractInterface) {\n        return Contract.getInterface(contractInterface);\n    }\n    static getContractAddress(tx) {\n        return getContractAddress(tx);\n    }\n    static getContract(address, contractInterface, signer) {\n        return new Contract(address, contractInterface, signer);\n    }\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}