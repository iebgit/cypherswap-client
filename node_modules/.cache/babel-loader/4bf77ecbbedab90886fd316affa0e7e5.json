{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { checkProperties, deepCopy, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { BaseProvider } from \"./base-provider\";\nconst errorGas = [\"call\", \"estimateGas\"];\nfunction spelunk(value, requireData) {\n  if (value == null) {\n    return null;\n  }\n  // These *are* the droids we're looking for.\n  if (typeof value.message === \"string\" && value.message.match(\"reverted\")) {\n    const data = isHexString(value.data) ? value.data : null;\n    if (!requireData || data) {\n      return {\n        message: value.message,\n        data\n      };\n    }\n  }\n  // Spelunk further...\n  if (typeof value === \"object\") {\n    for (const key in value) {\n      const result = spelunk(value[key], requireData);\n      if (result) {\n        return result;\n      }\n    }\n    return null;\n  }\n  // Might be a JSON string we can further descend...\n  if (typeof value === \"string\") {\n    try {\n      return spelunk(JSON.parse(value), requireData);\n    } catch (error) {}\n  }\n  return null;\n}\nfunction checkError(method, error, params) {\n  const transaction = params.transaction || params.signedTransaction;\n  // Undo the \"convenience\" some nodes are attempting to prevent backwards\n  // incompatibility; maybe for v6 consider forwarding reverts as errors\n  if (method === \"call\") {\n    const result = spelunk(error, true);\n    if (result) {\n      return result.data;\n    }\n    // Nothing descriptive..\n    logger.throwError(\"missing revert data in call exception; Transaction reverted without a reason string\", Logger.errors.CALL_EXCEPTION, {\n      data: \"0x\",\n      transaction,\n      error\n    });\n  }\n  if (method === \"estimateGas\") {\n    // Try to find something, with a preference on SERVER_ERROR body\n    let result = spelunk(error.body, false);\n    if (result == null) {\n      result = spelunk(error, false);\n    }\n    // Found \"reverted\", this is a CALL_EXCEPTION\n    if (result) {\n      logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n        reason: result.message,\n        method,\n        transaction,\n        error\n      });\n    }\n  }\n  // @TODO: Should we spelunk for message too?\n  let message = error.message;\n  if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof error.error.message === \"string\") {\n    message = error.error.message;\n  } else if (typeof error.body === \"string\") {\n    message = error.body;\n  } else if (typeof error.responseText === \"string\") {\n    message = error.responseText;\n  }\n  message = (message || \"\").toLowerCase();\n  // \"insufficient funds for gas * price + value + cost(data)\"\n  if (message.match(/insufficient funds|base fee exceeds gas limit|InsufficientFunds/i)) {\n    logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n      error,\n      method,\n      transaction\n    });\n  }\n  // \"nonce too low\"\n  if (message.match(/nonce (is )?too low/i)) {\n    logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n      error,\n      method,\n      transaction\n    });\n  }\n  // \"replacement transaction underpriced\"\n  if (message.match(/replacement transaction underpriced|transaction gas price.*too low/i)) {\n    logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n      error,\n      method,\n      transaction\n    });\n  }\n  // \"replacement transaction underpriced\"\n  if (message.match(/only replay-protected/i)) {\n    logger.throwError(\"legacy pre-eip-155 transactions not supported\", Logger.errors.UNSUPPORTED_OPERATION, {\n      error,\n      method,\n      transaction\n    });\n  }\n  if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted|revert/)) {\n    logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n      error,\n      method,\n      transaction\n    });\n  }\n  throw error;\n}\nfunction timer(timeout) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, timeout);\n  });\n}\nfunction getResult(payload) {\n  if (payload.error) {\n    // @TODO: not any\n    const error = new Error(payload.error.message);\n    error.code = payload.error.code;\n    error.data = payload.error.data;\n    throw error;\n  }\n  return payload.result;\n}\nfunction getLowerCase(value) {\n  if (value) {\n    return value.toLowerCase();\n  }\n  return value;\n}\nconst _constructorGuard = {};\nexport class JsonRpcSigner extends Signer {\n  constructor(constructorGuard, provider, addressOrIndex) {\n    super();\n    if (constructorGuard !== _constructorGuard) {\n      throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");\n    }\n    defineReadOnly(this, \"provider\", provider);\n    if (addressOrIndex == null) {\n      addressOrIndex = 0;\n    }\n    if (typeof addressOrIndex === \"string\") {\n      defineReadOnly(this, \"_address\", this.provider.formatter.address(addressOrIndex));\n      defineReadOnly(this, \"_index\", null);\n    } else if (typeof addressOrIndex === \"number\") {\n      defineReadOnly(this, \"_index\", addressOrIndex);\n      defineReadOnly(this, \"_address\", null);\n    } else {\n      logger.throwArgumentError(\"invalid address or index\", \"addressOrIndex\", addressOrIndex);\n    }\n  }\n  connect(provider) {\n    return logger.throwError(\"cannot alter JSON-RPC Signer connection\", Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"connect\"\n    });\n  }\n  connectUnchecked() {\n    return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);\n  }\n  getAddress() {\n    if (this._address) {\n      return Promise.resolve(this._address);\n    }\n    return this.provider.send(\"eth_accounts\", []).then(accounts => {\n      if (accounts.length <= this._index) {\n        logger.throwError(\"unknown account #\" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"getAddress\"\n        });\n      }\n      return this.provider.formatter.address(accounts[this._index]);\n    });\n  }\n  sendUncheckedTransaction(transaction) {\n    transaction = shallowCopy(transaction);\n    const fromAddress = this.getAddress().then(address => {\n      if (address) {\n        address = address.toLowerCase();\n      }\n      return address;\n    });\n    // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n    // wishes to use this, it is easy to specify explicitly, otherwise\n    // we look it up for them.\n    if (transaction.gasLimit == null) {\n      const estimate = shallowCopy(transaction);\n      estimate.from = fromAddress;\n      transaction.gasLimit = this.provider.estimateGas(estimate);\n    }\n    if (transaction.to != null) {\n      transaction.to = Promise.resolve(transaction.to).then(to => __awaiter(this, void 0, void 0, function* () {\n        if (to == null) {\n          return null;\n        }\n        const address = yield this.provider.resolveName(to);\n        if (address == null) {\n          logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n        }\n        return address;\n      }));\n    }\n    return resolveProperties({\n      tx: resolveProperties(transaction),\n      sender: fromAddress\n    }).then(_ref => {\n      let {\n        tx,\n        sender\n      } = _ref;\n      if (tx.from != null) {\n        if (tx.from.toLowerCase() !== sender) {\n          logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n        }\n      } else {\n        tx.from = sender;\n      }\n      const hexTx = this.provider.constructor.hexlifyTransaction(tx, {\n        from: true\n      });\n      return this.provider.send(\"eth_sendTransaction\", [hexTx]).then(hash => {\n        return hash;\n      }, error => {\n        if (typeof error.message === \"string\" && error.message.match(/user denied/i)) {\n          logger.throwError(\"user rejected transaction\", Logger.errors.ACTION_REJECTED, {\n            action: \"sendTransaction\",\n            transaction: tx\n          });\n        }\n        return checkError(\"sendTransaction\", error, hexTx);\n      });\n    });\n  }\n  signTransaction(transaction) {\n    return logger.throwError(\"signing transactions is unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"signTransaction\"\n    });\n  }\n  sendTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // This cannot be mined any earlier than any recent block\n      const blockNumber = yield this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);\n      // Send the transaction\n      const hash = yield this.sendUncheckedTransaction(transaction);\n      try {\n        // Unfortunately, JSON-RPC only provides and opaque transaction hash\n        // for a response, and we need the actual transaction, so we poll\n        // for it; it should show up very quickly\n        return yield poll(() => __awaiter(this, void 0, void 0, function* () {\n          const tx = yield this.provider.getTransaction(hash);\n          if (tx === null) {\n            return undefined;\n          }\n          return this.provider._wrapTransaction(tx, hash, blockNumber);\n        }), {\n          oncePoll: this.provider\n        });\n      } catch (error) {\n        error.transactionHash = hash;\n        throw error;\n      }\n    });\n  }\n  signMessage(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const data = typeof message === \"string\" ? toUtf8Bytes(message) : message;\n      const address = yield this.getAddress();\n      try {\n        return yield this.provider.send(\"personal_sign\", [hexlify(data), address.toLowerCase()]);\n      } catch (error) {\n        if (typeof error.message === \"string\" && error.message.match(/user denied/i)) {\n          logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n            action: \"signMessage\",\n            from: address,\n            messageData: message\n          });\n        }\n        throw error;\n      }\n    });\n  }\n  _legacySignMessage(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const data = typeof message === \"string\" ? toUtf8Bytes(message) : message;\n      const address = yield this.getAddress();\n      try {\n        // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n        return yield this.provider.send(\"eth_sign\", [address.toLowerCase(), hexlify(data)]);\n      } catch (error) {\n        if (typeof error.message === \"string\" && error.message.match(/user denied/i)) {\n          logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n            action: \"_legacySignMessage\",\n            from: address,\n            messageData: message\n          });\n        }\n        throw error;\n      }\n    });\n  }\n  _signTypedData(domain, types, value) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Populate any ENS names (in-place)\n      const populated = yield _TypedDataEncoder.resolveNames(domain, types, value, name => {\n        return this.provider.resolveName(name);\n      });\n      const address = yield this.getAddress();\n      try {\n        return yield this.provider.send(\"eth_signTypedData_v4\", [address.toLowerCase(), JSON.stringify(_TypedDataEncoder.getPayload(populated.domain, types, populated.value))]);\n      } catch (error) {\n        if (typeof error.message === \"string\" && error.message.match(/user denied/i)) {\n          logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n            action: \"_signTypedData\",\n            from: address,\n            messageData: {\n              domain: populated.domain,\n              types,\n              value: populated.value\n            }\n          });\n        }\n        throw error;\n      }\n    });\n  }\n  unlock(password) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const provider = this.provider;\n      const address = yield this.getAddress();\n      return provider.send(\"personal_unlockAccount\", [address.toLowerCase(), password, null]);\n    });\n  }\n}\nclass UncheckedJsonRpcSigner extends JsonRpcSigner {\n  sendTransaction(transaction) {\n    return this.sendUncheckedTransaction(transaction).then(hash => {\n      return {\n        hash: hash,\n        nonce: null,\n        gasLimit: null,\n        gasPrice: null,\n        data: null,\n        value: null,\n        chainId: null,\n        confirmations: 0,\n        from: null,\n        wait: confirmations => {\n          return this.provider.waitForTransaction(hash, confirmations);\n        }\n      };\n    });\n  }\n}\nconst allowedTransactionKeys = {\n  chainId: true,\n  data: true,\n  gasLimit: true,\n  gasPrice: true,\n  nonce: true,\n  to: true,\n  value: true,\n  type: true,\n  accessList: true,\n  maxFeePerGas: true,\n  maxPriorityFeePerGas: true\n};\nexport class JsonRpcProvider extends BaseProvider {\n  constructor(url, network) {\n    let networkOrReady = network;\n    // The network is unknown, query the JSON-RPC for it\n    if (networkOrReady == null) {\n      networkOrReady = new Promise((resolve, reject) => {\n        setTimeout(() => {\n          this.detectNetwork().then(network => {\n            resolve(network);\n          }, error => {\n            reject(error);\n          });\n        }, 0);\n      });\n    }\n    super(networkOrReady);\n    // Default URL\n    if (!url) {\n      url = getStatic(this.constructor, \"defaultUrl\")();\n    }\n    if (typeof url === \"string\") {\n      defineReadOnly(this, \"connection\", Object.freeze({\n        url: url\n      }));\n    } else {\n      defineReadOnly(this, \"connection\", Object.freeze(shallowCopy(url)));\n    }\n    this._nextId = 42;\n  }\n  get _cache() {\n    if (this._eventLoopCache == null) {\n      this._eventLoopCache = {};\n    }\n    return this._eventLoopCache;\n  }\n  static defaultUrl() {\n    return \"http:/\\/localhost:8545\";\n  }\n  detectNetwork() {\n    if (!this._cache[\"detectNetwork\"]) {\n      this._cache[\"detectNetwork\"] = this._uncachedDetectNetwork();\n      // Clear this cache at the beginning of the next event loop\n      setTimeout(() => {\n        this._cache[\"detectNetwork\"] = null;\n      }, 0);\n    }\n    return this._cache[\"detectNetwork\"];\n  }\n  _uncachedDetectNetwork() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield timer(0);\n      let chainId = null;\n      try {\n        chainId = yield this.send(\"eth_chainId\", []);\n      } catch (error) {\n        try {\n          chainId = yield this.send(\"net_version\", []);\n        } catch (error) {}\n      }\n      if (chainId != null) {\n        const getNetwork = getStatic(this.constructor, \"getNetwork\");\n        try {\n          return getNetwork(BigNumber.from(chainId).toNumber());\n        } catch (error) {\n          return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n            chainId: chainId,\n            event: \"invalidNetwork\",\n            serverError: error\n          });\n        }\n      }\n      return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n        event: \"noNetwork\"\n      });\n    });\n  }\n  getSigner(addressOrIndex) {\n    return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);\n  }\n  getUncheckedSigner(addressOrIndex) {\n    return this.getSigner(addressOrIndex).connectUnchecked();\n  }\n  listAccounts() {\n    return this.send(\"eth_accounts\", []).then(accounts => {\n      return accounts.map(a => this.formatter.address(a));\n    });\n  }\n  send(method, params) {\n    const request = {\n      method: method,\n      params: params,\n      id: this._nextId++,\n      jsonrpc: \"2.0\"\n    };\n    this.emit(\"debug\", {\n      action: \"request\",\n      request: deepCopy(request),\n      provider: this\n    });\n    // We can expand this in the future to any call, but for now these\n    // are the biggest wins and do not require any serializing parameters.\n    const cache = [\"eth_chainId\", \"eth_blockNumber\"].indexOf(method) >= 0;\n    if (cache && this._cache[method]) {\n      return this._cache[method];\n    }\n    const result = fetchJson(this.connection, JSON.stringify(request), getResult).then(result => {\n      this.emit(\"debug\", {\n        action: \"response\",\n        request: request,\n        response: result,\n        provider: this\n      });\n      return result;\n    }, error => {\n      this.emit(\"debug\", {\n        action: \"response\",\n        error: error,\n        request: request,\n        provider: this\n      });\n      throw error;\n    });\n    // Cache the fetch, but clear it on the next event loop\n    if (cache) {\n      this._cache[method] = result;\n      setTimeout(() => {\n        this._cache[method] = null;\n      }, 0);\n    }\n    return result;\n  }\n  prepareRequest(method, params) {\n    switch (method) {\n      case \"getBlockNumber\":\n        return [\"eth_blockNumber\", []];\n      case \"getGasPrice\":\n        return [\"eth_gasPrice\", []];\n      case \"getBalance\":\n        return [\"eth_getBalance\", [getLowerCase(params.address), params.blockTag]];\n      case \"getTransactionCount\":\n        return [\"eth_getTransactionCount\", [getLowerCase(params.address), params.blockTag]];\n      case \"getCode\":\n        return [\"eth_getCode\", [getLowerCase(params.address), params.blockTag]];\n      case \"getStorageAt\":\n        return [\"eth_getStorageAt\", [getLowerCase(params.address), hexZeroPad(params.position, 32), params.blockTag]];\n      case \"sendTransaction\":\n        return [\"eth_sendRawTransaction\", [params.signedTransaction]];\n      case \"getBlock\":\n        if (params.blockTag) {\n          return [\"eth_getBlockByNumber\", [params.blockTag, !!params.includeTransactions]];\n        } else if (params.blockHash) {\n          return [\"eth_getBlockByHash\", [params.blockHash, !!params.includeTransactions]];\n        }\n        return null;\n      case \"getTransaction\":\n        return [\"eth_getTransactionByHash\", [params.transactionHash]];\n      case \"getTransactionReceipt\":\n        return [\"eth_getTransactionReceipt\", [params.transactionHash]];\n      case \"call\":\n        {\n          const hexlifyTransaction = getStatic(this.constructor, \"hexlifyTransaction\");\n          return [\"eth_call\", [hexlifyTransaction(params.transaction, {\n            from: true\n          }), params.blockTag]];\n        }\n      case \"estimateGas\":\n        {\n          const hexlifyTransaction = getStatic(this.constructor, \"hexlifyTransaction\");\n          return [\"eth_estimateGas\", [hexlifyTransaction(params.transaction, {\n            from: true\n          })]];\n        }\n      case \"getLogs\":\n        if (params.filter && params.filter.address != null) {\n          params.filter.address = getLowerCase(params.filter.address);\n        }\n        return [\"eth_getLogs\", [params.filter]];\n      default:\n        break;\n    }\n    return null;\n  }\n  perform(method, params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Legacy networks do not like the type field being passed along (which\n      // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n      if (method === \"call\" || method === \"estimateGas\") {\n        const tx = params.transaction;\n        if (tx && tx.type != null && BigNumber.from(tx.type).isZero()) {\n          // If there are no EIP-1559 properties, it might be non-EIP-1559\n          if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n            const feeData = yield this.getFeeData();\n            if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n              // Network doesn't know about EIP-1559 (and hence type)\n              params = shallowCopy(params);\n              params.transaction = shallowCopy(tx);\n              delete params.transaction.type;\n            }\n          }\n        }\n      }\n      const args = this.prepareRequest(method, params);\n      if (args == null) {\n        logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, {\n          operation: method\n        });\n      }\n      try {\n        return yield this.send(args[0], args[1]);\n      } catch (error) {\n        return checkError(method, error, params);\n      }\n    });\n  }\n  _startEvent(event) {\n    if (event.tag === \"pending\") {\n      this._startPending();\n    }\n    super._startEvent(event);\n  }\n  _startPending() {\n    if (this._pendingFilter != null) {\n      return;\n    }\n    const self = this;\n    const pendingFilter = this.send(\"eth_newPendingTransactionFilter\", []);\n    this._pendingFilter = pendingFilter;\n    pendingFilter.then(function (filterId) {\n      function poll() {\n        self.send(\"eth_getFilterChanges\", [filterId]).then(function (hashes) {\n          if (self._pendingFilter != pendingFilter) {\n            return null;\n          }\n          let seq = Promise.resolve();\n          hashes.forEach(function (hash) {\n            // @TODO: This should be garbage collected at some point... How? When?\n            self._emitted[\"t:\" + hash.toLowerCase()] = \"pending\";\n            seq = seq.then(function () {\n              return self.getTransaction(hash).then(function (tx) {\n                self.emit(\"pending\", tx);\n                return null;\n              });\n            });\n          });\n          return seq.then(function () {\n            return timer(1000);\n          });\n        }).then(function () {\n          if (self._pendingFilter != pendingFilter) {\n            self.send(\"eth_uninstallFilter\", [filterId]);\n            return;\n          }\n          setTimeout(function () {\n            poll();\n          }, 0);\n          return null;\n        }).catch(error => {});\n      }\n      poll();\n      return filterId;\n    }).catch(error => {});\n  }\n  _stopEvent(event) {\n    if (event.tag === \"pending\" && this.listenerCount(\"pending\") === 0) {\n      this._pendingFilter = null;\n    }\n    super._stopEvent(event);\n  }\n  // Convert an ethers.js transaction into a JSON-RPC transaction\n  //  - gasLimit => gas\n  //  - All values hexlified\n  //  - All numeric values zero-striped\n  //  - All addresses are lowercased\n  // NOTE: This allows a TransactionRequest, but all values should be resolved\n  //       before this is called\n  // @TODO: This will likely be removed in future versions and prepareRequest\n  //        will be the preferred method for this.\n  static hexlifyTransaction(transaction, allowExtra) {\n    // Check only allowed properties are given\n    const allowed = shallowCopy(allowedTransactionKeys);\n    if (allowExtra) {\n      for (const key in allowExtra) {\n        if (allowExtra[key]) {\n          allowed[key] = true;\n        }\n      }\n    }\n    checkProperties(transaction, allowed);\n    const result = {};\n    // JSON-RPC now requires numeric values to be \"quantity\" values\n    [\"chainId\", \"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach(function (key) {\n      if (transaction[key] == null) {\n        return;\n      }\n      const value = hexValue(BigNumber.from(transaction[key]));\n      if (key === \"gasLimit\") {\n        key = \"gas\";\n      }\n      result[key] = value;\n    });\n    [\"from\", \"to\", \"data\"].forEach(function (key) {\n      if (transaction[key] == null) {\n        return;\n      }\n      result[key] = hexlify(transaction[key]);\n    });\n    if (transaction.accessList) {\n      result[\"accessList\"] = accessListify(transaction.accessList);\n    }\n    return result;\n  }\n}","map":{"version":3,"sources":["../src.ts/json-rpc-provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { checkProperties, deepCopy, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { BaseProvider } from \"./base-provider\";\nconst errorGas = [\"call\", \"estimateGas\"];\nfunction spelunk(value, requireData) {\n    if (value == null) {\n        return null;\n    }\n    // These *are* the droids we're looking for.\n    if (typeof (value.message) === \"string\" && value.message.match(\"reverted\")) {\n        const data = isHexString(value.data) ? value.data : null;\n        if (!requireData || data) {\n            return { message: value.message, data };\n        }\n    }\n    // Spelunk further...\n    if (typeof (value) === \"object\") {\n        for (const key in value) {\n            const result = spelunk(value[key], requireData);\n            if (result) {\n                return result;\n            }\n        }\n        return null;\n    }\n    // Might be a JSON string we can further descend...\n    if (typeof (value) === \"string\") {\n        try {\n            return spelunk(JSON.parse(value), requireData);\n        }\n        catch (error) { }\n    }\n    return null;\n}\nfunction checkError(method, error, params) {\n    const transaction = params.transaction || params.signedTransaction;\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\") {\n        const result = spelunk(error, true);\n        if (result) {\n            return result.data;\n        }\n        // Nothing descriptive..\n        logger.throwError(\"missing revert data in call exception; Transaction reverted without a reason string\", Logger.errors.CALL_EXCEPTION, {\n            data: \"0x\", transaction, error\n        });\n    }\n    if (method === \"estimateGas\") {\n        // Try to find something, with a preference on SERVER_ERROR body\n        let result = spelunk(error.body, false);\n        if (result == null) {\n            result = spelunk(error, false);\n        }\n        // Found \"reverted\", this is a CALL_EXCEPTION\n        if (result) {\n            logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n                reason: result.message, method, transaction, error\n            });\n        }\n    }\n    // @TODO: Should we spelunk for message too?\n    let message = error.message;\n    if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof (error.error.message) === \"string\") {\n        message = error.error.message;\n    }\n    else if (typeof (error.body) === \"string\") {\n        message = error.body;\n    }\n    else if (typeof (error.responseText) === \"string\") {\n        message = error.responseText;\n    }\n    message = (message || \"\").toLowerCase();\n    // \"insufficient funds for gas * price + value + cost(data)\"\n    if (message.match(/insufficient funds|base fee exceeds gas limit|InsufficientFunds/i)) {\n        logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n            error, method, transaction\n        });\n    }\n    // \"nonce too low\"\n    if (message.match(/nonce (is )?too low/i)) {\n        logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n            error, method, transaction\n        });\n    }\n    // \"replacement transaction underpriced\"\n    if (message.match(/replacement transaction underpriced|transaction gas price.*too low/i)) {\n        logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n            error, method, transaction\n        });\n    }\n    // \"replacement transaction underpriced\"\n    if (message.match(/only replay-protected/i)) {\n        logger.throwError(\"legacy pre-eip-155 transactions not supported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            error, method, transaction\n        });\n    }\n    if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted|revert/)) {\n        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error, method, transaction\n        });\n    }\n    throw error;\n}\nfunction timer(timeout) {\n    return new Promise(function (resolve) {\n        setTimeout(resolve, timeout);\n    });\n}\nfunction getResult(payload) {\n    if (payload.error) {\n        // @TODO: not any\n        const error = new Error(payload.error.message);\n        error.code = payload.error.code;\n        error.data = payload.error.data;\n        throw error;\n    }\n    return payload.result;\n}\nfunction getLowerCase(value) {\n    if (value) {\n        return value.toLowerCase();\n    }\n    return value;\n}\nconst _constructorGuard = {};\nexport class JsonRpcSigner extends Signer {\n    constructor(constructorGuard, provider, addressOrIndex) {\n        super();\n        if (constructorGuard !== _constructorGuard) {\n            throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");\n        }\n        defineReadOnly(this, \"provider\", provider);\n        if (addressOrIndex == null) {\n            addressOrIndex = 0;\n        }\n        if (typeof (addressOrIndex) === \"string\") {\n            defineReadOnly(this, \"_address\", this.provider.formatter.address(addressOrIndex));\n            defineReadOnly(this, \"_index\", null);\n        }\n        else if (typeof (addressOrIndex) === \"number\") {\n            defineReadOnly(this, \"_index\", addressOrIndex);\n            defineReadOnly(this, \"_address\", null);\n        }\n        else {\n            logger.throwArgumentError(\"invalid address or index\", \"addressOrIndex\", addressOrIndex);\n        }\n    }\n    connect(provider) {\n        return logger.throwError(\"cannot alter JSON-RPC Signer connection\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"connect\"\n        });\n    }\n    connectUnchecked() {\n        return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);\n    }\n    getAddress() {\n        if (this._address) {\n            return Promise.resolve(this._address);\n        }\n        return this.provider.send(\"eth_accounts\", []).then((accounts) => {\n            if (accounts.length <= this._index) {\n                logger.throwError(\"unknown account #\" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"getAddress\"\n                });\n            }\n            return this.provider.formatter.address(accounts[this._index]);\n        });\n    }\n    sendUncheckedTransaction(transaction) {\n        transaction = shallowCopy(transaction);\n        const fromAddress = this.getAddress().then((address) => {\n            if (address) {\n                address = address.toLowerCase();\n            }\n            return address;\n        });\n        // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n        // wishes to use this, it is easy to specify explicitly, otherwise\n        // we look it up for them.\n        if (transaction.gasLimit == null) {\n            const estimate = shallowCopy(transaction);\n            estimate.from = fromAddress;\n            transaction.gasLimit = this.provider.estimateGas(estimate);\n        }\n        if (transaction.to != null) {\n            transaction.to = Promise.resolve(transaction.to).then((to) => __awaiter(this, void 0, void 0, function* () {\n                if (to == null) {\n                    return null;\n                }\n                const address = yield this.provider.resolveName(to);\n                if (address == null) {\n                    logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n                }\n                return address;\n            }));\n        }\n        return resolveProperties({\n            tx: resolveProperties(transaction),\n            sender: fromAddress\n        }).then(({ tx, sender }) => {\n            if (tx.from != null) {\n                if (tx.from.toLowerCase() !== sender) {\n                    logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n                }\n            }\n            else {\n                tx.from = sender;\n            }\n            const hexTx = this.provider.constructor.hexlifyTransaction(tx, { from: true });\n            return this.provider.send(\"eth_sendTransaction\", [hexTx]).then((hash) => {\n                return hash;\n            }, (error) => {\n                if (typeof (error.message) === \"string\" && error.message.match(/user denied/i)) {\n                    logger.throwError(\"user rejected transaction\", Logger.errors.ACTION_REJECTED, {\n                        action: \"sendTransaction\",\n                        transaction: tx\n                    });\n                }\n                return checkError(\"sendTransaction\", error, hexTx);\n            });\n        });\n    }\n    signTransaction(transaction) {\n        return logger.throwError(\"signing transactions is unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"signTransaction\"\n        });\n    }\n    sendTransaction(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // This cannot be mined any earlier than any recent block\n            const blockNumber = yield this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);\n            // Send the transaction\n            const hash = yield this.sendUncheckedTransaction(transaction);\n            try {\n                // Unfortunately, JSON-RPC only provides and opaque transaction hash\n                // for a response, and we need the actual transaction, so we poll\n                // for it; it should show up very quickly\n                return yield poll(() => __awaiter(this, void 0, void 0, function* () {\n                    const tx = yield this.provider.getTransaction(hash);\n                    if (tx === null) {\n                        return undefined;\n                    }\n                    return this.provider._wrapTransaction(tx, hash, blockNumber);\n                }), { oncePoll: this.provider });\n            }\n            catch (error) {\n                error.transactionHash = hash;\n                throw error;\n            }\n        });\n    }\n    signMessage(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = ((typeof (message) === \"string\") ? toUtf8Bytes(message) : message);\n            const address = yield this.getAddress();\n            try {\n                return yield this.provider.send(\"personal_sign\", [hexlify(data), address.toLowerCase()]);\n            }\n            catch (error) {\n                if (typeof (error.message) === \"string\" && error.message.match(/user denied/i)) {\n                    logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                        action: \"signMessage\",\n                        from: address,\n                        messageData: message\n                    });\n                }\n                throw error;\n            }\n        });\n    }\n    _legacySignMessage(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = ((typeof (message) === \"string\") ? toUtf8Bytes(message) : message);\n            const address = yield this.getAddress();\n            try {\n                // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n                return yield this.provider.send(\"eth_sign\", [address.toLowerCase(), hexlify(data)]);\n            }\n            catch (error) {\n                if (typeof (error.message) === \"string\" && error.message.match(/user denied/i)) {\n                    logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                        action: \"_legacySignMessage\",\n                        from: address,\n                        messageData: message\n                    });\n                }\n                throw error;\n            }\n        });\n    }\n    _signTypedData(domain, types, value) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Populate any ENS names (in-place)\n            const populated = yield _TypedDataEncoder.resolveNames(domain, types, value, (name) => {\n                return this.provider.resolveName(name);\n            });\n            const address = yield this.getAddress();\n            try {\n                return yield this.provider.send(\"eth_signTypedData_v4\", [\n                    address.toLowerCase(),\n                    JSON.stringify(_TypedDataEncoder.getPayload(populated.domain, types, populated.value))\n                ]);\n            }\n            catch (error) {\n                if (typeof (error.message) === \"string\" && error.message.match(/user denied/i)) {\n                    logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                        action: \"_signTypedData\",\n                        from: address,\n                        messageData: { domain: populated.domain, types, value: populated.value }\n                    });\n                }\n                throw error;\n            }\n        });\n    }\n    unlock(password) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const provider = this.provider;\n            const address = yield this.getAddress();\n            return provider.send(\"personal_unlockAccount\", [address.toLowerCase(), password, null]);\n        });\n    }\n}\nclass UncheckedJsonRpcSigner extends JsonRpcSigner {\n    sendTransaction(transaction) {\n        return this.sendUncheckedTransaction(transaction).then((hash) => {\n            return {\n                hash: hash,\n                nonce: null,\n                gasLimit: null,\n                gasPrice: null,\n                data: null,\n                value: null,\n                chainId: null,\n                confirmations: 0,\n                from: null,\n                wait: (confirmations) => { return this.provider.waitForTransaction(hash, confirmations); }\n            };\n        });\n    }\n}\nconst allowedTransactionKeys = {\n    chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true,\n    type: true, accessList: true,\n    maxFeePerGas: true, maxPriorityFeePerGas: true\n};\nexport class JsonRpcProvider extends BaseProvider {\n    constructor(url, network) {\n        let networkOrReady = network;\n        // The network is unknown, query the JSON-RPC for it\n        if (networkOrReady == null) {\n            networkOrReady = new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    this.detectNetwork().then((network) => {\n                        resolve(network);\n                    }, (error) => {\n                        reject(error);\n                    });\n                }, 0);\n            });\n        }\n        super(networkOrReady);\n        // Default URL\n        if (!url) {\n            url = getStatic(this.constructor, \"defaultUrl\")();\n        }\n        if (typeof (url) === \"string\") {\n            defineReadOnly(this, \"connection\", Object.freeze({\n                url: url\n            }));\n        }\n        else {\n            defineReadOnly(this, \"connection\", Object.freeze(shallowCopy(url)));\n        }\n        this._nextId = 42;\n    }\n    get _cache() {\n        if (this._eventLoopCache == null) {\n            this._eventLoopCache = {};\n        }\n        return this._eventLoopCache;\n    }\n    static defaultUrl() {\n        return \"http:/\\/localhost:8545\";\n    }\n    detectNetwork() {\n        if (!this._cache[\"detectNetwork\"]) {\n            this._cache[\"detectNetwork\"] = this._uncachedDetectNetwork();\n            // Clear this cache at the beginning of the next event loop\n            setTimeout(() => {\n                this._cache[\"detectNetwork\"] = null;\n            }, 0);\n        }\n        return this._cache[\"detectNetwork\"];\n    }\n    _uncachedDetectNetwork() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield timer(0);\n            let chainId = null;\n            try {\n                chainId = yield this.send(\"eth_chainId\", []);\n            }\n            catch (error) {\n                try {\n                    chainId = yield this.send(\"net_version\", []);\n                }\n                catch (error) { }\n            }\n            if (chainId != null) {\n                const getNetwork = getStatic(this.constructor, \"getNetwork\");\n                try {\n                    return getNetwork(BigNumber.from(chainId).toNumber());\n                }\n                catch (error) {\n                    return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n                        chainId: chainId,\n                        event: \"invalidNetwork\",\n                        serverError: error\n                    });\n                }\n            }\n            return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n                event: \"noNetwork\"\n            });\n        });\n    }\n    getSigner(addressOrIndex) {\n        return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);\n    }\n    getUncheckedSigner(addressOrIndex) {\n        return this.getSigner(addressOrIndex).connectUnchecked();\n    }\n    listAccounts() {\n        return this.send(\"eth_accounts\", []).then((accounts) => {\n            return accounts.map((a) => this.formatter.address(a));\n        });\n    }\n    send(method, params) {\n        const request = {\n            method: method,\n            params: params,\n            id: (this._nextId++),\n            jsonrpc: \"2.0\"\n        };\n        this.emit(\"debug\", {\n            action: \"request\",\n            request: deepCopy(request),\n            provider: this\n        });\n        // We can expand this in the future to any call, but for now these\n        // are the biggest wins and do not require any serializing parameters.\n        const cache = ([\"eth_chainId\", \"eth_blockNumber\"].indexOf(method) >= 0);\n        if (cache && this._cache[method]) {\n            return this._cache[method];\n        }\n        const result = fetchJson(this.connection, JSON.stringify(request), getResult).then((result) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                request: request,\n                response: result,\n                provider: this\n            });\n            return result;\n        }, (error) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                error: error,\n                request: request,\n                provider: this\n            });\n            throw error;\n        });\n        // Cache the fetch, but clear it on the next event loop\n        if (cache) {\n            this._cache[method] = result;\n            setTimeout(() => {\n                this._cache[method] = null;\n            }, 0);\n        }\n        return result;\n    }\n    prepareRequest(method, params) {\n        switch (method) {\n            case \"getBlockNumber\":\n                return [\"eth_blockNumber\", []];\n            case \"getGasPrice\":\n                return [\"eth_gasPrice\", []];\n            case \"getBalance\":\n                return [\"eth_getBalance\", [getLowerCase(params.address), params.blockTag]];\n            case \"getTransactionCount\":\n                return [\"eth_getTransactionCount\", [getLowerCase(params.address), params.blockTag]];\n            case \"getCode\":\n                return [\"eth_getCode\", [getLowerCase(params.address), params.blockTag]];\n            case \"getStorageAt\":\n                return [\"eth_getStorageAt\", [getLowerCase(params.address), hexZeroPad(params.position, 32), params.blockTag]];\n            case \"sendTransaction\":\n                return [\"eth_sendRawTransaction\", [params.signedTransaction]];\n            case \"getBlock\":\n                if (params.blockTag) {\n                    return [\"eth_getBlockByNumber\", [params.blockTag, !!params.includeTransactions]];\n                }\n                else if (params.blockHash) {\n                    return [\"eth_getBlockByHash\", [params.blockHash, !!params.includeTransactions]];\n                }\n                return null;\n            case \"getTransaction\":\n                return [\"eth_getTransactionByHash\", [params.transactionHash]];\n            case \"getTransactionReceipt\":\n                return [\"eth_getTransactionReceipt\", [params.transactionHash]];\n            case \"call\": {\n                const hexlifyTransaction = getStatic(this.constructor, \"hexlifyTransaction\");\n                return [\"eth_call\", [hexlifyTransaction(params.transaction, { from: true }), params.blockTag]];\n            }\n            case \"estimateGas\": {\n                const hexlifyTransaction = getStatic(this.constructor, \"hexlifyTransaction\");\n                return [\"eth_estimateGas\", [hexlifyTransaction(params.transaction, { from: true })]];\n            }\n            case \"getLogs\":\n                if (params.filter && params.filter.address != null) {\n                    params.filter.address = getLowerCase(params.filter.address);\n                }\n                return [\"eth_getLogs\", [params.filter]];\n            default:\n                break;\n        }\n        return null;\n    }\n    perform(method, params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Legacy networks do not like the type field being passed along (which\n            // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n            if (method === \"call\" || method === \"estimateGas\") {\n                const tx = params.transaction;\n                if (tx && tx.type != null && BigNumber.from(tx.type).isZero()) {\n                    // If there are no EIP-1559 properties, it might be non-EIP-1559\n                    if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n                        const feeData = yield this.getFeeData();\n                        if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n                            // Network doesn't know about EIP-1559 (and hence type)\n                            params = shallowCopy(params);\n                            params.transaction = shallowCopy(tx);\n                            delete params.transaction.type;\n                        }\n                    }\n                }\n            }\n            const args = this.prepareRequest(method, params);\n            if (args == null) {\n                logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n            }\n            try {\n                return yield this.send(args[0], args[1]);\n            }\n            catch (error) {\n                return checkError(method, error, params);\n            }\n        });\n    }\n    _startEvent(event) {\n        if (event.tag === \"pending\") {\n            this._startPending();\n        }\n        super._startEvent(event);\n    }\n    _startPending() {\n        if (this._pendingFilter != null) {\n            return;\n        }\n        const self = this;\n        const pendingFilter = this.send(\"eth_newPendingTransactionFilter\", []);\n        this._pendingFilter = pendingFilter;\n        pendingFilter.then(function (filterId) {\n            function poll() {\n                self.send(\"eth_getFilterChanges\", [filterId]).then(function (hashes) {\n                    if (self._pendingFilter != pendingFilter) {\n                        return null;\n                    }\n                    let seq = Promise.resolve();\n                    hashes.forEach(function (hash) {\n                        // @TODO: This should be garbage collected at some point... How? When?\n                        self._emitted[\"t:\" + hash.toLowerCase()] = \"pending\";\n                        seq = seq.then(function () {\n                            return self.getTransaction(hash).then(function (tx) {\n                                self.emit(\"pending\", tx);\n                                return null;\n                            });\n                        });\n                    });\n                    return seq.then(function () {\n                        return timer(1000);\n                    });\n                }).then(function () {\n                    if (self._pendingFilter != pendingFilter) {\n                        self.send(\"eth_uninstallFilter\", [filterId]);\n                        return;\n                    }\n                    setTimeout(function () { poll(); }, 0);\n                    return null;\n                }).catch((error) => { });\n            }\n            poll();\n            return filterId;\n        }).catch((error) => { });\n    }\n    _stopEvent(event) {\n        if (event.tag === \"pending\" && this.listenerCount(\"pending\") === 0) {\n            this._pendingFilter = null;\n        }\n        super._stopEvent(event);\n    }\n    // Convert an ethers.js transaction into a JSON-RPC transaction\n    //  - gasLimit => gas\n    //  - All values hexlified\n    //  - All numeric values zero-striped\n    //  - All addresses are lowercased\n    // NOTE: This allows a TransactionRequest, but all values should be resolved\n    //       before this is called\n    // @TODO: This will likely be removed in future versions and prepareRequest\n    //        will be the preferred method for this.\n    static hexlifyTransaction(transaction, allowExtra) {\n        // Check only allowed properties are given\n        const allowed = shallowCopy(allowedTransactionKeys);\n        if (allowExtra) {\n            for (const key in allowExtra) {\n                if (allowExtra[key]) {\n                    allowed[key] = true;\n                }\n            }\n        }\n        checkProperties(transaction, allowed);\n        const result = {};\n        // JSON-RPC now requires numeric values to be \"quantity\" values\n        [\"chainId\", \"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach(function (key) {\n            if (transaction[key] == null) {\n                return;\n            }\n            const value = hexValue(BigNumber.from(transaction[key]));\n            if (key === \"gasLimit\") {\n                key = \"gas\";\n            }\n            result[key] = value;\n        });\n        [\"from\", \"to\", \"data\"].forEach(function (key) {\n            if (transaction[key] == null) {\n                return;\n            }\n            result[key] = hexlify(transaction[key]);\n        });\n        if (transaction.accessList) {\n            result[\"accessList\"] = accessListify(transaction.accessList);\n        }\n        return result;\n    }\n}\n//# sourceMappingURL=json-rpc-provider.js.map"]},"metadata":{},"sourceType":"module"}