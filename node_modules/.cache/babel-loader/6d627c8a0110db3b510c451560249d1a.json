{"ast":null,"code":"\"use strict\";\n\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexDataLength, hexDataSlice, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { accessListify, parse as parseTransaction } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport class Formatter {\n  constructor() {\n    this.formats = this.getDefaultFormats();\n  }\n  getDefaultFormats() {\n    const formats = {};\n    const address = this.address.bind(this);\n    const bigNumber = this.bigNumber.bind(this);\n    const blockTag = this.blockTag.bind(this);\n    const data = this.data.bind(this);\n    const hash = this.hash.bind(this);\n    const hex = this.hex.bind(this);\n    const number = this.number.bind(this);\n    const type = this.type.bind(this);\n    const strictData = v => {\n      return this.data(v, true);\n    };\n    formats.transaction = {\n      hash: hash,\n      type: type,\n      accessList: Formatter.allowNull(this.accessList.bind(this), null),\n      blockHash: Formatter.allowNull(hash, null),\n      blockNumber: Formatter.allowNull(number, null),\n      transactionIndex: Formatter.allowNull(number, null),\n      confirmations: Formatter.allowNull(number, null),\n      from: address,\n      // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)\n      // must be set\n      gasPrice: Formatter.allowNull(bigNumber),\n      maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n      maxFeePerGas: Formatter.allowNull(bigNumber),\n      gasLimit: bigNumber,\n      to: Formatter.allowNull(address, null),\n      value: bigNumber,\n      nonce: number,\n      data: data,\n      r: Formatter.allowNull(this.uint256),\n      s: Formatter.allowNull(this.uint256),\n      v: Formatter.allowNull(number),\n      creates: Formatter.allowNull(address, null),\n      raw: Formatter.allowNull(data)\n    };\n    formats.transactionRequest = {\n      from: Formatter.allowNull(address),\n      nonce: Formatter.allowNull(number),\n      gasLimit: Formatter.allowNull(bigNumber),\n      gasPrice: Formatter.allowNull(bigNumber),\n      maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n      maxFeePerGas: Formatter.allowNull(bigNumber),\n      to: Formatter.allowNull(address),\n      value: Formatter.allowNull(bigNumber),\n      data: Formatter.allowNull(strictData),\n      type: Formatter.allowNull(number),\n      accessList: Formatter.allowNull(this.accessList.bind(this), null)\n    };\n    formats.receiptLog = {\n      transactionIndex: number,\n      blockNumber: number,\n      transactionHash: hash,\n      address: address,\n      topics: Formatter.arrayOf(hash),\n      data: data,\n      logIndex: number,\n      blockHash: hash\n    };\n    formats.receipt = {\n      to: Formatter.allowNull(this.address, null),\n      from: Formatter.allowNull(this.address, null),\n      contractAddress: Formatter.allowNull(address, null),\n      transactionIndex: number,\n      // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n      root: Formatter.allowNull(hex),\n      gasUsed: bigNumber,\n      logsBloom: Formatter.allowNull(data),\n      blockHash: hash,\n      transactionHash: hash,\n      logs: Formatter.arrayOf(this.receiptLog.bind(this)),\n      blockNumber: number,\n      confirmations: Formatter.allowNull(number, null),\n      cumulativeGasUsed: bigNumber,\n      effectiveGasPrice: Formatter.allowNull(bigNumber),\n      status: Formatter.allowNull(number),\n      type: type\n    };\n    formats.block = {\n      hash: Formatter.allowNull(hash),\n      parentHash: hash,\n      number: number,\n      timestamp: number,\n      nonce: Formatter.allowNull(hex),\n      difficulty: this.difficulty.bind(this),\n      gasLimit: bigNumber,\n      gasUsed: bigNumber,\n      miner: Formatter.allowNull(address),\n      extraData: data,\n      transactions: Formatter.allowNull(Formatter.arrayOf(hash)),\n      baseFeePerGas: Formatter.allowNull(bigNumber)\n    };\n    formats.blockWithTransactions = shallowCopy(formats.block);\n    formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));\n    formats.filter = {\n      fromBlock: Formatter.allowNull(blockTag, undefined),\n      toBlock: Formatter.allowNull(blockTag, undefined),\n      blockHash: Formatter.allowNull(hash, undefined),\n      address: Formatter.allowNull(address, undefined),\n      topics: Formatter.allowNull(this.topics.bind(this), undefined)\n    };\n    formats.filterLog = {\n      blockNumber: Formatter.allowNull(number),\n      blockHash: Formatter.allowNull(hash),\n      transactionIndex: number,\n      removed: Formatter.allowNull(this.boolean.bind(this)),\n      address: address,\n      data: Formatter.allowFalsish(data, \"0x\"),\n      topics: Formatter.arrayOf(hash),\n      transactionHash: hash,\n      logIndex: number\n    };\n    return formats;\n  }\n  accessList(accessList) {\n    return accessListify(accessList || []);\n  }\n  // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number\n  // Strict! Used on input.\n  number(number) {\n    if (number === \"0x\") {\n      return 0;\n    }\n    return BigNumber.from(number).toNumber();\n  }\n  type(number) {\n    if (number === \"0x\" || number == null) {\n      return 0;\n    }\n    return BigNumber.from(number).toNumber();\n  }\n  // Strict! Used on input.\n  bigNumber(value) {\n    return BigNumber.from(value);\n  }\n  // Requires a boolean, \"true\" or  \"false\"; returns a boolean\n  boolean(value) {\n    if (typeof value === \"boolean\") {\n      return value;\n    }\n    if (typeof value === \"string\") {\n      value = value.toLowerCase();\n      if (value === \"true\") {\n        return true;\n      }\n      if (value === \"false\") {\n        return false;\n      }\n    }\n    throw new Error(\"invalid boolean - \" + value);\n  }\n  hex(value, strict) {\n    if (typeof value === \"string\") {\n      if (!strict && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n      }\n      if (isHexString(value)) {\n        return value.toLowerCase();\n      }\n    }\n    return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n  }\n  data(value, strict) {\n    const result = this.hex(value, strict);\n    if (result.length % 2 !== 0) {\n      throw new Error(\"invalid data; odd-length - \" + value);\n    }\n    return result;\n  }\n  // Requires an address\n  // Strict! Used on input.\n  address(value) {\n    return getAddress(value);\n  }\n  callAddress(value) {\n    if (!isHexString(value, 32)) {\n      return null;\n    }\n    const address = getAddress(hexDataSlice(value, 12));\n    return address === AddressZero ? null : address;\n  }\n  contractAddress(value) {\n    return getContractAddress(value);\n  }\n  // Strict! Used on input.\n  blockTag(blockTag) {\n    if (blockTag == null) {\n      return \"latest\";\n    }\n    if (blockTag === \"earliest\") {\n      return \"0x0\";\n    }\n    switch (blockTag) {\n      case \"earliest\":\n        return \"0x0\";\n      case \"latest\":\n      case \"pending\":\n      case \"safe\":\n      case \"finalized\":\n        return blockTag;\n    }\n    if (typeof blockTag === \"number\" || isHexString(blockTag)) {\n      return hexValue(blockTag);\n    }\n    throw new Error(\"invalid blockTag\");\n  }\n  // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.\n  hash(value, strict) {\n    const result = this.hex(value, strict);\n    if (hexDataLength(result) !== 32) {\n      return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n    }\n    return result;\n  }\n  // Returns the difficulty as a number, or if too large (i.e. PoA network) null\n  difficulty(value) {\n    if (value == null) {\n      return null;\n    }\n    const v = BigNumber.from(value);\n    try {\n      return v.toNumber();\n    } catch (error) {}\n    return null;\n  }\n  uint256(value) {\n    if (!isHexString(value)) {\n      throw new Error(\"invalid uint256\");\n    }\n    return hexZeroPad(value, 32);\n  }\n  _block(value, format) {\n    if (value.author != null && value.miner == null) {\n      value.miner = value.author;\n    }\n    // The difficulty may need to come from _difficulty in recursed blocks\n    const difficulty = value._difficulty != null ? value._difficulty : value.difficulty;\n    const result = Formatter.check(format, value);\n    result._difficulty = difficulty == null ? null : BigNumber.from(difficulty);\n    return result;\n  }\n  block(value) {\n    return this._block(value, this.formats.block);\n  }\n  blockWithTransactions(value) {\n    return this._block(value, this.formats.blockWithTransactions);\n  }\n  // Strict! Used on input.\n  transactionRequest(value) {\n    return Formatter.check(this.formats.transactionRequest, value);\n  }\n  transactionResponse(transaction) {\n    // Rename gas to gasLimit\n    if (transaction.gas != null && transaction.gasLimit == null) {\n      transaction.gasLimit = transaction.gas;\n    }\n    // Some clients (TestRPC) do strange things like return 0x0 for the\n    // 0 address; correct this to be a real address\n    if (transaction.to && BigNumber.from(transaction.to).isZero()) {\n      transaction.to = \"0x0000000000000000000000000000000000000000\";\n    }\n    // Rename input to data\n    if (transaction.input != null && transaction.data == null) {\n      transaction.data = transaction.input;\n    }\n    // If to and creates are empty, populate the creates from the transaction\n    if (transaction.to == null && transaction.creates == null) {\n      transaction.creates = this.contractAddress(transaction);\n    }\n    if ((transaction.type === 1 || transaction.type === 2) && transaction.accessList == null) {\n      transaction.accessList = [];\n    }\n    const result = Formatter.check(this.formats.transaction, transaction);\n    if (transaction.chainId != null) {\n      let chainId = transaction.chainId;\n      if (isHexString(chainId)) {\n        chainId = BigNumber.from(chainId).toNumber();\n      }\n      result.chainId = chainId;\n    } else {\n      let chainId = transaction.networkId;\n      // geth-etc returns chainId\n      if (chainId == null && result.v == null) {\n        chainId = transaction.chainId;\n      }\n      if (isHexString(chainId)) {\n        chainId = BigNumber.from(chainId).toNumber();\n      }\n      if (typeof chainId !== \"number\" && result.v != null) {\n        chainId = (result.v - 35) / 2;\n        if (chainId < 0) {\n          chainId = 0;\n        }\n        chainId = parseInt(chainId);\n      }\n      if (typeof chainId !== \"number\") {\n        chainId = 0;\n      }\n      result.chainId = chainId;\n    }\n    // 0x0000... should actually be null\n    if (result.blockHash && result.blockHash.replace(/0/g, \"\") === \"x\") {\n      result.blockHash = null;\n    }\n    return result;\n  }\n  transaction(value) {\n    return parseTransaction(value);\n  }\n  receiptLog(value) {\n    return Formatter.check(this.formats.receiptLog, value);\n  }\n  receipt(value) {\n    const result = Formatter.check(this.formats.receipt, value);\n    // RSK incorrectly implemented EIP-658, so we munge things a bit here for it\n    if (result.root != null) {\n      if (result.root.length <= 4) {\n        // Could be 0x00, 0x0, 0x01 or 0x1\n        const value = BigNumber.from(result.root).toNumber();\n        if (value === 0 || value === 1) {\n          // Make sure if both are specified, they match\n          if (result.status != null && result.status !== value) {\n            logger.throwArgumentError(\"alt-root-status/status mismatch\", \"value\", {\n              root: result.root,\n              status: result.status\n            });\n          }\n          result.status = value;\n          delete result.root;\n        } else {\n          logger.throwArgumentError(\"invalid alt-root-status\", \"value.root\", result.root);\n        }\n      } else if (result.root.length !== 66) {\n        // Must be a valid bytes32\n        logger.throwArgumentError(\"invalid root hash\", \"value.root\", result.root);\n      }\n    }\n    if (result.status != null) {\n      result.byzantium = true;\n    }\n    return result;\n  }\n  topics(value) {\n    if (Array.isArray(value)) {\n      return value.map(v => this.topics(v));\n    } else if (value != null) {\n      return this.hash(value, true);\n    }\n    return null;\n  }\n  filter(value) {\n    return Formatter.check(this.formats.filter, value);\n  }\n  filterLog(value) {\n    return Formatter.check(this.formats.filterLog, value);\n  }\n  static check(format, object) {\n    const result = {};\n    for (const key in format) {\n      try {\n        const value = format[key](object[key]);\n        if (value !== undefined) {\n          result[key] = value;\n        }\n      } catch (error) {\n        error.checkKey = key;\n        error.checkValue = object[key];\n        throw error;\n      }\n    }\n    return result;\n  }\n  // if value is null-ish, nullValue is returned\n  static allowNull(format, nullValue) {\n    return function (value) {\n      if (value == null) {\n        return nullValue;\n      }\n      return format(value);\n    };\n  }\n  // If value is false-ish, replaceValue is returned\n  static allowFalsish(format, replaceValue) {\n    return function (value) {\n      if (!value) {\n        return replaceValue;\n      }\n      return format(value);\n    };\n  }\n  // Requires an Array satisfying check\n  static arrayOf(format) {\n    return function (array) {\n      if (!Array.isArray(array)) {\n        throw new Error(\"not an array\");\n      }\n      const result = [];\n      array.forEach(function (value) {\n        result.push(format(value));\n      });\n      return result;\n    };\n  }\n}\nexport function isCommunityResourcable(value) {\n  return value && typeof value.isCommunityResource === \"function\";\n}\nexport function isCommunityResource(value) {\n  return isCommunityResourcable(value) && value.isCommunityResource();\n}\n// Show the throttle message only once\nlet throttleMessage = false;\nexport function showThrottleMessage() {\n  if (throttleMessage) {\n    return;\n  }\n  throttleMessage = true;\n  console.log(\"========= NOTICE =========\");\n  console.log(\"Request-Rate Exceeded  (this message will not be repeated)\");\n  console.log(\"\");\n  console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n  console.log(\"community resource for low-traffic projects and early prototyping.\");\n  console.log(\"\");\n  console.log(\"While your application will continue to function, we highly recommended\");\n  console.log(\"signing up for your own API keys to improve performance, increase your\");\n  console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n  console.log(\"\");\n  console.log(\"For more details: https:/\\/docs.ethers.io/api-keys/\");\n  console.log(\"==========================\");\n}","map":{"version":3,"sources":["../src.ts/formatter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexDataLength, hexDataSlice, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { accessListify, parse as parseTransaction } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport class Formatter {\n    constructor() {\n        this.formats = this.getDefaultFormats();\n    }\n    getDefaultFormats() {\n        const formats = ({});\n        const address = this.address.bind(this);\n        const bigNumber = this.bigNumber.bind(this);\n        const blockTag = this.blockTag.bind(this);\n        const data = this.data.bind(this);\n        const hash = this.hash.bind(this);\n        const hex = this.hex.bind(this);\n        const number = this.number.bind(this);\n        const type = this.type.bind(this);\n        const strictData = (v) => { return this.data(v, true); };\n        formats.transaction = {\n            hash: hash,\n            type: type,\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n            blockHash: Formatter.allowNull(hash, null),\n            blockNumber: Formatter.allowNull(number, null),\n            transactionIndex: Formatter.allowNull(number, null),\n            confirmations: Formatter.allowNull(number, null),\n            from: address,\n            // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)\n            // must be set\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n            gasLimit: bigNumber,\n            to: Formatter.allowNull(address, null),\n            value: bigNumber,\n            nonce: number,\n            data: data,\n            r: Formatter.allowNull(this.uint256),\n            s: Formatter.allowNull(this.uint256),\n            v: Formatter.allowNull(number),\n            creates: Formatter.allowNull(address, null),\n            raw: Formatter.allowNull(data),\n        };\n        formats.transactionRequest = {\n            from: Formatter.allowNull(address),\n            nonce: Formatter.allowNull(number),\n            gasLimit: Formatter.allowNull(bigNumber),\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n            to: Formatter.allowNull(address),\n            value: Formatter.allowNull(bigNumber),\n            data: Formatter.allowNull(strictData),\n            type: Formatter.allowNull(number),\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n        };\n        formats.receiptLog = {\n            transactionIndex: number,\n            blockNumber: number,\n            transactionHash: hash,\n            address: address,\n            topics: Formatter.arrayOf(hash),\n            data: data,\n            logIndex: number,\n            blockHash: hash,\n        };\n        formats.receipt = {\n            to: Formatter.allowNull(this.address, null),\n            from: Formatter.allowNull(this.address, null),\n            contractAddress: Formatter.allowNull(address, null),\n            transactionIndex: number,\n            // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n            root: Formatter.allowNull(hex),\n            gasUsed: bigNumber,\n            logsBloom: Formatter.allowNull(data),\n            blockHash: hash,\n            transactionHash: hash,\n            logs: Formatter.arrayOf(this.receiptLog.bind(this)),\n            blockNumber: number,\n            confirmations: Formatter.allowNull(number, null),\n            cumulativeGasUsed: bigNumber,\n            effectiveGasPrice: Formatter.allowNull(bigNumber),\n            status: Formatter.allowNull(number),\n            type: type\n        };\n        formats.block = {\n            hash: Formatter.allowNull(hash),\n            parentHash: hash,\n            number: number,\n            timestamp: number,\n            nonce: Formatter.allowNull(hex),\n            difficulty: this.difficulty.bind(this),\n            gasLimit: bigNumber,\n            gasUsed: bigNumber,\n            miner: Formatter.allowNull(address),\n            extraData: data,\n            transactions: Formatter.allowNull(Formatter.arrayOf(hash)),\n            baseFeePerGas: Formatter.allowNull(bigNumber)\n        };\n        formats.blockWithTransactions = shallowCopy(formats.block);\n        formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));\n        formats.filter = {\n            fromBlock: Formatter.allowNull(blockTag, undefined),\n            toBlock: Formatter.allowNull(blockTag, undefined),\n            blockHash: Formatter.allowNull(hash, undefined),\n            address: Formatter.allowNull(address, undefined),\n            topics: Formatter.allowNull(this.topics.bind(this), undefined),\n        };\n        formats.filterLog = {\n            blockNumber: Formatter.allowNull(number),\n            blockHash: Formatter.allowNull(hash),\n            transactionIndex: number,\n            removed: Formatter.allowNull(this.boolean.bind(this)),\n            address: address,\n            data: Formatter.allowFalsish(data, \"0x\"),\n            topics: Formatter.arrayOf(hash),\n            transactionHash: hash,\n            logIndex: number,\n        };\n        return formats;\n    }\n    accessList(accessList) {\n        return accessListify(accessList || []);\n    }\n    // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number\n    // Strict! Used on input.\n    number(number) {\n        if (number === \"0x\") {\n            return 0;\n        }\n        return BigNumber.from(number).toNumber();\n    }\n    type(number) {\n        if (number === \"0x\" || number == null) {\n            return 0;\n        }\n        return BigNumber.from(number).toNumber();\n    }\n    // Strict! Used on input.\n    bigNumber(value) {\n        return BigNumber.from(value);\n    }\n    // Requires a boolean, \"true\" or  \"false\"; returns a boolean\n    boolean(value) {\n        if (typeof (value) === \"boolean\") {\n            return value;\n        }\n        if (typeof (value) === \"string\") {\n            value = value.toLowerCase();\n            if (value === \"true\") {\n                return true;\n            }\n            if (value === \"false\") {\n                return false;\n            }\n        }\n        throw new Error(\"invalid boolean - \" + value);\n    }\n    hex(value, strict) {\n        if (typeof (value) === \"string\") {\n            if (!strict && value.substring(0, 2) !== \"0x\") {\n                value = \"0x\" + value;\n            }\n            if (isHexString(value)) {\n                return value.toLowerCase();\n            }\n        }\n        return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n    }\n    data(value, strict) {\n        const result = this.hex(value, strict);\n        if ((result.length % 2) !== 0) {\n            throw new Error(\"invalid data; odd-length - \" + value);\n        }\n        return result;\n    }\n    // Requires an address\n    // Strict! Used on input.\n    address(value) {\n        return getAddress(value);\n    }\n    callAddress(value) {\n        if (!isHexString(value, 32)) {\n            return null;\n        }\n        const address = getAddress(hexDataSlice(value, 12));\n        return (address === AddressZero) ? null : address;\n    }\n    contractAddress(value) {\n        return getContractAddress(value);\n    }\n    // Strict! Used on input.\n    blockTag(blockTag) {\n        if (blockTag == null) {\n            return \"latest\";\n        }\n        if (blockTag === \"earliest\") {\n            return \"0x0\";\n        }\n        switch (blockTag) {\n            case \"earliest\": return \"0x0\";\n            case \"latest\":\n            case \"pending\":\n            case \"safe\":\n            case \"finalized\":\n                return blockTag;\n        }\n        if (typeof (blockTag) === \"number\" || isHexString(blockTag)) {\n            return hexValue(blockTag);\n        }\n        throw new Error(\"invalid blockTag\");\n    }\n    // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.\n    hash(value, strict) {\n        const result = this.hex(value, strict);\n        if (hexDataLength(result) !== 32) {\n            return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n        }\n        return result;\n    }\n    // Returns the difficulty as a number, or if too large (i.e. PoA network) null\n    difficulty(value) {\n        if (value == null) {\n            return null;\n        }\n        const v = BigNumber.from(value);\n        try {\n            return v.toNumber();\n        }\n        catch (error) { }\n        return null;\n    }\n    uint256(value) {\n        if (!isHexString(value)) {\n            throw new Error(\"invalid uint256\");\n        }\n        return hexZeroPad(value, 32);\n    }\n    _block(value, format) {\n        if (value.author != null && value.miner == null) {\n            value.miner = value.author;\n        }\n        // The difficulty may need to come from _difficulty in recursed blocks\n        const difficulty = (value._difficulty != null) ? value._difficulty : value.difficulty;\n        const result = Formatter.check(format, value);\n        result._difficulty = ((difficulty == null) ? null : BigNumber.from(difficulty));\n        return result;\n    }\n    block(value) {\n        return this._block(value, this.formats.block);\n    }\n    blockWithTransactions(value) {\n        return this._block(value, this.formats.blockWithTransactions);\n    }\n    // Strict! Used on input.\n    transactionRequest(value) {\n        return Formatter.check(this.formats.transactionRequest, value);\n    }\n    transactionResponse(transaction) {\n        // Rename gas to gasLimit\n        if (transaction.gas != null && transaction.gasLimit == null) {\n            transaction.gasLimit = transaction.gas;\n        }\n        // Some clients (TestRPC) do strange things like return 0x0 for the\n        // 0 address; correct this to be a real address\n        if (transaction.to && BigNumber.from(transaction.to).isZero()) {\n            transaction.to = \"0x0000000000000000000000000000000000000000\";\n        }\n        // Rename input to data\n        if (transaction.input != null && transaction.data == null) {\n            transaction.data = transaction.input;\n        }\n        // If to and creates are empty, populate the creates from the transaction\n        if (transaction.to == null && transaction.creates == null) {\n            transaction.creates = this.contractAddress(transaction);\n        }\n        if ((transaction.type === 1 || transaction.type === 2) && transaction.accessList == null) {\n            transaction.accessList = [];\n        }\n        const result = Formatter.check(this.formats.transaction, transaction);\n        if (transaction.chainId != null) {\n            let chainId = transaction.chainId;\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n            result.chainId = chainId;\n        }\n        else {\n            let chainId = transaction.networkId;\n            // geth-etc returns chainId\n            if (chainId == null && result.v == null) {\n                chainId = transaction.chainId;\n            }\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n            if (typeof (chainId) !== \"number\" && result.v != null) {\n                chainId = (result.v - 35) / 2;\n                if (chainId < 0) {\n                    chainId = 0;\n                }\n                chainId = parseInt(chainId);\n            }\n            if (typeof (chainId) !== \"number\") {\n                chainId = 0;\n            }\n            result.chainId = chainId;\n        }\n        // 0x0000... should actually be null\n        if (result.blockHash && result.blockHash.replace(/0/g, \"\") === \"x\") {\n            result.blockHash = null;\n        }\n        return result;\n    }\n    transaction(value) {\n        return parseTransaction(value);\n    }\n    receiptLog(value) {\n        return Formatter.check(this.formats.receiptLog, value);\n    }\n    receipt(value) {\n        const result = Formatter.check(this.formats.receipt, value);\n        // RSK incorrectly implemented EIP-658, so we munge things a bit here for it\n        if (result.root != null) {\n            if (result.root.length <= 4) {\n                // Could be 0x00, 0x0, 0x01 or 0x1\n                const value = BigNumber.from(result.root).toNumber();\n                if (value === 0 || value === 1) {\n                    // Make sure if both are specified, they match\n                    if (result.status != null && (result.status !== value)) {\n                        logger.throwArgumentError(\"alt-root-status/status mismatch\", \"value\", { root: result.root, status: result.status });\n                    }\n                    result.status = value;\n                    delete result.root;\n                }\n                else {\n                    logger.throwArgumentError(\"invalid alt-root-status\", \"value.root\", result.root);\n                }\n            }\n            else if (result.root.length !== 66) {\n                // Must be a valid bytes32\n                logger.throwArgumentError(\"invalid root hash\", \"value.root\", result.root);\n            }\n        }\n        if (result.status != null) {\n            result.byzantium = true;\n        }\n        return result;\n    }\n    topics(value) {\n        if (Array.isArray(value)) {\n            return value.map((v) => this.topics(v));\n        }\n        else if (value != null) {\n            return this.hash(value, true);\n        }\n        return null;\n    }\n    filter(value) {\n        return Formatter.check(this.formats.filter, value);\n    }\n    filterLog(value) {\n        return Formatter.check(this.formats.filterLog, value);\n    }\n    static check(format, object) {\n        const result = {};\n        for (const key in format) {\n            try {\n                const value = format[key](object[key]);\n                if (value !== undefined) {\n                    result[key] = value;\n                }\n            }\n            catch (error) {\n                error.checkKey = key;\n                error.checkValue = object[key];\n                throw error;\n            }\n        }\n        return result;\n    }\n    // if value is null-ish, nullValue is returned\n    static allowNull(format, nullValue) {\n        return (function (value) {\n            if (value == null) {\n                return nullValue;\n            }\n            return format(value);\n        });\n    }\n    // If value is false-ish, replaceValue is returned\n    static allowFalsish(format, replaceValue) {\n        return (function (value) {\n            if (!value) {\n                return replaceValue;\n            }\n            return format(value);\n        });\n    }\n    // Requires an Array satisfying check\n    static arrayOf(format) {\n        return (function (array) {\n            if (!Array.isArray(array)) {\n                throw new Error(\"not an array\");\n            }\n            const result = [];\n            array.forEach(function (value) {\n                result.push(format(value));\n            });\n            return result;\n        });\n    }\n}\nexport function isCommunityResourcable(value) {\n    return (value && typeof (value.isCommunityResource) === \"function\");\n}\nexport function isCommunityResource(value) {\n    return (isCommunityResourcable(value) && value.isCommunityResource());\n}\n// Show the throttle message only once\nlet throttleMessage = false;\nexport function showThrottleMessage() {\n    if (throttleMessage) {\n        return;\n    }\n    throttleMessage = true;\n    console.log(\"========= NOTICE =========\");\n    console.log(\"Request-Rate Exceeded  (this message will not be repeated)\");\n    console.log(\"\");\n    console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n    console.log(\"community resource for low-traffic projects and early prototyping.\");\n    console.log(\"\");\n    console.log(\"While your application will continue to function, we highly recommended\");\n    console.log(\"signing up for your own API keys to improve performance, increase your\");\n    console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n    console.log(\"\");\n    console.log(\"For more details: https:/\\/docs.ethers.io/api-keys/\");\n    console.log(\"==========================\");\n}\n//# sourceMappingURL=formatter.js.map"]},"metadata":{},"sourceType":"module"}