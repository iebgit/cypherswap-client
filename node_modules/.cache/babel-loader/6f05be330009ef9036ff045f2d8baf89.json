{"ast":null,"code":"\"use strict\";\n\nimport { arrayify, hexlify } from \"@ethersproject/bytes\";\nimport { Coder } from \"./abstract-coder\";\nexport class DynamicBytesCoder extends Coder {\n  constructor(type, localName) {\n    super(type, type, localName, true);\n  }\n  defaultValue() {\n    return \"0x\";\n  }\n  encode(writer, value) {\n    value = arrayify(value);\n    let length = writer.writeValue(value.length);\n    length += writer.writeBytes(value);\n    return length;\n  }\n  decode(reader) {\n    return reader.readBytes(reader.readValue().toNumber(), true);\n  }\n}\nexport class BytesCoder extends DynamicBytesCoder {\n  constructor(localName) {\n    super(\"bytes\", localName);\n  }\n  decode(reader) {\n    return reader.coerce(this.name, hexlify(super.decode(reader)));\n  }\n}","map":{"version":3,"sources":["../../src.ts/coders/bytes.ts"],"names":[],"mappings":"AAAA,YAAY;;AAEZ,SAAS,QAAQ,EAAE,OAAO,QAAQ,sBAAsB;AAExD,SAAS,KAAK,QAAwB,kBAAkB;AAExD,OAAM,MAAO,iBAAkB,SAAQ,KAAK,CAAA;EACxC,WAAA,CAAY,IAAY,EAAE,SAAiB,EAAA;IACxC,KAAK,CAAC,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,CAAC;EACrC;EAEA,YAAY,GAAA;IACR,OAAO,IAAI;EACf;EAEA,MAAM,CAAC,MAAc,EAAE,KAAU,EAAA;IAC7B,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;IACvB,IAAI,MAAM,GAAG,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC;IAC5C,MAAM,IAAI,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC;IAClC,OAAO,MAAM;EACjB;EAEA,MAAM,CAAC,MAAc,EAAA;IACjB,OAAO,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC;EAChE;AACH;AAED,OAAM,MAAO,UAAW,SAAQ,iBAAiB,CAAA;EAC7C,WAAA,CAAY,SAAiB,EAAA;IACzB,KAAK,CAAC,OAAO,EAAE,SAAS,CAAC;EAC7B;EAEA,MAAM,CAAC,MAAc,EAAA;IACjB,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;EAClE;AACH","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { arrayify, hexlify } from \"@ethersproject/bytes\";\nimport { Coder } from \"./abstract-coder\";\nexport class DynamicBytesCoder extends Coder {\n    constructor(type, localName) {\n        super(type, type, localName, true);\n    }\n    defaultValue() {\n        return \"0x\";\n    }\n    encode(writer, value) {\n        value = arrayify(value);\n        let length = writer.writeValue(value.length);\n        length += writer.writeBytes(value);\n        return length;\n    }\n    decode(reader) {\n        return reader.readBytes(reader.readValue().toNumber(), true);\n    }\n}\nexport class BytesCoder extends DynamicBytesCoder {\n    constructor(localName) {\n        super(\"bytes\", localName);\n    }\n    decode(reader) {\n        return reader.coerce(this.name, hexlify(super.decode(reader)));\n    }\n}\n//# sourceMappingURL=bytes.js.map"]},"metadata":{},"sourceType":"module"}