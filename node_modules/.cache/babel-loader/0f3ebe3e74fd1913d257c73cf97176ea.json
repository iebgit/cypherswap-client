{"ast":null,"code":"import { InternMap } from \"internmap\";\nimport identity from \"./identity.js\";\nexport default function group(values) {\n  for (var _len = arguments.length, keys = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    keys[_key - 1] = arguments[_key];\n  }\n  return nest(values, identity, identity, keys);\n}\nexport function groups(values) {\n  for (var _len2 = arguments.length, keys = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    keys[_key2 - 1] = arguments[_key2];\n  }\n  return nest(values, Array.from, identity, keys);\n}\nexport function rollup(values, reduce) {\n  for (var _len3 = arguments.length, keys = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n    keys[_key3 - 2] = arguments[_key3];\n  }\n  return nest(values, identity, reduce, keys);\n}\nexport function rollups(values, reduce) {\n  for (var _len4 = arguments.length, keys = new Array(_len4 > 2 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {\n    keys[_key4 - 2] = arguments[_key4];\n  }\n  return nest(values, Array.from, reduce, keys);\n}\nexport function index(values) {\n  for (var _len5 = arguments.length, keys = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n    keys[_key5 - 1] = arguments[_key5];\n  }\n  return nest(values, identity, unique, keys);\n}\nexport function indexes(values) {\n  for (var _len6 = arguments.length, keys = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n    keys[_key6 - 1] = arguments[_key6];\n  }\n  return nest(values, Array.from, unique, keys);\n}\nfunction unique(values) {\n  if (values.length !== 1) throw new Error(\"duplicate key\");\n  return values[0];\n}\nfunction nest(values, map, reduce, keys) {\n  return function regroup(values, i) {\n    if (i >= keys.length) return reduce(values);\n    const groups = new InternMap();\n    const keyof = keys[i++];\n    let index = -1;\n    for (const value of values) {\n      const key = keyof(value, ++index, values);\n      const group = groups.get(key);\n      if (group) group.push(value);else groups.set(key, [value]);\n    }\n    for (const [key, values] of groups) {\n      groups.set(key, regroup(values, i));\n    }\n    return map(groups);\n  }(values, 0);\n}","map":{"version":3,"names":["InternMap","identity","group","values","keys","nest","groups","Array","from","rollup","reduce","rollups","index","unique","indexes","length","Error","map","regroup","i","keyof","value","key","get","push","set"],"sources":["/Users/Ibis/Projects/project_mern_memories/client/node_modules/d3-array/src/group.js"],"sourcesContent":["import {InternMap} from \"internmap\";\nimport identity from \"./identity.js\";\n\nexport default function group(values, ...keys) {\n  return nest(values, identity, identity, keys);\n}\n\nexport function groups(values, ...keys) {\n  return nest(values, Array.from, identity, keys);\n}\n\nexport function rollup(values, reduce, ...keys) {\n  return nest(values, identity, reduce, keys);\n}\n\nexport function rollups(values, reduce, ...keys) {\n  return nest(values, Array.from, reduce, keys);\n}\n\nexport function index(values, ...keys) {\n  return nest(values, identity, unique, keys);\n}\n\nexport function indexes(values, ...keys) {\n  return nest(values, Array.from, unique, keys);\n}\n\nfunction unique(values) {\n  if (values.length !== 1) throw new Error(\"duplicate key\");\n  return values[0];\n}\n\nfunction nest(values, map, reduce, keys) {\n  return (function regroup(values, i) {\n    if (i >= keys.length) return reduce(values);\n    const groups = new InternMap();\n    const keyof = keys[i++];\n    let index = -1;\n    for (const value of values) {\n      const key = keyof(value, ++index, values);\n      const group = groups.get(key);\n      if (group) group.push(value);\n      else groups.set(key, [value]);\n    }\n    for (const [key, values] of groups) {\n      groups.set(key, regroup(values, i));\n    }\n    return map(groups);\n  })(values, 0);\n}\n"],"mappings":"AAAA,SAAQA,SAAS,QAAO,WAAW;AACnC,OAAOC,QAAQ,MAAM,eAAe;AAEpC,eAAe,SAASC,KAAK,CAACC,MAAM,EAAW;EAAA,kCAANC,IAAI;IAAJA,IAAI;EAAA;EAC3C,OAAOC,IAAI,CAACF,MAAM,EAAEF,QAAQ,EAAEA,QAAQ,EAAEG,IAAI,CAAC;AAC/C;AAEA,OAAO,SAASE,MAAM,CAACH,MAAM,EAAW;EAAA,mCAANC,IAAI;IAAJA,IAAI;EAAA;EACpC,OAAOC,IAAI,CAACF,MAAM,EAAEI,KAAK,CAACC,IAAI,EAAEP,QAAQ,EAAEG,IAAI,CAAC;AACjD;AAEA,OAAO,SAASK,MAAM,CAACN,MAAM,EAAEO,MAAM,EAAW;EAAA,mCAANN,IAAI;IAAJA,IAAI;EAAA;EAC5C,OAAOC,IAAI,CAACF,MAAM,EAAEF,QAAQ,EAAES,MAAM,EAAEN,IAAI,CAAC;AAC7C;AAEA,OAAO,SAASO,OAAO,CAACR,MAAM,EAAEO,MAAM,EAAW;EAAA,mCAANN,IAAI;IAAJA,IAAI;EAAA;EAC7C,OAAOC,IAAI,CAACF,MAAM,EAAEI,KAAK,CAACC,IAAI,EAAEE,MAAM,EAAEN,IAAI,CAAC;AAC/C;AAEA,OAAO,SAASQ,KAAK,CAACT,MAAM,EAAW;EAAA,mCAANC,IAAI;IAAJA,IAAI;EAAA;EACnC,OAAOC,IAAI,CAACF,MAAM,EAAEF,QAAQ,EAAEY,MAAM,EAAET,IAAI,CAAC;AAC7C;AAEA,OAAO,SAASU,OAAO,CAACX,MAAM,EAAW;EAAA,mCAANC,IAAI;IAAJA,IAAI;EAAA;EACrC,OAAOC,IAAI,CAACF,MAAM,EAAEI,KAAK,CAACC,IAAI,EAAEK,MAAM,EAAET,IAAI,CAAC;AAC/C;AAEA,SAASS,MAAM,CAACV,MAAM,EAAE;EACtB,IAAIA,MAAM,CAACY,MAAM,KAAK,CAAC,EAAE,MAAM,IAAIC,KAAK,CAAC,eAAe,CAAC;EACzD,OAAOb,MAAM,CAAC,CAAC,CAAC;AAClB;AAEA,SAASE,IAAI,CAACF,MAAM,EAAEc,GAAG,EAAEP,MAAM,EAAEN,IAAI,EAAE;EACvC,OAAQ,SAASc,OAAO,CAACf,MAAM,EAAEgB,CAAC,EAAE;IAClC,IAAIA,CAAC,IAAIf,IAAI,CAACW,MAAM,EAAE,OAAOL,MAAM,CAACP,MAAM,CAAC;IAC3C,MAAMG,MAAM,GAAG,IAAIN,SAAS,EAAE;IAC9B,MAAMoB,KAAK,GAAGhB,IAAI,CAACe,CAAC,EAAE,CAAC;IACvB,IAAIP,KAAK,GAAG,CAAC,CAAC;IACd,KAAK,MAAMS,KAAK,IAAIlB,MAAM,EAAE;MAC1B,MAAMmB,GAAG,GAAGF,KAAK,CAACC,KAAK,EAAE,EAAET,KAAK,EAAET,MAAM,CAAC;MACzC,MAAMD,KAAK,GAAGI,MAAM,CAACiB,GAAG,CAACD,GAAG,CAAC;MAC7B,IAAIpB,KAAK,EAAEA,KAAK,CAACsB,IAAI,CAACH,KAAK,CAAC,CAAC,KACxBf,MAAM,CAACmB,GAAG,CAACH,GAAG,EAAE,CAACD,KAAK,CAAC,CAAC;IAC/B;IACA,KAAK,MAAM,CAACC,GAAG,EAAEnB,MAAM,CAAC,IAAIG,MAAM,EAAE;MAClCA,MAAM,CAACmB,GAAG,CAACH,GAAG,EAAEJ,OAAO,CAACf,MAAM,EAAEgB,CAAC,CAAC,CAAC;IACrC;IACA,OAAOF,GAAG,CAACX,MAAM,CAAC;EACpB,CAAC,CAAEH,MAAM,EAAE,CAAC,CAAC;AACf"},"metadata":{},"sourceType":"module"}