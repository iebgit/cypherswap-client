{"ast":null,"code":"\"use strict\";\n\n// This gets overridden by rollup\nconst exportWordlist = false;\nimport { id } from \"@ethersproject/hash\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nexport const logger = new Logger(version);\nexport class Wordlist {\n  constructor(locale) {\n    logger.checkAbstract(new.target, Wordlist);\n    defineReadOnly(this, \"locale\", locale);\n  }\n  // Subclasses may override this\n  split(mnemonic) {\n    return mnemonic.toLowerCase().split(/ +/g);\n  }\n  // Subclasses may override this\n  join(words) {\n    return words.join(\" \");\n  }\n  static check(wordlist) {\n    const words = [];\n    for (let i = 0; i < 2048; i++) {\n      const word = wordlist.getWord(i);\n      /* istanbul ignore if */\n      if (i !== wordlist.getWordIndex(word)) {\n        return \"0x\";\n      }\n      words.push(word);\n    }\n    return id(words.join(\"\\n\") + \"\\n\");\n  }\n  static register(lang, name) {\n    if (!name) {\n      name = lang.locale;\n    }\n    /* istanbul ignore if */\n    if (exportWordlist) {\n      try {\n        const anyGlobal = window;\n        if (anyGlobal._ethers && anyGlobal._ethers.wordlists) {\n          if (!anyGlobal._ethers.wordlists[name]) {\n            defineReadOnly(anyGlobal._ethers.wordlists, name, lang);\n          }\n        }\n      } catch (error) {}\n    }\n  }\n}","map":{"version":3,"sources":["../src.ts/wordlist.ts"],"names":[],"mappings":"AAAA,YAAY;;AAEZ;AACA,MAAM,cAAc,GAAG,KAAK;AAE5B,SAAS,EAAE,QAAQ,qBAAqB;AACxC,SAAS,cAAc,QAAQ,2BAA2B;AAE1D,SAAS,MAAM,QAAQ,uBAAuB;AAC9C,SAAS,OAAO,QAAQ,YAAY;AACpC,OAAO,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,OAAO,CAAC;AAEzC,OAAM,MAAgB,QAAQ,CAAA;EAG1B,WAAA,CAAY,MAAc,EAAA;IACtB,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC;IAC1C,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAE,MAAM,CAAC;EAC1C;EAKA;EACA,KAAK,CAAC,QAAgB,EAAA;IAClB,OAAO,QAAQ,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC;EAC9C;EAEA;EACA,IAAI,CAAC,KAAoB,EAAA;IACrB,OAAO,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC;EAC1B;EAEA,OAAO,KAAK,CAAC,QAAkB,EAAA;IAC3B,MAAM,KAAK,GAAG,EAAE;IAChB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE;MAC3B,MAAM,IAAI,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;MAChC;MACA,IAAI,CAAC,KAAK,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE;QAAE,OAAO,IAAI;MAAG;MACvD,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;IACnB;IACD,OAAO,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;EACtC;EAEA,OAAO,QAAQ,CAAC,IAAc,EAAE,IAAa,EAAA;IACzC,IAAI,CAAC,IAAI,EAAE;MAAE,IAAI,GAAG,IAAI,CAAC,MAAM;IAAG;IAElC;IACA,IAAI,cAAc,EAAE;MAChB,IAAI;QACA,MAAM,SAAS,GAAI,MAAc;QACjC,IAAI,SAAS,CAAC,OAAO,IAAI,SAAS,CAAC,OAAO,CAAC,SAAS,EAAE;UAClD,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;YACnC,cAAc,CAAC,SAAS,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,CAAC;UAC3D;QACJ;OACJ,CAAC,OAAO,KAAK,EAAE,CAAA;IACnB;EACL;AAEH","sourceRoot":"","sourcesContent":["\"use strict\";\n// This gets overridden by rollup\nconst exportWordlist = false;\nimport { id } from \"@ethersproject/hash\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nexport const logger = new Logger(version);\nexport class Wordlist {\n    constructor(locale) {\n        logger.checkAbstract(new.target, Wordlist);\n        defineReadOnly(this, \"locale\", locale);\n    }\n    // Subclasses may override this\n    split(mnemonic) {\n        return mnemonic.toLowerCase().split(/ +/g);\n    }\n    // Subclasses may override this\n    join(words) {\n        return words.join(\" \");\n    }\n    static check(wordlist) {\n        const words = [];\n        for (let i = 0; i < 2048; i++) {\n            const word = wordlist.getWord(i);\n            /* istanbul ignore if */\n            if (i !== wordlist.getWordIndex(word)) {\n                return \"0x\";\n            }\n            words.push(word);\n        }\n        return id(words.join(\"\\n\") + \"\\n\");\n    }\n    static register(lang, name) {\n        if (!name) {\n            name = lang.locale;\n        }\n        /* istanbul ignore if */\n        if (exportWordlist) {\n            try {\n                const anyGlobal = window;\n                if (anyGlobal._ethers && anyGlobal._ethers.wordlists) {\n                    if (!anyGlobal._ethers.wordlists[name]) {\n                        defineReadOnly(anyGlobal._ethers.wordlists, name, lang);\n                    }\n                }\n            }\n            catch (error) { }\n        }\n    }\n}\n//# sourceMappingURL=wordlist.js.map"]},"metadata":{},"sourceType":"module"}