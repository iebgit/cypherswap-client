{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { isHexString } from \"@ethersproject/bytes\";\nimport { deepCopy, defineReadOnly, shallowCopy } from \"@ethersproject/properties\";\nimport { shuffled } from \"@ethersproject/random\";\nimport { poll } from \"@ethersproject/web\";\nimport { BaseProvider } from \"./base-provider\";\nimport { isCommunityResource } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nfunction now() {\n  return new Date().getTime();\n}\n// Returns to network as long as all agree, or null if any is null.\n// Throws an error if any two networks do not match.\nfunction checkNetworks(networks) {\n  let result = null;\n  for (let i = 0; i < networks.length; i++) {\n    const network = networks[i];\n    // Null! We do not know our network; bail.\n    if (network == null) {\n      return null;\n    }\n    if (result) {\n      // Make sure the network matches the previous networks\n      if (!(result.name === network.name && result.chainId === network.chainId && (result.ensAddress === network.ensAddress || result.ensAddress == null && network.ensAddress == null))) {\n        logger.throwArgumentError(\"provider mismatch\", \"networks\", networks);\n      }\n    } else {\n      result = network;\n    }\n  }\n  return result;\n}\nfunction median(values, maxDelta) {\n  values = values.slice().sort();\n  const middle = Math.floor(values.length / 2);\n  // Odd length; take the middle\n  if (values.length % 2) {\n    return values[middle];\n  }\n  // Even length; take the average of the two middle\n  const a = values[middle - 1],\n    b = values[middle];\n  if (maxDelta != null && Math.abs(a - b) > maxDelta) {\n    return null;\n  }\n  return (a + b) / 2;\n}\nfunction serialize(value) {\n  if (value === null) {\n    return \"null\";\n  } else if (typeof value === \"number\" || typeof value === \"boolean\") {\n    return JSON.stringify(value);\n  } else if (typeof value === \"string\") {\n    return value;\n  } else if (BigNumber.isBigNumber(value)) {\n    return value.toString();\n  } else if (Array.isArray(value)) {\n    return JSON.stringify(value.map(i => serialize(i)));\n  } else if (typeof value === \"object\") {\n    const keys = Object.keys(value);\n    keys.sort();\n    return \"{\" + keys.map(key => {\n      let v = value[key];\n      if (typeof v === \"function\") {\n        v = \"[function]\";\n      } else {\n        v = serialize(v);\n      }\n      return JSON.stringify(key) + \":\" + v;\n    }).join(\",\") + \"}\";\n  }\n  throw new Error(\"unknown value type: \" + typeof value);\n}\n// Next request ID to use for emitting debug info\nlet nextRid = 1;\n;\nfunction stall(duration) {\n  let cancel = null;\n  let timer = null;\n  let promise = new Promise(resolve => {\n    cancel = function () {\n      if (timer) {\n        clearTimeout(timer);\n        timer = null;\n      }\n      resolve();\n    };\n    timer = setTimeout(cancel, duration);\n  });\n  const wait = func => {\n    promise = promise.then(func);\n    return promise;\n  };\n  function getPromise() {\n    return promise;\n  }\n  return {\n    cancel,\n    getPromise,\n    wait\n  };\n}\nconst ForwardErrors = [Logger.errors.CALL_EXCEPTION, Logger.errors.INSUFFICIENT_FUNDS, Logger.errors.NONCE_EXPIRED, Logger.errors.REPLACEMENT_UNDERPRICED, Logger.errors.UNPREDICTABLE_GAS_LIMIT];\nconst ForwardProperties = [\"address\", \"args\", \"errorArgs\", \"errorSignature\", \"method\", \"transaction\"];\n;\nfunction exposeDebugConfig(config, now) {\n  const result = {\n    weight: config.weight\n  };\n  Object.defineProperty(result, \"provider\", {\n    get: () => config.provider\n  });\n  if (config.start) {\n    result.start = config.start;\n  }\n  if (now) {\n    result.duration = now - config.start;\n  }\n  if (config.done) {\n    if (config.error) {\n      result.error = config.error;\n    } else {\n      result.result = config.result || null;\n    }\n  }\n  return result;\n}\nfunction normalizedTally(normalize, quorum) {\n  return function (configs) {\n    // Count the votes for each result\n    const tally = {};\n    configs.forEach(c => {\n      const value = normalize(c.result);\n      if (!tally[value]) {\n        tally[value] = {\n          count: 0,\n          result: c.result\n        };\n      }\n      tally[value].count++;\n    });\n    // Check for a quorum on any given result\n    const keys = Object.keys(tally);\n    for (let i = 0; i < keys.length; i++) {\n      const check = tally[keys[i]];\n      if (check.count >= quorum) {\n        return check.result;\n      }\n    }\n    // No quroum\n    return undefined;\n  };\n}\nfunction getProcessFunc(provider, method, params) {\n  let normalize = serialize;\n  switch (method) {\n    case \"getBlockNumber\":\n      // Return the median value, unless there is (median + 1) is also\n      // present, in which case that is probably true and the median\n      // is going to be stale soon. In the event of a malicious node,\n      // the lie will be true soon enough.\n      return function (configs) {\n        const values = configs.map(c => c.result);\n        // Get the median block number\n        let blockNumber = median(configs.map(c => c.result), 2);\n        if (blockNumber == null) {\n          return undefined;\n        }\n        blockNumber = Math.ceil(blockNumber);\n        // If the next block height is present, its prolly safe to use\n        if (values.indexOf(blockNumber + 1) >= 0) {\n          blockNumber++;\n        }\n        // Don't ever roll back the blockNumber\n        if (blockNumber >= provider._highestBlockNumber) {\n          provider._highestBlockNumber = blockNumber;\n        }\n        return provider._highestBlockNumber;\n      };\n    case \"getGasPrice\":\n      // Return the middle (round index up) value, similar to median\n      // but do not average even entries and choose the higher.\n      // Malicious actors must compromise 50% of the nodes to lie.\n      return function (configs) {\n        const values = configs.map(c => c.result);\n        values.sort();\n        return values[Math.floor(values.length / 2)];\n      };\n    case \"getEtherPrice\":\n      // Returns the median price. Malicious actors must compromise at\n      // least 50% of the nodes to lie (in a meaningful way).\n      return function (configs) {\n        return median(configs.map(c => c.result));\n      };\n    // No additional normalizing required; serialize is enough\n    case \"getBalance\":\n    case \"getTransactionCount\":\n    case \"getCode\":\n    case \"getStorageAt\":\n    case \"call\":\n    case \"estimateGas\":\n    case \"getLogs\":\n      break;\n    // We drop the confirmations from transactions as it is approximate\n    case \"getTransaction\":\n    case \"getTransactionReceipt\":\n      normalize = function (tx) {\n        if (tx == null) {\n          return null;\n        }\n        tx = shallowCopy(tx);\n        tx.confirmations = -1;\n        return serialize(tx);\n      };\n      break;\n    // We drop the confirmations from transactions as it is approximate\n    case \"getBlock\":\n      // We drop the confirmations from transactions as it is approximate\n      if (params.includeTransactions) {\n        normalize = function (block) {\n          if (block == null) {\n            return null;\n          }\n          block = shallowCopy(block);\n          block.transactions = block.transactions.map(tx => {\n            tx = shallowCopy(tx);\n            tx.confirmations = -1;\n            return tx;\n          });\n          return serialize(block);\n        };\n      } else {\n        normalize = function (block) {\n          if (block == null) {\n            return null;\n          }\n          return serialize(block);\n        };\n      }\n      break;\n    default:\n      throw new Error(\"unknown method: \" + method);\n  }\n  // Return the result if and only if the expected quorum is\n  // satisfied and agreed upon for the final result.\n  return normalizedTally(normalize, provider.quorum);\n}\n// If we are doing a blockTag query, we need to make sure the backend is\n// caught up to the FallbackProvider, before sending a request to it.\nfunction waitForSync(config, blockNumber) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const provider = config.provider;\n    if (provider.blockNumber != null && provider.blockNumber >= blockNumber || blockNumber === -1) {\n      return provider;\n    }\n    return poll(() => {\n      return new Promise((resolve, reject) => {\n        setTimeout(function () {\n          // We are synced\n          if (provider.blockNumber >= blockNumber) {\n            return resolve(provider);\n          }\n          // We're done; just quit\n          if (config.cancelled) {\n            return resolve(null);\n          }\n          // Try again, next block\n          return resolve(undefined);\n        }, 0);\n      });\n    }, {\n      oncePoll: provider\n    });\n  });\n}\nfunction getRunner(config, currentBlockNumber, method, params) {\n  return __awaiter(this, void 0, void 0, function* () {\n    let provider = config.provider;\n    switch (method) {\n      case \"getBlockNumber\":\n      case \"getGasPrice\":\n        return provider[method]();\n      case \"getEtherPrice\":\n        if (provider.getEtherPrice) {\n          return provider.getEtherPrice();\n        }\n        break;\n      case \"getBalance\":\n      case \"getTransactionCount\":\n      case \"getCode\":\n        if (params.blockTag && isHexString(params.blockTag)) {\n          provider = yield waitForSync(config, currentBlockNumber);\n        }\n        return provider[method](params.address, params.blockTag || \"latest\");\n      case \"getStorageAt\":\n        if (params.blockTag && isHexString(params.blockTag)) {\n          provider = yield waitForSync(config, currentBlockNumber);\n        }\n        return provider.getStorageAt(params.address, params.position, params.blockTag || \"latest\");\n      case \"getBlock\":\n        if (params.blockTag && isHexString(params.blockTag)) {\n          provider = yield waitForSync(config, currentBlockNumber);\n        }\n        return provider[params.includeTransactions ? \"getBlockWithTransactions\" : \"getBlock\"](params.blockTag || params.blockHash);\n      case \"call\":\n      case \"estimateGas\":\n        if (params.blockTag && isHexString(params.blockTag)) {\n          provider = yield waitForSync(config, currentBlockNumber);\n        }\n        if (method === \"call\" && params.blockTag) {\n          return provider[method](params.transaction, params.blockTag);\n        }\n        return provider[method](params.transaction);\n      case \"getTransaction\":\n      case \"getTransactionReceipt\":\n        return provider[method](params.transactionHash);\n      case \"getLogs\":\n        {\n          let filter = params.filter;\n          if (filter.fromBlock && isHexString(filter.fromBlock) || filter.toBlock && isHexString(filter.toBlock)) {\n            provider = yield waitForSync(config, currentBlockNumber);\n          }\n          return provider.getLogs(filter);\n        }\n    }\n    return logger.throwError(\"unknown method error\", Logger.errors.UNKNOWN_ERROR, {\n      method: method,\n      params: params\n    });\n  });\n}\nexport class FallbackProvider extends BaseProvider {\n  constructor(providers, quorum) {\n    if (providers.length === 0) {\n      logger.throwArgumentError(\"missing providers\", \"providers\", providers);\n    }\n    const providerConfigs = providers.map((configOrProvider, index) => {\n      if (Provider.isProvider(configOrProvider)) {\n        const stallTimeout = isCommunityResource(configOrProvider) ? 2000 : 750;\n        const priority = 1;\n        return Object.freeze({\n          provider: configOrProvider,\n          weight: 1,\n          stallTimeout,\n          priority\n        });\n      }\n      const config = shallowCopy(configOrProvider);\n      if (config.priority == null) {\n        config.priority = 1;\n      }\n      if (config.stallTimeout == null) {\n        config.stallTimeout = isCommunityResource(configOrProvider) ? 2000 : 750;\n      }\n      if (config.weight == null) {\n        config.weight = 1;\n      }\n      const weight = config.weight;\n      if (weight % 1 || weight > 512 || weight < 1) {\n        logger.throwArgumentError(\"invalid weight; must be integer in [1, 512]\", `providers[${index}].weight`, weight);\n      }\n      return Object.freeze(config);\n    });\n    const total = providerConfigs.reduce((accum, c) => accum + c.weight, 0);\n    if (quorum == null) {\n      quorum = total / 2;\n    } else if (quorum > total) {\n      logger.throwArgumentError(\"quorum will always fail; larger than total weight\", \"quorum\", quorum);\n    }\n    // Are all providers' networks are known\n    let networkOrReady = checkNetworks(providerConfigs.map(c => c.provider.network));\n    // Not all networks are known; we must stall\n    if (networkOrReady == null) {\n      networkOrReady = new Promise((resolve, reject) => {\n        setTimeout(() => {\n          this.detectNetwork().then(resolve, reject);\n        }, 0);\n      });\n    }\n    super(networkOrReady);\n    // Preserve a copy, so we do not get mutated\n    defineReadOnly(this, \"providerConfigs\", Object.freeze(providerConfigs));\n    defineReadOnly(this, \"quorum\", quorum);\n    this._highestBlockNumber = -1;\n  }\n  detectNetwork() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const networks = yield Promise.all(this.providerConfigs.map(c => c.provider.getNetwork()));\n      return checkNetworks(networks);\n    });\n  }\n  perform(method, params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Sending transactions is special; always broadcast it to all backends\n      if (method === \"sendTransaction\") {\n        const results = yield Promise.all(this.providerConfigs.map(c => {\n          return c.provider.sendTransaction(params.signedTransaction).then(result => {\n            return result.hash;\n          }, error => {\n            return error;\n          });\n        }));\n        // Any success is good enough (other errors are likely \"already seen\" errors\n        for (let i = 0; i < results.length; i++) {\n          const result = results[i];\n          if (typeof result === \"string\") {\n            return result;\n          }\n        }\n        // They were all an error; pick the first error\n        throw results[0];\n      }\n      // We need to make sure we are in sync with our backends, so we need\n      // to know this before we can make a lot of calls\n      if (this._highestBlockNumber === -1 && method !== \"getBlockNumber\") {\n        yield this.getBlockNumber();\n      }\n      const processFunc = getProcessFunc(this, method, params);\n      // Shuffle the providers and then sort them by their priority; we\n      // shallowCopy them since we will store the result in them too\n      const configs = shuffled(this.providerConfigs.map(shallowCopy));\n      configs.sort((a, b) => a.priority - b.priority);\n      const currentBlockNumber = this._highestBlockNumber;\n      let i = 0;\n      let first = true;\n      while (true) {\n        const t0 = now();\n        // Compute the inflight weight (exclude anything past)\n        let inflightWeight = configs.filter(c => c.runner && t0 - c.start < c.stallTimeout).reduce((accum, c) => accum + c.weight, 0);\n        // Start running enough to meet quorum\n        while (inflightWeight < this.quorum && i < configs.length) {\n          const config = configs[i++];\n          const rid = nextRid++;\n          config.start = now();\n          config.staller = stall(config.stallTimeout);\n          config.staller.wait(() => {\n            config.staller = null;\n          });\n          config.runner = getRunner(config, currentBlockNumber, method, params).then(result => {\n            config.done = true;\n            config.result = result;\n            if (this.listenerCount(\"debug\")) {\n              this.emit(\"debug\", {\n                action: \"request\",\n                rid: rid,\n                backend: exposeDebugConfig(config, now()),\n                request: {\n                  method: method,\n                  params: deepCopy(params)\n                },\n                provider: this\n              });\n            }\n          }, error => {\n            config.done = true;\n            config.error = error;\n            if (this.listenerCount(\"debug\")) {\n              this.emit(\"debug\", {\n                action: \"request\",\n                rid: rid,\n                backend: exposeDebugConfig(config, now()),\n                request: {\n                  method: method,\n                  params: deepCopy(params)\n                },\n                provider: this\n              });\n            }\n          });\n          if (this.listenerCount(\"debug\")) {\n            this.emit(\"debug\", {\n              action: \"request\",\n              rid: rid,\n              backend: exposeDebugConfig(config, null),\n              request: {\n                method: method,\n                params: deepCopy(params)\n              },\n              provider: this\n            });\n          }\n          inflightWeight += config.weight;\n        }\n        // Wait for anything meaningful to finish or stall out\n        const waiting = [];\n        configs.forEach(c => {\n          if (c.done || !c.runner) {\n            return;\n          }\n          waiting.push(c.runner);\n          if (c.staller) {\n            waiting.push(c.staller.getPromise());\n          }\n        });\n        if (waiting.length) {\n          yield Promise.race(waiting);\n        }\n        // Check the quorum and process the results; the process function\n        // may additionally decide the quorum is not met\n        const results = configs.filter(c => c.done && c.error == null);\n        if (results.length >= this.quorum) {\n          const result = processFunc(results);\n          if (result !== undefined) {\n            // Shut down any stallers\n            configs.forEach(c => {\n              if (c.staller) {\n                c.staller.cancel();\n              }\n              c.cancelled = true;\n            });\n            return result;\n          }\n          if (!first) {\n            yield stall(100).getPromise();\n          }\n          first = false;\n        }\n        // No result, check for errors that should be forwarded\n        const errors = configs.reduce((accum, c) => {\n          if (!c.done || c.error == null) {\n            return accum;\n          }\n          const code = c.error.code;\n          if (ForwardErrors.indexOf(code) >= 0) {\n            if (!accum[code]) {\n              accum[code] = {\n                error: c.error,\n                weight: 0\n              };\n            }\n            accum[code].weight += c.weight;\n          }\n          return accum;\n        }, {});\n        Object.keys(errors).forEach(errorCode => {\n          const tally = errors[errorCode];\n          if (tally.weight < this.quorum) {\n            return;\n          }\n          // Shut down any stallers\n          configs.forEach(c => {\n            if (c.staller) {\n              c.staller.cancel();\n            }\n            c.cancelled = true;\n          });\n          const e = tally.error;\n          const props = {};\n          ForwardProperties.forEach(name => {\n            if (e[name] == null) {\n              return;\n            }\n            props[name] = e[name];\n          });\n          logger.throwError(e.reason || e.message, errorCode, props);\n        });\n        // All configs have run to completion; we will never get more data\n        if (configs.filter(c => !c.done).length === 0) {\n          break;\n        }\n      }\n      // Shut down any stallers; shouldn't be any\n      configs.forEach(c => {\n        if (c.staller) {\n          c.staller.cancel();\n        }\n        c.cancelled = true;\n      });\n      return logger.throwError(\"failed to meet quorum\", Logger.errors.SERVER_ERROR, {\n        method: method,\n        params: params,\n        //results: configs.map((c) => c.result),\n        //errors: configs.map((c) => c.error),\n        results: configs.map(c => exposeDebugConfig(c)),\n        provider: this\n      });\n    });\n  }\n}","map":{"version":3,"sources":["../src.ts/fallback-provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { isHexString } from \"@ethersproject/bytes\";\nimport { deepCopy, defineReadOnly, shallowCopy } from \"@ethersproject/properties\";\nimport { shuffled } from \"@ethersproject/random\";\nimport { poll } from \"@ethersproject/web\";\nimport { BaseProvider } from \"./base-provider\";\nimport { isCommunityResource } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nfunction now() { return (new Date()).getTime(); }\n// Returns to network as long as all agree, or null if any is null.\n// Throws an error if any two networks do not match.\nfunction checkNetworks(networks) {\n    let result = null;\n    for (let i = 0; i < networks.length; i++) {\n        const network = networks[i];\n        // Null! We do not know our network; bail.\n        if (network == null) {\n            return null;\n        }\n        if (result) {\n            // Make sure the network matches the previous networks\n            if (!(result.name === network.name && result.chainId === network.chainId &&\n                ((result.ensAddress === network.ensAddress) || (result.ensAddress == null && network.ensAddress == null)))) {\n                logger.throwArgumentError(\"provider mismatch\", \"networks\", networks);\n            }\n        }\n        else {\n            result = network;\n        }\n    }\n    return result;\n}\nfunction median(values, maxDelta) {\n    values = values.slice().sort();\n    const middle = Math.floor(values.length / 2);\n    // Odd length; take the middle\n    if (values.length % 2) {\n        return values[middle];\n    }\n    // Even length; take the average of the two middle\n    const a = values[middle - 1], b = values[middle];\n    if (maxDelta != null && Math.abs(a - b) > maxDelta) {\n        return null;\n    }\n    return (a + b) / 2;\n}\nfunction serialize(value) {\n    if (value === null) {\n        return \"null\";\n    }\n    else if (typeof (value) === \"number\" || typeof (value) === \"boolean\") {\n        return JSON.stringify(value);\n    }\n    else if (typeof (value) === \"string\") {\n        return value;\n    }\n    else if (BigNumber.isBigNumber(value)) {\n        return value.toString();\n    }\n    else if (Array.isArray(value)) {\n        return JSON.stringify(value.map((i) => serialize(i)));\n    }\n    else if (typeof (value) === \"object\") {\n        const keys = Object.keys(value);\n        keys.sort();\n        return \"{\" + keys.map((key) => {\n            let v = value[key];\n            if (typeof (v) === \"function\") {\n                v = \"[function]\";\n            }\n            else {\n                v = serialize(v);\n            }\n            return JSON.stringify(key) + \":\" + v;\n        }).join(\",\") + \"}\";\n    }\n    throw new Error(\"unknown value type: \" + typeof (value));\n}\n// Next request ID to use for emitting debug info\nlet nextRid = 1;\n;\nfunction stall(duration) {\n    let cancel = null;\n    let timer = null;\n    let promise = (new Promise((resolve) => {\n        cancel = function () {\n            if (timer) {\n                clearTimeout(timer);\n                timer = null;\n            }\n            resolve();\n        };\n        timer = setTimeout(cancel, duration);\n    }));\n    const wait = (func) => {\n        promise = promise.then(func);\n        return promise;\n    };\n    function getPromise() {\n        return promise;\n    }\n    return { cancel, getPromise, wait };\n}\nconst ForwardErrors = [\n    Logger.errors.CALL_EXCEPTION,\n    Logger.errors.INSUFFICIENT_FUNDS,\n    Logger.errors.NONCE_EXPIRED,\n    Logger.errors.REPLACEMENT_UNDERPRICED,\n    Logger.errors.UNPREDICTABLE_GAS_LIMIT\n];\nconst ForwardProperties = [\n    \"address\",\n    \"args\",\n    \"errorArgs\",\n    \"errorSignature\",\n    \"method\",\n    \"transaction\",\n];\n;\nfunction exposeDebugConfig(config, now) {\n    const result = {\n        weight: config.weight\n    };\n    Object.defineProperty(result, \"provider\", { get: () => config.provider });\n    if (config.start) {\n        result.start = config.start;\n    }\n    if (now) {\n        result.duration = (now - config.start);\n    }\n    if (config.done) {\n        if (config.error) {\n            result.error = config.error;\n        }\n        else {\n            result.result = config.result || null;\n        }\n    }\n    return result;\n}\nfunction normalizedTally(normalize, quorum) {\n    return function (configs) {\n        // Count the votes for each result\n        const tally = {};\n        configs.forEach((c) => {\n            const value = normalize(c.result);\n            if (!tally[value]) {\n                tally[value] = { count: 0, result: c.result };\n            }\n            tally[value].count++;\n        });\n        // Check for a quorum on any given result\n        const keys = Object.keys(tally);\n        for (let i = 0; i < keys.length; i++) {\n            const check = tally[keys[i]];\n            if (check.count >= quorum) {\n                return check.result;\n            }\n        }\n        // No quroum\n        return undefined;\n    };\n}\nfunction getProcessFunc(provider, method, params) {\n    let normalize = serialize;\n    switch (method) {\n        case \"getBlockNumber\":\n            // Return the median value, unless there is (median + 1) is also\n            // present, in which case that is probably true and the median\n            // is going to be stale soon. In the event of a malicious node,\n            // the lie will be true soon enough.\n            return function (configs) {\n                const values = configs.map((c) => c.result);\n                // Get the median block number\n                let blockNumber = median(configs.map((c) => c.result), 2);\n                if (blockNumber == null) {\n                    return undefined;\n                }\n                blockNumber = Math.ceil(blockNumber);\n                // If the next block height is present, its prolly safe to use\n                if (values.indexOf(blockNumber + 1) >= 0) {\n                    blockNumber++;\n                }\n                // Don't ever roll back the blockNumber\n                if (blockNumber >= provider._highestBlockNumber) {\n                    provider._highestBlockNumber = blockNumber;\n                }\n                return provider._highestBlockNumber;\n            };\n        case \"getGasPrice\":\n            // Return the middle (round index up) value, similar to median\n            // but do not average even entries and choose the higher.\n            // Malicious actors must compromise 50% of the nodes to lie.\n            return function (configs) {\n                const values = configs.map((c) => c.result);\n                values.sort();\n                return values[Math.floor(values.length / 2)];\n            };\n        case \"getEtherPrice\":\n            // Returns the median price. Malicious actors must compromise at\n            // least 50% of the nodes to lie (in a meaningful way).\n            return function (configs) {\n                return median(configs.map((c) => c.result));\n            };\n        // No additional normalizing required; serialize is enough\n        case \"getBalance\":\n        case \"getTransactionCount\":\n        case \"getCode\":\n        case \"getStorageAt\":\n        case \"call\":\n        case \"estimateGas\":\n        case \"getLogs\":\n            break;\n        // We drop the confirmations from transactions as it is approximate\n        case \"getTransaction\":\n        case \"getTransactionReceipt\":\n            normalize = function (tx) {\n                if (tx == null) {\n                    return null;\n                }\n                tx = shallowCopy(tx);\n                tx.confirmations = -1;\n                return serialize(tx);\n            };\n            break;\n        // We drop the confirmations from transactions as it is approximate\n        case \"getBlock\":\n            // We drop the confirmations from transactions as it is approximate\n            if (params.includeTransactions) {\n                normalize = function (block) {\n                    if (block == null) {\n                        return null;\n                    }\n                    block = shallowCopy(block);\n                    block.transactions = block.transactions.map((tx) => {\n                        tx = shallowCopy(tx);\n                        tx.confirmations = -1;\n                        return tx;\n                    });\n                    return serialize(block);\n                };\n            }\n            else {\n                normalize = function (block) {\n                    if (block == null) {\n                        return null;\n                    }\n                    return serialize(block);\n                };\n            }\n            break;\n        default:\n            throw new Error(\"unknown method: \" + method);\n    }\n    // Return the result if and only if the expected quorum is\n    // satisfied and agreed upon for the final result.\n    return normalizedTally(normalize, provider.quorum);\n}\n// If we are doing a blockTag query, we need to make sure the backend is\n// caught up to the FallbackProvider, before sending a request to it.\nfunction waitForSync(config, blockNumber) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const provider = (config.provider);\n        if ((provider.blockNumber != null && provider.blockNumber >= blockNumber) || blockNumber === -1) {\n            return provider;\n        }\n        return poll(() => {\n            return new Promise((resolve, reject) => {\n                setTimeout(function () {\n                    // We are synced\n                    if (provider.blockNumber >= blockNumber) {\n                        return resolve(provider);\n                    }\n                    // We're done; just quit\n                    if (config.cancelled) {\n                        return resolve(null);\n                    }\n                    // Try again, next block\n                    return resolve(undefined);\n                }, 0);\n            });\n        }, { oncePoll: provider });\n    });\n}\nfunction getRunner(config, currentBlockNumber, method, params) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let provider = config.provider;\n        switch (method) {\n            case \"getBlockNumber\":\n            case \"getGasPrice\":\n                return provider[method]();\n            case \"getEtherPrice\":\n                if (provider.getEtherPrice) {\n                    return provider.getEtherPrice();\n                }\n                break;\n            case \"getBalance\":\n            case \"getTransactionCount\":\n            case \"getCode\":\n                if (params.blockTag && isHexString(params.blockTag)) {\n                    provider = yield waitForSync(config, currentBlockNumber);\n                }\n                return provider[method](params.address, params.blockTag || \"latest\");\n            case \"getStorageAt\":\n                if (params.blockTag && isHexString(params.blockTag)) {\n                    provider = yield waitForSync(config, currentBlockNumber);\n                }\n                return provider.getStorageAt(params.address, params.position, params.blockTag || \"latest\");\n            case \"getBlock\":\n                if (params.blockTag && isHexString(params.blockTag)) {\n                    provider = yield waitForSync(config, currentBlockNumber);\n                }\n                return provider[(params.includeTransactions ? \"getBlockWithTransactions\" : \"getBlock\")](params.blockTag || params.blockHash);\n            case \"call\":\n            case \"estimateGas\":\n                if (params.blockTag && isHexString(params.blockTag)) {\n                    provider = yield waitForSync(config, currentBlockNumber);\n                }\n                if (method === \"call\" && params.blockTag) {\n                    return provider[method](params.transaction, params.blockTag);\n                }\n                return provider[method](params.transaction);\n            case \"getTransaction\":\n            case \"getTransactionReceipt\":\n                return provider[method](params.transactionHash);\n            case \"getLogs\": {\n                let filter = params.filter;\n                if ((filter.fromBlock && isHexString(filter.fromBlock)) || (filter.toBlock && isHexString(filter.toBlock))) {\n                    provider = yield waitForSync(config, currentBlockNumber);\n                }\n                return provider.getLogs(filter);\n            }\n        }\n        return logger.throwError(\"unknown method error\", Logger.errors.UNKNOWN_ERROR, {\n            method: method,\n            params: params\n        });\n    });\n}\nexport class FallbackProvider extends BaseProvider {\n    constructor(providers, quorum) {\n        if (providers.length === 0) {\n            logger.throwArgumentError(\"missing providers\", \"providers\", providers);\n        }\n        const providerConfigs = providers.map((configOrProvider, index) => {\n            if (Provider.isProvider(configOrProvider)) {\n                const stallTimeout = isCommunityResource(configOrProvider) ? 2000 : 750;\n                const priority = 1;\n                return Object.freeze({ provider: configOrProvider, weight: 1, stallTimeout, priority });\n            }\n            const config = shallowCopy(configOrProvider);\n            if (config.priority == null) {\n                config.priority = 1;\n            }\n            if (config.stallTimeout == null) {\n                config.stallTimeout = isCommunityResource(configOrProvider) ? 2000 : 750;\n            }\n            if (config.weight == null) {\n                config.weight = 1;\n            }\n            const weight = config.weight;\n            if (weight % 1 || weight > 512 || weight < 1) {\n                logger.throwArgumentError(\"invalid weight; must be integer in [1, 512]\", `providers[${index}].weight`, weight);\n            }\n            return Object.freeze(config);\n        });\n        const total = providerConfigs.reduce((accum, c) => (accum + c.weight), 0);\n        if (quorum == null) {\n            quorum = total / 2;\n        }\n        else if (quorum > total) {\n            logger.throwArgumentError(\"quorum will always fail; larger than total weight\", \"quorum\", quorum);\n        }\n        // Are all providers' networks are known\n        let networkOrReady = checkNetworks(providerConfigs.map((c) => (c.provider).network));\n        // Not all networks are known; we must stall\n        if (networkOrReady == null) {\n            networkOrReady = new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    this.detectNetwork().then(resolve, reject);\n                }, 0);\n            });\n        }\n        super(networkOrReady);\n        // Preserve a copy, so we do not get mutated\n        defineReadOnly(this, \"providerConfigs\", Object.freeze(providerConfigs));\n        defineReadOnly(this, \"quorum\", quorum);\n        this._highestBlockNumber = -1;\n    }\n    detectNetwork() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const networks = yield Promise.all(this.providerConfigs.map((c) => c.provider.getNetwork()));\n            return checkNetworks(networks);\n        });\n    }\n    perform(method, params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Sending transactions is special; always broadcast it to all backends\n            if (method === \"sendTransaction\") {\n                const results = yield Promise.all(this.providerConfigs.map((c) => {\n                    return c.provider.sendTransaction(params.signedTransaction).then((result) => {\n                        return result.hash;\n                    }, (error) => {\n                        return error;\n                    });\n                }));\n                // Any success is good enough (other errors are likely \"already seen\" errors\n                for (let i = 0; i < results.length; i++) {\n                    const result = results[i];\n                    if (typeof (result) === \"string\") {\n                        return result;\n                    }\n                }\n                // They were all an error; pick the first error\n                throw results[0];\n            }\n            // We need to make sure we are in sync with our backends, so we need\n            // to know this before we can make a lot of calls\n            if (this._highestBlockNumber === -1 && method !== \"getBlockNumber\") {\n                yield this.getBlockNumber();\n            }\n            const processFunc = getProcessFunc(this, method, params);\n            // Shuffle the providers and then sort them by their priority; we\n            // shallowCopy them since we will store the result in them too\n            const configs = shuffled(this.providerConfigs.map(shallowCopy));\n            configs.sort((a, b) => (a.priority - b.priority));\n            const currentBlockNumber = this._highestBlockNumber;\n            let i = 0;\n            let first = true;\n            while (true) {\n                const t0 = now();\n                // Compute the inflight weight (exclude anything past)\n                let inflightWeight = configs.filter((c) => (c.runner && ((t0 - c.start) < c.stallTimeout)))\n                    .reduce((accum, c) => (accum + c.weight), 0);\n                // Start running enough to meet quorum\n                while (inflightWeight < this.quorum && i < configs.length) {\n                    const config = configs[i++];\n                    const rid = nextRid++;\n                    config.start = now();\n                    config.staller = stall(config.stallTimeout);\n                    config.staller.wait(() => { config.staller = null; });\n                    config.runner = getRunner(config, currentBlockNumber, method, params).then((result) => {\n                        config.done = true;\n                        config.result = result;\n                        if (this.listenerCount(\"debug\")) {\n                            this.emit(\"debug\", {\n                                action: \"request\",\n                                rid: rid,\n                                backend: exposeDebugConfig(config, now()),\n                                request: { method: method, params: deepCopy(params) },\n                                provider: this\n                            });\n                        }\n                    }, (error) => {\n                        config.done = true;\n                        config.error = error;\n                        if (this.listenerCount(\"debug\")) {\n                            this.emit(\"debug\", {\n                                action: \"request\",\n                                rid: rid,\n                                backend: exposeDebugConfig(config, now()),\n                                request: { method: method, params: deepCopy(params) },\n                                provider: this\n                            });\n                        }\n                    });\n                    if (this.listenerCount(\"debug\")) {\n                        this.emit(\"debug\", {\n                            action: \"request\",\n                            rid: rid,\n                            backend: exposeDebugConfig(config, null),\n                            request: { method: method, params: deepCopy(params) },\n                            provider: this\n                        });\n                    }\n                    inflightWeight += config.weight;\n                }\n                // Wait for anything meaningful to finish or stall out\n                const waiting = [];\n                configs.forEach((c) => {\n                    if (c.done || !c.runner) {\n                        return;\n                    }\n                    waiting.push(c.runner);\n                    if (c.staller) {\n                        waiting.push(c.staller.getPromise());\n                    }\n                });\n                if (waiting.length) {\n                    yield Promise.race(waiting);\n                }\n                // Check the quorum and process the results; the process function\n                // may additionally decide the quorum is not met\n                const results = configs.filter((c) => (c.done && c.error == null));\n                if (results.length >= this.quorum) {\n                    const result = processFunc(results);\n                    if (result !== undefined) {\n                        // Shut down any stallers\n                        configs.forEach(c => {\n                            if (c.staller) {\n                                c.staller.cancel();\n                            }\n                            c.cancelled = true;\n                        });\n                        return result;\n                    }\n                    if (!first) {\n                        yield stall(100).getPromise();\n                    }\n                    first = false;\n                }\n                // No result, check for errors that should be forwarded\n                const errors = configs.reduce((accum, c) => {\n                    if (!c.done || c.error == null) {\n                        return accum;\n                    }\n                    const code = (c.error).code;\n                    if (ForwardErrors.indexOf(code) >= 0) {\n                        if (!accum[code]) {\n                            accum[code] = { error: c.error, weight: 0 };\n                        }\n                        accum[code].weight += c.weight;\n                    }\n                    return accum;\n                }, ({}));\n                Object.keys(errors).forEach((errorCode) => {\n                    const tally = errors[errorCode];\n                    if (tally.weight < this.quorum) {\n                        return;\n                    }\n                    // Shut down any stallers\n                    configs.forEach(c => {\n                        if (c.staller) {\n                            c.staller.cancel();\n                        }\n                        c.cancelled = true;\n                    });\n                    const e = (tally.error);\n                    const props = {};\n                    ForwardProperties.forEach((name) => {\n                        if (e[name] == null) {\n                            return;\n                        }\n                        props[name] = e[name];\n                    });\n                    logger.throwError(e.reason || e.message, errorCode, props);\n                });\n                // All configs have run to completion; we will never get more data\n                if (configs.filter((c) => !c.done).length === 0) {\n                    break;\n                }\n            }\n            // Shut down any stallers; shouldn't be any\n            configs.forEach(c => {\n                if (c.staller) {\n                    c.staller.cancel();\n                }\n                c.cancelled = true;\n            });\n            return logger.throwError(\"failed to meet quorum\", Logger.errors.SERVER_ERROR, {\n                method: method,\n                params: params,\n                //results: configs.map((c) => c.result),\n                //errors: configs.map((c) => c.error),\n                results: configs.map((c) => exposeDebugConfig(c)),\n                provider: this\n            });\n        });\n    }\n}\n//# sourceMappingURL=fallback-provider.js.map"]},"metadata":{},"sourceType":"module"}