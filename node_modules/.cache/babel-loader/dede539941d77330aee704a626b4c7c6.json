{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, hexConcat, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { deepCopy, defineReadOnly, shallowCopy } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { id } from \"./id\";\nconst padding = new Uint8Array(32);\npadding.fill(0);\nconst NegativeOne = BigNumber.from(-1);\nconst Zero = BigNumber.from(0);\nconst One = BigNumber.from(1);\nconst MaxUint256 = BigNumber.from(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\nfunction hexPadRight(value) {\n  const bytes = arrayify(value);\n  const padOffset = bytes.length % 32;\n  if (padOffset) {\n    return hexConcat([bytes, padding.slice(padOffset)]);\n  }\n  return hexlify(bytes);\n}\nconst hexTrue = hexZeroPad(One.toHexString(), 32);\nconst hexFalse = hexZeroPad(Zero.toHexString(), 32);\nconst domainFieldTypes = {\n  name: \"string\",\n  version: \"string\",\n  chainId: \"uint256\",\n  verifyingContract: \"address\",\n  salt: \"bytes32\"\n};\nconst domainFieldNames = [\"name\", \"version\", \"chainId\", \"verifyingContract\", \"salt\"];\nfunction checkString(key) {\n  return function (value) {\n    if (typeof value !== \"string\") {\n      logger.throwArgumentError(`invalid domain value for ${JSON.stringify(key)}`, `domain.${key}`, value);\n    }\n    return value;\n  };\n}\nconst domainChecks = {\n  name: checkString(\"name\"),\n  version: checkString(\"version\"),\n  chainId: function (value) {\n    try {\n      return BigNumber.from(value).toString();\n    } catch (error) {}\n    return logger.throwArgumentError(`invalid domain value for \"chainId\"`, \"domain.chainId\", value);\n  },\n  verifyingContract: function (value) {\n    try {\n      return getAddress(value).toLowerCase();\n    } catch (error) {}\n    return logger.throwArgumentError(`invalid domain value \"verifyingContract\"`, \"domain.verifyingContract\", value);\n  },\n  salt: function (value) {\n    try {\n      const bytes = arrayify(value);\n      if (bytes.length !== 32) {\n        throw new Error(\"bad length\");\n      }\n      return hexlify(bytes);\n    } catch (error) {}\n    return logger.throwArgumentError(`invalid domain value \"salt\"`, \"domain.salt\", value);\n  }\n};\nfunction getBaseEncoder(type) {\n  // intXX and uintXX\n  {\n    const match = type.match(/^(u?)int(\\d*)$/);\n    if (match) {\n      const signed = match[1] === \"\";\n      const width = parseInt(match[2] || \"256\");\n      if (width % 8 !== 0 || width > 256 || match[2] && match[2] !== String(width)) {\n        logger.throwArgumentError(\"invalid numeric width\", \"type\", type);\n      }\n      const boundsUpper = MaxUint256.mask(signed ? width - 1 : width);\n      const boundsLower = signed ? boundsUpper.add(One).mul(NegativeOne) : Zero;\n      return function (value) {\n        const v = BigNumber.from(value);\n        if (v.lt(boundsLower) || v.gt(boundsUpper)) {\n          logger.throwArgumentError(`value out-of-bounds for ${type}`, \"value\", value);\n        }\n        return hexZeroPad(v.toTwos(256).toHexString(), 32);\n      };\n    }\n  }\n  // bytesXX\n  {\n    const match = type.match(/^bytes(\\d+)$/);\n    if (match) {\n      const width = parseInt(match[1]);\n      if (width === 0 || width > 32 || match[1] !== String(width)) {\n        logger.throwArgumentError(\"invalid bytes width\", \"type\", type);\n      }\n      return function (value) {\n        const bytes = arrayify(value);\n        if (bytes.length !== width) {\n          logger.throwArgumentError(`invalid length for ${type}`, \"value\", value);\n        }\n        return hexPadRight(value);\n      };\n    }\n  }\n  switch (type) {\n    case \"address\":\n      return function (value) {\n        return hexZeroPad(getAddress(value), 32);\n      };\n    case \"bool\":\n      return function (value) {\n        return !value ? hexFalse : hexTrue;\n      };\n    case \"bytes\":\n      return function (value) {\n        return keccak256(value);\n      };\n    case \"string\":\n      return function (value) {\n        return id(value);\n      };\n  }\n  return null;\n}\nfunction encodeType(name, fields) {\n  return `${name}(${fields.map(_ref => {\n    let {\n      name,\n      type\n    } = _ref;\n    return type + \" \" + name;\n  }).join(\",\")})`;\n}\nexport class TypedDataEncoder {\n  constructor(types) {\n    defineReadOnly(this, \"types\", Object.freeze(deepCopy(types)));\n    defineReadOnly(this, \"_encoderCache\", {});\n    defineReadOnly(this, \"_types\", {});\n    // Link struct types to their direct child structs\n    const links = {};\n    // Link structs to structs which contain them as a child\n    const parents = {};\n    // Link all subtypes within a given struct\n    const subtypes = {};\n    Object.keys(types).forEach(type => {\n      links[type] = {};\n      parents[type] = [];\n      subtypes[type] = {};\n    });\n    for (const name in types) {\n      const uniqueNames = {};\n      types[name].forEach(field => {\n        // Check each field has a unique name\n        if (uniqueNames[field.name]) {\n          logger.throwArgumentError(`duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name)}`, \"types\", types);\n        }\n        uniqueNames[field.name] = true;\n        // Get the base type (drop any array specifiers)\n        const baseType = field.type.match(/^([^\\x5b]*)(\\x5b|$)/)[1];\n        if (baseType === name) {\n          logger.throwArgumentError(`circular type reference to ${JSON.stringify(baseType)}`, \"types\", types);\n        }\n        // Is this a base encoding type?\n        const encoder = getBaseEncoder(baseType);\n        if (encoder) {\n          return;\n        }\n        if (!parents[baseType]) {\n          logger.throwArgumentError(`unknown type ${JSON.stringify(baseType)}`, \"types\", types);\n        }\n        // Add linkage\n        parents[baseType].push(name);\n        links[name][baseType] = true;\n      });\n    }\n    // Deduce the primary type\n    const primaryTypes = Object.keys(parents).filter(n => parents[n].length === 0);\n    if (primaryTypes.length === 0) {\n      logger.throwArgumentError(\"missing primary type\", \"types\", types);\n    } else if (primaryTypes.length > 1) {\n      logger.throwArgumentError(`ambiguous primary types or unused types: ${primaryTypes.map(t => JSON.stringify(t)).join(\", \")}`, \"types\", types);\n    }\n    defineReadOnly(this, \"primaryType\", primaryTypes[0]);\n    // Check for circular type references\n    function checkCircular(type, found) {\n      if (found[type]) {\n        logger.throwArgumentError(`circular type reference to ${JSON.stringify(type)}`, \"types\", types);\n      }\n      found[type] = true;\n      Object.keys(links[type]).forEach(child => {\n        if (!parents[child]) {\n          return;\n        }\n        // Recursively check children\n        checkCircular(child, found);\n        // Mark all ancestors as having this decendant\n        Object.keys(found).forEach(subtype => {\n          subtypes[subtype][child] = true;\n        });\n      });\n      delete found[type];\n    }\n    checkCircular(this.primaryType, {});\n    // Compute each fully describe type\n    for (const name in subtypes) {\n      const st = Object.keys(subtypes[name]);\n      st.sort();\n      this._types[name] = encodeType(name, types[name]) + st.map(t => encodeType(t, types[t])).join(\"\");\n    }\n  }\n  getEncoder(type) {\n    let encoder = this._encoderCache[type];\n    if (!encoder) {\n      encoder = this._encoderCache[type] = this._getEncoder(type);\n    }\n    return encoder;\n  }\n  _getEncoder(type) {\n    // Basic encoder type (address, bool, uint256, etc)\n    {\n      const encoder = getBaseEncoder(type);\n      if (encoder) {\n        return encoder;\n      }\n    }\n    // Array\n    const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n    if (match) {\n      const subtype = match[1];\n      const subEncoder = this.getEncoder(subtype);\n      const length = parseInt(match[3]);\n      return value => {\n        if (length >= 0 && value.length !== length) {\n          logger.throwArgumentError(\"array length mismatch; expected length ${ arrayLength }\", \"value\", value);\n        }\n        let result = value.map(subEncoder);\n        if (this._types[subtype]) {\n          result = result.map(keccak256);\n        }\n        return keccak256(hexConcat(result));\n      };\n    }\n    // Struct\n    const fields = this.types[type];\n    if (fields) {\n      const encodedType = id(this._types[type]);\n      return value => {\n        const values = fields.map(_ref2 => {\n          let {\n            name,\n            type\n          } = _ref2;\n          const result = this.getEncoder(type)(value[name]);\n          if (this._types[type]) {\n            return keccak256(result);\n          }\n          return result;\n        });\n        values.unshift(encodedType);\n        return hexConcat(values);\n      };\n    }\n    return logger.throwArgumentError(`unknown type: ${type}`, \"type\", type);\n  }\n  encodeType(name) {\n    const result = this._types[name];\n    if (!result) {\n      logger.throwArgumentError(`unknown type: ${JSON.stringify(name)}`, \"name\", name);\n    }\n    return result;\n  }\n  encodeData(type, value) {\n    return this.getEncoder(type)(value);\n  }\n  hashStruct(name, value) {\n    return keccak256(this.encodeData(name, value));\n  }\n  encode(value) {\n    return this.encodeData(this.primaryType, value);\n  }\n  hash(value) {\n    return this.hashStruct(this.primaryType, value);\n  }\n  _visit(type, value, callback) {\n    // Basic encoder type (address, bool, uint256, etc)\n    {\n      const encoder = getBaseEncoder(type);\n      if (encoder) {\n        return callback(type, value);\n      }\n    }\n    // Array\n    const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n    if (match) {\n      const subtype = match[1];\n      const length = parseInt(match[3]);\n      if (length >= 0 && value.length !== length) {\n        logger.throwArgumentError(\"array length mismatch; expected length ${ arrayLength }\", \"value\", value);\n      }\n      return value.map(v => this._visit(subtype, v, callback));\n    }\n    // Struct\n    const fields = this.types[type];\n    if (fields) {\n      return fields.reduce((accum, _ref3) => {\n        let {\n          name,\n          type\n        } = _ref3;\n        accum[name] = this._visit(type, value[name], callback);\n        return accum;\n      }, {});\n    }\n    return logger.throwArgumentError(`unknown type: ${type}`, \"type\", type);\n  }\n  visit(value, callback) {\n    return this._visit(this.primaryType, value, callback);\n  }\n  static from(types) {\n    return new TypedDataEncoder(types);\n  }\n  static getPrimaryType(types) {\n    return TypedDataEncoder.from(types).primaryType;\n  }\n  static hashStruct(name, types, value) {\n    return TypedDataEncoder.from(types).hashStruct(name, value);\n  }\n  static hashDomain(domain) {\n    const domainFields = [];\n    for (const name in domain) {\n      const type = domainFieldTypes[name];\n      if (!type) {\n        logger.throwArgumentError(`invalid typed-data domain key: ${JSON.stringify(name)}`, \"domain\", domain);\n      }\n      domainFields.push({\n        name,\n        type\n      });\n    }\n    domainFields.sort((a, b) => {\n      return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);\n    });\n    return TypedDataEncoder.hashStruct(\"EIP712Domain\", {\n      EIP712Domain: domainFields\n    }, domain);\n  }\n  static encode(domain, types, value) {\n    return hexConcat([\"0x1901\", TypedDataEncoder.hashDomain(domain), TypedDataEncoder.from(types).hash(value)]);\n  }\n  static hash(domain, types, value) {\n    return keccak256(TypedDataEncoder.encode(domain, types, value));\n  }\n  // Replaces all address types with ENS names with their looked up address\n  static resolveNames(domain, types, value, resolveName) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Make a copy to isolate it from the object passed in\n      domain = shallowCopy(domain);\n      // Look up all ENS names\n      const ensCache = {};\n      // Do we need to look up the domain's verifyingContract?\n      if (domain.verifyingContract && !isHexString(domain.verifyingContract, 20)) {\n        ensCache[domain.verifyingContract] = \"0x\";\n      }\n      // We are going to use the encoder to visit all the base values\n      const encoder = TypedDataEncoder.from(types);\n      // Get a list of all the addresses\n      encoder.visit(value, (type, value) => {\n        if (type === \"address\" && !isHexString(value, 20)) {\n          ensCache[value] = \"0x\";\n        }\n        return value;\n      });\n      // Lookup each name\n      for (const name in ensCache) {\n        ensCache[name] = yield resolveName(name);\n      }\n      // Replace the domain verifyingContract if needed\n      if (domain.verifyingContract && ensCache[domain.verifyingContract]) {\n        domain.verifyingContract = ensCache[domain.verifyingContract];\n      }\n      // Replace all ENS names with their address\n      value = encoder.visit(value, (type, value) => {\n        if (type === \"address\" && ensCache[value]) {\n          return ensCache[value];\n        }\n        return value;\n      });\n      return {\n        domain,\n        value\n      };\n    });\n  }\n  static getPayload(domain, types, value) {\n    // Validate the domain fields\n    TypedDataEncoder.hashDomain(domain);\n    // Derive the EIP712Domain Struct reference type\n    const domainValues = {};\n    const domainTypes = [];\n    domainFieldNames.forEach(name => {\n      const value = domain[name];\n      if (value == null) {\n        return;\n      }\n      domainValues[name] = domainChecks[name](value);\n      domainTypes.push({\n        name,\n        type: domainFieldTypes[name]\n      });\n    });\n    const encoder = TypedDataEncoder.from(types);\n    const typesWithDomain = shallowCopy(types);\n    if (typesWithDomain.EIP712Domain) {\n      logger.throwArgumentError(\"types must not contain EIP712Domain type\", \"types.EIP712Domain\", types);\n    } else {\n      typesWithDomain.EIP712Domain = domainTypes;\n    }\n    // Validate the data structures and types\n    encoder.encode(value);\n    return {\n      types: typesWithDomain,\n      domain: domainValues,\n      primaryType: encoder.primaryType,\n      message: encoder.visit(value, (type, value) => {\n        // bytes\n        if (type.match(/^bytes(\\d*)/)) {\n          return hexlify(arrayify(value));\n        }\n        // uint or int\n        if (type.match(/^u?int/)) {\n          return BigNumber.from(value).toString();\n        }\n        switch (type) {\n          case \"address\":\n            return value.toLowerCase();\n          case \"bool\":\n            return !!value;\n          case \"string\":\n            if (typeof value !== \"string\") {\n              logger.throwArgumentError(`invalid string`, \"value\", value);\n            }\n            return value;\n        }\n        return logger.throwArgumentError(\"unsupported type\", \"type\", type);\n      })\n    };\n  }\n}","map":{"version":3,"sources":["../src.ts/typed-data.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, hexConcat, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { deepCopy, defineReadOnly, shallowCopy } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { id } from \"./id\";\nconst padding = new Uint8Array(32);\npadding.fill(0);\nconst NegativeOne = BigNumber.from(-1);\nconst Zero = BigNumber.from(0);\nconst One = BigNumber.from(1);\nconst MaxUint256 = BigNumber.from(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\nfunction hexPadRight(value) {\n    const bytes = arrayify(value);\n    const padOffset = bytes.length % 32;\n    if (padOffset) {\n        return hexConcat([bytes, padding.slice(padOffset)]);\n    }\n    return hexlify(bytes);\n}\nconst hexTrue = hexZeroPad(One.toHexString(), 32);\nconst hexFalse = hexZeroPad(Zero.toHexString(), 32);\nconst domainFieldTypes = {\n    name: \"string\",\n    version: \"string\",\n    chainId: \"uint256\",\n    verifyingContract: \"address\",\n    salt: \"bytes32\"\n};\nconst domainFieldNames = [\n    \"name\", \"version\", \"chainId\", \"verifyingContract\", \"salt\"\n];\nfunction checkString(key) {\n    return function (value) {\n        if (typeof (value) !== \"string\") {\n            logger.throwArgumentError(`invalid domain value for ${JSON.stringify(key)}`, `domain.${key}`, value);\n        }\n        return value;\n    };\n}\nconst domainChecks = {\n    name: checkString(\"name\"),\n    version: checkString(\"version\"),\n    chainId: function (value) {\n        try {\n            return BigNumber.from(value).toString();\n        }\n        catch (error) { }\n        return logger.throwArgumentError(`invalid domain value for \"chainId\"`, \"domain.chainId\", value);\n    },\n    verifyingContract: function (value) {\n        try {\n            return getAddress(value).toLowerCase();\n        }\n        catch (error) { }\n        return logger.throwArgumentError(`invalid domain value \"verifyingContract\"`, \"domain.verifyingContract\", value);\n    },\n    salt: function (value) {\n        try {\n            const bytes = arrayify(value);\n            if (bytes.length !== 32) {\n                throw new Error(\"bad length\");\n            }\n            return hexlify(bytes);\n        }\n        catch (error) { }\n        return logger.throwArgumentError(`invalid domain value \"salt\"`, \"domain.salt\", value);\n    }\n};\nfunction getBaseEncoder(type) {\n    // intXX and uintXX\n    {\n        const match = type.match(/^(u?)int(\\d*)$/);\n        if (match) {\n            const signed = (match[1] === \"\");\n            const width = parseInt(match[2] || \"256\");\n            if (width % 8 !== 0 || width > 256 || (match[2] && match[2] !== String(width))) {\n                logger.throwArgumentError(\"invalid numeric width\", \"type\", type);\n            }\n            const boundsUpper = MaxUint256.mask(signed ? (width - 1) : width);\n            const boundsLower = signed ? boundsUpper.add(One).mul(NegativeOne) : Zero;\n            return function (value) {\n                const v = BigNumber.from(value);\n                if (v.lt(boundsLower) || v.gt(boundsUpper)) {\n                    logger.throwArgumentError(`value out-of-bounds for ${type}`, \"value\", value);\n                }\n                return hexZeroPad(v.toTwos(256).toHexString(), 32);\n            };\n        }\n    }\n    // bytesXX\n    {\n        const match = type.match(/^bytes(\\d+)$/);\n        if (match) {\n            const width = parseInt(match[1]);\n            if (width === 0 || width > 32 || match[1] !== String(width)) {\n                logger.throwArgumentError(\"invalid bytes width\", \"type\", type);\n            }\n            return function (value) {\n                const bytes = arrayify(value);\n                if (bytes.length !== width) {\n                    logger.throwArgumentError(`invalid length for ${type}`, \"value\", value);\n                }\n                return hexPadRight(value);\n            };\n        }\n    }\n    switch (type) {\n        case \"address\": return function (value) {\n            return hexZeroPad(getAddress(value), 32);\n        };\n        case \"bool\": return function (value) {\n            return ((!value) ? hexFalse : hexTrue);\n        };\n        case \"bytes\": return function (value) {\n            return keccak256(value);\n        };\n        case \"string\": return function (value) {\n            return id(value);\n        };\n    }\n    return null;\n}\nfunction encodeType(name, fields) {\n    return `${name}(${fields.map(({ name, type }) => (type + \" \" + name)).join(\",\")})`;\n}\nexport class TypedDataEncoder {\n    constructor(types) {\n        defineReadOnly(this, \"types\", Object.freeze(deepCopy(types)));\n        defineReadOnly(this, \"_encoderCache\", {});\n        defineReadOnly(this, \"_types\", {});\n        // Link struct types to their direct child structs\n        const links = {};\n        // Link structs to structs which contain them as a child\n        const parents = {};\n        // Link all subtypes within a given struct\n        const subtypes = {};\n        Object.keys(types).forEach((type) => {\n            links[type] = {};\n            parents[type] = [];\n            subtypes[type] = {};\n        });\n        for (const name in types) {\n            const uniqueNames = {};\n            types[name].forEach((field) => {\n                // Check each field has a unique name\n                if (uniqueNames[field.name]) {\n                    logger.throwArgumentError(`duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name)}`, \"types\", types);\n                }\n                uniqueNames[field.name] = true;\n                // Get the base type (drop any array specifiers)\n                const baseType = field.type.match(/^([^\\x5b]*)(\\x5b|$)/)[1];\n                if (baseType === name) {\n                    logger.throwArgumentError(`circular type reference to ${JSON.stringify(baseType)}`, \"types\", types);\n                }\n                // Is this a base encoding type?\n                const encoder = getBaseEncoder(baseType);\n                if (encoder) {\n                    return;\n                }\n                if (!parents[baseType]) {\n                    logger.throwArgumentError(`unknown type ${JSON.stringify(baseType)}`, \"types\", types);\n                }\n                // Add linkage\n                parents[baseType].push(name);\n                links[name][baseType] = true;\n            });\n        }\n        // Deduce the primary type\n        const primaryTypes = Object.keys(parents).filter((n) => (parents[n].length === 0));\n        if (primaryTypes.length === 0) {\n            logger.throwArgumentError(\"missing primary type\", \"types\", types);\n        }\n        else if (primaryTypes.length > 1) {\n            logger.throwArgumentError(`ambiguous primary types or unused types: ${primaryTypes.map((t) => (JSON.stringify(t))).join(\", \")}`, \"types\", types);\n        }\n        defineReadOnly(this, \"primaryType\", primaryTypes[0]);\n        // Check for circular type references\n        function checkCircular(type, found) {\n            if (found[type]) {\n                logger.throwArgumentError(`circular type reference to ${JSON.stringify(type)}`, \"types\", types);\n            }\n            found[type] = true;\n            Object.keys(links[type]).forEach((child) => {\n                if (!parents[child]) {\n                    return;\n                }\n                // Recursively check children\n                checkCircular(child, found);\n                // Mark all ancestors as having this decendant\n                Object.keys(found).forEach((subtype) => {\n                    subtypes[subtype][child] = true;\n                });\n            });\n            delete found[type];\n        }\n        checkCircular(this.primaryType, {});\n        // Compute each fully describe type\n        for (const name in subtypes) {\n            const st = Object.keys(subtypes[name]);\n            st.sort();\n            this._types[name] = encodeType(name, types[name]) + st.map((t) => encodeType(t, types[t])).join(\"\");\n        }\n    }\n    getEncoder(type) {\n        let encoder = this._encoderCache[type];\n        if (!encoder) {\n            encoder = this._encoderCache[type] = this._getEncoder(type);\n        }\n        return encoder;\n    }\n    _getEncoder(type) {\n        // Basic encoder type (address, bool, uint256, etc)\n        {\n            const encoder = getBaseEncoder(type);\n            if (encoder) {\n                return encoder;\n            }\n        }\n        // Array\n        const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n        if (match) {\n            const subtype = match[1];\n            const subEncoder = this.getEncoder(subtype);\n            const length = parseInt(match[3]);\n            return (value) => {\n                if (length >= 0 && value.length !== length) {\n                    logger.throwArgumentError(\"array length mismatch; expected length ${ arrayLength }\", \"value\", value);\n                }\n                let result = value.map(subEncoder);\n                if (this._types[subtype]) {\n                    result = result.map(keccak256);\n                }\n                return keccak256(hexConcat(result));\n            };\n        }\n        // Struct\n        const fields = this.types[type];\n        if (fields) {\n            const encodedType = id(this._types[type]);\n            return (value) => {\n                const values = fields.map(({ name, type }) => {\n                    const result = this.getEncoder(type)(value[name]);\n                    if (this._types[type]) {\n                        return keccak256(result);\n                    }\n                    return result;\n                });\n                values.unshift(encodedType);\n                return hexConcat(values);\n            };\n        }\n        return logger.throwArgumentError(`unknown type: ${type}`, \"type\", type);\n    }\n    encodeType(name) {\n        const result = this._types[name];\n        if (!result) {\n            logger.throwArgumentError(`unknown type: ${JSON.stringify(name)}`, \"name\", name);\n        }\n        return result;\n    }\n    encodeData(type, value) {\n        return this.getEncoder(type)(value);\n    }\n    hashStruct(name, value) {\n        return keccak256(this.encodeData(name, value));\n    }\n    encode(value) {\n        return this.encodeData(this.primaryType, value);\n    }\n    hash(value) {\n        return this.hashStruct(this.primaryType, value);\n    }\n    _visit(type, value, callback) {\n        // Basic encoder type (address, bool, uint256, etc)\n        {\n            const encoder = getBaseEncoder(type);\n            if (encoder) {\n                return callback(type, value);\n            }\n        }\n        // Array\n        const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n        if (match) {\n            const subtype = match[1];\n            const length = parseInt(match[3]);\n            if (length >= 0 && value.length !== length) {\n                logger.throwArgumentError(\"array length mismatch; expected length ${ arrayLength }\", \"value\", value);\n            }\n            return value.map((v) => this._visit(subtype, v, callback));\n        }\n        // Struct\n        const fields = this.types[type];\n        if (fields) {\n            return fields.reduce((accum, { name, type }) => {\n                accum[name] = this._visit(type, value[name], callback);\n                return accum;\n            }, {});\n        }\n        return logger.throwArgumentError(`unknown type: ${type}`, \"type\", type);\n    }\n    visit(value, callback) {\n        return this._visit(this.primaryType, value, callback);\n    }\n    static from(types) {\n        return new TypedDataEncoder(types);\n    }\n    static getPrimaryType(types) {\n        return TypedDataEncoder.from(types).primaryType;\n    }\n    static hashStruct(name, types, value) {\n        return TypedDataEncoder.from(types).hashStruct(name, value);\n    }\n    static hashDomain(domain) {\n        const domainFields = [];\n        for (const name in domain) {\n            const type = domainFieldTypes[name];\n            if (!type) {\n                logger.throwArgumentError(`invalid typed-data domain key: ${JSON.stringify(name)}`, \"domain\", domain);\n            }\n            domainFields.push({ name, type });\n        }\n        domainFields.sort((a, b) => {\n            return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);\n        });\n        return TypedDataEncoder.hashStruct(\"EIP712Domain\", { EIP712Domain: domainFields }, domain);\n    }\n    static encode(domain, types, value) {\n        return hexConcat([\n            \"0x1901\",\n            TypedDataEncoder.hashDomain(domain),\n            TypedDataEncoder.from(types).hash(value)\n        ]);\n    }\n    static hash(domain, types, value) {\n        return keccak256(TypedDataEncoder.encode(domain, types, value));\n    }\n    // Replaces all address types with ENS names with their looked up address\n    static resolveNames(domain, types, value, resolveName) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Make a copy to isolate it from the object passed in\n            domain = shallowCopy(domain);\n            // Look up all ENS names\n            const ensCache = {};\n            // Do we need to look up the domain's verifyingContract?\n            if (domain.verifyingContract && !isHexString(domain.verifyingContract, 20)) {\n                ensCache[domain.verifyingContract] = \"0x\";\n            }\n            // We are going to use the encoder to visit all the base values\n            const encoder = TypedDataEncoder.from(types);\n            // Get a list of all the addresses\n            encoder.visit(value, (type, value) => {\n                if (type === \"address\" && !isHexString(value, 20)) {\n                    ensCache[value] = \"0x\";\n                }\n                return value;\n            });\n            // Lookup each name\n            for (const name in ensCache) {\n                ensCache[name] = yield resolveName(name);\n            }\n            // Replace the domain verifyingContract if needed\n            if (domain.verifyingContract && ensCache[domain.verifyingContract]) {\n                domain.verifyingContract = ensCache[domain.verifyingContract];\n            }\n            // Replace all ENS names with their address\n            value = encoder.visit(value, (type, value) => {\n                if (type === \"address\" && ensCache[value]) {\n                    return ensCache[value];\n                }\n                return value;\n            });\n            return { domain, value };\n        });\n    }\n    static getPayload(domain, types, value) {\n        // Validate the domain fields\n        TypedDataEncoder.hashDomain(domain);\n        // Derive the EIP712Domain Struct reference type\n        const domainValues = {};\n        const domainTypes = [];\n        domainFieldNames.forEach((name) => {\n            const value = domain[name];\n            if (value == null) {\n                return;\n            }\n            domainValues[name] = domainChecks[name](value);\n            domainTypes.push({ name, type: domainFieldTypes[name] });\n        });\n        const encoder = TypedDataEncoder.from(types);\n        const typesWithDomain = shallowCopy(types);\n        if (typesWithDomain.EIP712Domain) {\n            logger.throwArgumentError(\"types must not contain EIP712Domain type\", \"types.EIP712Domain\", types);\n        }\n        else {\n            typesWithDomain.EIP712Domain = domainTypes;\n        }\n        // Validate the data structures and types\n        encoder.encode(value);\n        return {\n            types: typesWithDomain,\n            domain: domainValues,\n            primaryType: encoder.primaryType,\n            message: encoder.visit(value, (type, value) => {\n                // bytes\n                if (type.match(/^bytes(\\d*)/)) {\n                    return hexlify(arrayify(value));\n                }\n                // uint or int\n                if (type.match(/^u?int/)) {\n                    return BigNumber.from(value).toString();\n                }\n                switch (type) {\n                    case \"address\":\n                        return value.toLowerCase();\n                    case \"bool\":\n                        return !!value;\n                    case \"string\":\n                        if (typeof (value) !== \"string\") {\n                            logger.throwArgumentError(`invalid string`, \"value\", value);\n                        }\n                        return value;\n                }\n                return logger.throwArgumentError(\"unsupported type\", \"type\", type);\n            })\n        };\n    }\n}\n//# sourceMappingURL=typed-data.js.map"]},"metadata":{},"sourceType":"module"}