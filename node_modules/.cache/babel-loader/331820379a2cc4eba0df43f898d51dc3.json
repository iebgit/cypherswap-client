{"ast":null,"code":"\"use strict\";\n\n/**\n *  BigNumber\n *\n *  A wrapper around the BN.js object. We use the BN.js library\n *  because it is used by elliptic, so it is required regardless.\n *\n */\nimport _BN from \"bn.js\";\nvar BN = _BN.BN;\nimport { hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nconst _constructorGuard = {};\nconst MAX_SAFE = 0x1fffffffffffff;\nexport function isBigNumberish(value) {\n  return value != null && (BigNumber.isBigNumber(value) || typeof value === \"number\" && value % 1 === 0 || typeof value === \"string\" && !!value.match(/^-?[0-9]+$/) || isHexString(value) || typeof value === \"bigint\" || isBytes(value));\n}\n// Only warn about passing 10 into radix once\nlet _warnedToStringRadix = false;\nexport class BigNumber {\n  constructor(constructorGuard, hex) {\n    if (constructorGuard !== _constructorGuard) {\n      logger.throwError(\"cannot call constructor directly; use BigNumber.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"new (BigNumber)\"\n      });\n    }\n    this._hex = hex;\n    this._isBigNumber = true;\n    Object.freeze(this);\n  }\n  fromTwos(value) {\n    return toBigNumber(toBN(this).fromTwos(value));\n  }\n  toTwos(value) {\n    return toBigNumber(toBN(this).toTwos(value));\n  }\n  abs() {\n    if (this._hex[0] === \"-\") {\n      return BigNumber.from(this._hex.substring(1));\n    }\n    return this;\n  }\n  add(other) {\n    return toBigNumber(toBN(this).add(toBN(other)));\n  }\n  sub(other) {\n    return toBigNumber(toBN(this).sub(toBN(other)));\n  }\n  div(other) {\n    const o = BigNumber.from(other);\n    if (o.isZero()) {\n      throwFault(\"division-by-zero\", \"div\");\n    }\n    return toBigNumber(toBN(this).div(toBN(other)));\n  }\n  mul(other) {\n    return toBigNumber(toBN(this).mul(toBN(other)));\n  }\n  mod(other) {\n    const value = toBN(other);\n    if (value.isNeg()) {\n      throwFault(\"division-by-zero\", \"mod\");\n    }\n    return toBigNumber(toBN(this).umod(value));\n  }\n  pow(other) {\n    const value = toBN(other);\n    if (value.isNeg()) {\n      throwFault(\"negative-power\", \"pow\");\n    }\n    return toBigNumber(toBN(this).pow(value));\n  }\n  and(other) {\n    const value = toBN(other);\n    if (this.isNegative() || value.isNeg()) {\n      throwFault(\"unbound-bitwise-result\", \"and\");\n    }\n    return toBigNumber(toBN(this).and(value));\n  }\n  or(other) {\n    const value = toBN(other);\n    if (this.isNegative() || value.isNeg()) {\n      throwFault(\"unbound-bitwise-result\", \"or\");\n    }\n    return toBigNumber(toBN(this).or(value));\n  }\n  xor(other) {\n    const value = toBN(other);\n    if (this.isNegative() || value.isNeg()) {\n      throwFault(\"unbound-bitwise-result\", \"xor\");\n    }\n    return toBigNumber(toBN(this).xor(value));\n  }\n  mask(value) {\n    if (this.isNegative() || value < 0) {\n      throwFault(\"negative-width\", \"mask\");\n    }\n    return toBigNumber(toBN(this).maskn(value));\n  }\n  shl(value) {\n    if (this.isNegative() || value < 0) {\n      throwFault(\"negative-width\", \"shl\");\n    }\n    return toBigNumber(toBN(this).shln(value));\n  }\n  shr(value) {\n    if (this.isNegative() || value < 0) {\n      throwFault(\"negative-width\", \"shr\");\n    }\n    return toBigNumber(toBN(this).shrn(value));\n  }\n  eq(other) {\n    return toBN(this).eq(toBN(other));\n  }\n  lt(other) {\n    return toBN(this).lt(toBN(other));\n  }\n  lte(other) {\n    return toBN(this).lte(toBN(other));\n  }\n  gt(other) {\n    return toBN(this).gt(toBN(other));\n  }\n  gte(other) {\n    return toBN(this).gte(toBN(other));\n  }\n  isNegative() {\n    return this._hex[0] === \"-\";\n  }\n  isZero() {\n    return toBN(this).isZero();\n  }\n  toNumber() {\n    try {\n      return toBN(this).toNumber();\n    } catch (error) {\n      throwFault(\"overflow\", \"toNumber\", this.toString());\n    }\n    return null;\n  }\n  toBigInt() {\n    try {\n      return BigInt(this.toString());\n    } catch (e) {}\n    return logger.throwError(\"this platform does not support BigInt\", Logger.errors.UNSUPPORTED_OPERATION, {\n      value: this.toString()\n    });\n  }\n  toString() {\n    // Lots of people expect this, which we do not support, so check (See: #889)\n    if (arguments.length > 0) {\n      if (arguments[0] === 10) {\n        if (!_warnedToStringRadix) {\n          _warnedToStringRadix = true;\n          logger.warn(\"BigNumber.toString does not accept any parameters; base-10 is assumed\");\n        }\n      } else if (arguments[0] === 16) {\n        logger.throwError(\"BigNumber.toString does not accept any parameters; use bigNumber.toHexString()\", Logger.errors.UNEXPECTED_ARGUMENT, {});\n      } else {\n        logger.throwError(\"BigNumber.toString does not accept parameters\", Logger.errors.UNEXPECTED_ARGUMENT, {});\n      }\n    }\n    return toBN(this).toString(10);\n  }\n  toHexString() {\n    return this._hex;\n  }\n  toJSON(key) {\n    return {\n      type: \"BigNumber\",\n      hex: this.toHexString()\n    };\n  }\n  static from(value) {\n    if (value instanceof BigNumber) {\n      return value;\n    }\n    if (typeof value === \"string\") {\n      if (value.match(/^-?0x[0-9a-f]+$/i)) {\n        return new BigNumber(_constructorGuard, toHex(value));\n      }\n      if (value.match(/^-?[0-9]+$/)) {\n        return new BigNumber(_constructorGuard, toHex(new BN(value)));\n      }\n      return logger.throwArgumentError(\"invalid BigNumber string\", \"value\", value);\n    }\n    if (typeof value === \"number\") {\n      if (value % 1) {\n        throwFault(\"underflow\", \"BigNumber.from\", value);\n      }\n      if (value >= MAX_SAFE || value <= -MAX_SAFE) {\n        throwFault(\"overflow\", \"BigNumber.from\", value);\n      }\n      return BigNumber.from(String(value));\n    }\n    const anyValue = value;\n    if (typeof anyValue === \"bigint\") {\n      return BigNumber.from(anyValue.toString());\n    }\n    if (isBytes(anyValue)) {\n      return BigNumber.from(hexlify(anyValue));\n    }\n    if (anyValue) {\n      // Hexable interface (takes priority)\n      if (anyValue.toHexString) {\n        const hex = anyValue.toHexString();\n        if (typeof hex === \"string\") {\n          return BigNumber.from(hex);\n        }\n      } else {\n        // For now, handle legacy JSON-ified values (goes away in v6)\n        let hex = anyValue._hex;\n        // New-form JSON\n        if (hex == null && anyValue.type === \"BigNumber\") {\n          hex = anyValue.hex;\n        }\n        if (typeof hex === \"string\") {\n          if (isHexString(hex) || hex[0] === \"-\" && isHexString(hex.substring(1))) {\n            return BigNumber.from(hex);\n          }\n        }\n      }\n    }\n    return logger.throwArgumentError(\"invalid BigNumber value\", \"value\", value);\n  }\n  static isBigNumber(value) {\n    return !!(value && value._isBigNumber);\n  }\n}\n// Normalize the hex string\nfunction toHex(value) {\n  // For BN, call on the hex string\n  if (typeof value !== \"string\") {\n    return toHex(value.toString(16));\n  }\n  // If negative, prepend the negative sign to the normalized positive value\n  if (value[0] === \"-\") {\n    // Strip off the negative sign\n    value = value.substring(1);\n    // Cannot have multiple negative signs (e.g. \"--0x04\")\n    if (value[0] === \"-\") {\n      logger.throwArgumentError(\"invalid hex\", \"value\", value);\n    }\n    // Call toHex on the positive component\n    value = toHex(value);\n    // Do not allow \"-0x00\"\n    if (value === \"0x00\") {\n      return value;\n    }\n    // Negate the value\n    return \"-\" + value;\n  }\n  // Add a \"0x\" prefix if missing\n  if (value.substring(0, 2) !== \"0x\") {\n    value = \"0x\" + value;\n  }\n  // Normalize zero\n  if (value === \"0x\") {\n    return \"0x00\";\n  }\n  // Make the string even length\n  if (value.length % 2) {\n    value = \"0x0\" + value.substring(2);\n  }\n  // Trim to smallest even-length string\n  while (value.length > 4 && value.substring(0, 4) === \"0x00\") {\n    value = \"0x\" + value.substring(4);\n  }\n  return value;\n}\nfunction toBigNumber(value) {\n  return BigNumber.from(toHex(value));\n}\nfunction toBN(value) {\n  const hex = BigNumber.from(value).toHexString();\n  if (hex[0] === \"-\") {\n    return new BN(\"-\" + hex.substring(3), 16);\n  }\n  return new BN(hex.substring(2), 16);\n}\nfunction throwFault(fault, operation, value) {\n  const params = {\n    fault: fault,\n    operation: operation\n  };\n  if (value != null) {\n    params.value = value;\n  }\n  return logger.throwError(fault, Logger.errors.NUMERIC_FAULT, params);\n}\n// value should have no prefix\nexport function _base36To16(value) {\n  return new BN(value, 36).toString(16);\n}\n// value should have no prefix\nexport function _base16To36(value) {\n  return new BN(value, 16).toString(36);\n}","map":{"version":3,"sources":["../src.ts/bignumber.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n *  BigNumber\n *\n *  A wrapper around the BN.js object. We use the BN.js library\n *  because it is used by elliptic, so it is required regardless.\n *\n */\nimport _BN from \"bn.js\";\nvar BN = _BN.BN;\nimport { hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nconst _constructorGuard = {};\nconst MAX_SAFE = 0x1fffffffffffff;\nexport function isBigNumberish(value) {\n    return (value != null) && (BigNumber.isBigNumber(value) ||\n        (typeof (value) === \"number\" && (value % 1) === 0) ||\n        (typeof (value) === \"string\" && !!value.match(/^-?[0-9]+$/)) ||\n        isHexString(value) ||\n        (typeof (value) === \"bigint\") ||\n        isBytes(value));\n}\n// Only warn about passing 10 into radix once\nlet _warnedToStringRadix = false;\nexport class BigNumber {\n    constructor(constructorGuard, hex) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"cannot call constructor directly; use BigNumber.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new (BigNumber)\"\n            });\n        }\n        this._hex = hex;\n        this._isBigNumber = true;\n        Object.freeze(this);\n    }\n    fromTwos(value) {\n        return toBigNumber(toBN(this).fromTwos(value));\n    }\n    toTwos(value) {\n        return toBigNumber(toBN(this).toTwos(value));\n    }\n    abs() {\n        if (this._hex[0] === \"-\") {\n            return BigNumber.from(this._hex.substring(1));\n        }\n        return this;\n    }\n    add(other) {\n        return toBigNumber(toBN(this).add(toBN(other)));\n    }\n    sub(other) {\n        return toBigNumber(toBN(this).sub(toBN(other)));\n    }\n    div(other) {\n        const o = BigNumber.from(other);\n        if (o.isZero()) {\n            throwFault(\"division-by-zero\", \"div\");\n        }\n        return toBigNumber(toBN(this).div(toBN(other)));\n    }\n    mul(other) {\n        return toBigNumber(toBN(this).mul(toBN(other)));\n    }\n    mod(other) {\n        const value = toBN(other);\n        if (value.isNeg()) {\n            throwFault(\"division-by-zero\", \"mod\");\n        }\n        return toBigNumber(toBN(this).umod(value));\n    }\n    pow(other) {\n        const value = toBN(other);\n        if (value.isNeg()) {\n            throwFault(\"negative-power\", \"pow\");\n        }\n        return toBigNumber(toBN(this).pow(value));\n    }\n    and(other) {\n        const value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"unbound-bitwise-result\", \"and\");\n        }\n        return toBigNumber(toBN(this).and(value));\n    }\n    or(other) {\n        const value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"unbound-bitwise-result\", \"or\");\n        }\n        return toBigNumber(toBN(this).or(value));\n    }\n    xor(other) {\n        const value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"unbound-bitwise-result\", \"xor\");\n        }\n        return toBigNumber(toBN(this).xor(value));\n    }\n    mask(value) {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"negative-width\", \"mask\");\n        }\n        return toBigNumber(toBN(this).maskn(value));\n    }\n    shl(value) {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"negative-width\", \"shl\");\n        }\n        return toBigNumber(toBN(this).shln(value));\n    }\n    shr(value) {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"negative-width\", \"shr\");\n        }\n        return toBigNumber(toBN(this).shrn(value));\n    }\n    eq(other) {\n        return toBN(this).eq(toBN(other));\n    }\n    lt(other) {\n        return toBN(this).lt(toBN(other));\n    }\n    lte(other) {\n        return toBN(this).lte(toBN(other));\n    }\n    gt(other) {\n        return toBN(this).gt(toBN(other));\n    }\n    gte(other) {\n        return toBN(this).gte(toBN(other));\n    }\n    isNegative() {\n        return (this._hex[0] === \"-\");\n    }\n    isZero() {\n        return toBN(this).isZero();\n    }\n    toNumber() {\n        try {\n            return toBN(this).toNumber();\n        }\n        catch (error) {\n            throwFault(\"overflow\", \"toNumber\", this.toString());\n        }\n        return null;\n    }\n    toBigInt() {\n        try {\n            return BigInt(this.toString());\n        }\n        catch (e) { }\n        return logger.throwError(\"this platform does not support BigInt\", Logger.errors.UNSUPPORTED_OPERATION, {\n            value: this.toString()\n        });\n    }\n    toString() {\n        // Lots of people expect this, which we do not support, so check (See: #889)\n        if (arguments.length > 0) {\n            if (arguments[0] === 10) {\n                if (!_warnedToStringRadix) {\n                    _warnedToStringRadix = true;\n                    logger.warn(\"BigNumber.toString does not accept any parameters; base-10 is assumed\");\n                }\n            }\n            else if (arguments[0] === 16) {\n                logger.throwError(\"BigNumber.toString does not accept any parameters; use bigNumber.toHexString()\", Logger.errors.UNEXPECTED_ARGUMENT, {});\n            }\n            else {\n                logger.throwError(\"BigNumber.toString does not accept parameters\", Logger.errors.UNEXPECTED_ARGUMENT, {});\n            }\n        }\n        return toBN(this).toString(10);\n    }\n    toHexString() {\n        return this._hex;\n    }\n    toJSON(key) {\n        return { type: \"BigNumber\", hex: this.toHexString() };\n    }\n    static from(value) {\n        if (value instanceof BigNumber) {\n            return value;\n        }\n        if (typeof (value) === \"string\") {\n            if (value.match(/^-?0x[0-9a-f]+$/i)) {\n                return new BigNumber(_constructorGuard, toHex(value));\n            }\n            if (value.match(/^-?[0-9]+$/)) {\n                return new BigNumber(_constructorGuard, toHex(new BN(value)));\n            }\n            return logger.throwArgumentError(\"invalid BigNumber string\", \"value\", value);\n        }\n        if (typeof (value) === \"number\") {\n            if (value % 1) {\n                throwFault(\"underflow\", \"BigNumber.from\", value);\n            }\n            if (value >= MAX_SAFE || value <= -MAX_SAFE) {\n                throwFault(\"overflow\", \"BigNumber.from\", value);\n            }\n            return BigNumber.from(String(value));\n        }\n        const anyValue = value;\n        if (typeof (anyValue) === \"bigint\") {\n            return BigNumber.from(anyValue.toString());\n        }\n        if (isBytes(anyValue)) {\n            return BigNumber.from(hexlify(anyValue));\n        }\n        if (anyValue) {\n            // Hexable interface (takes priority)\n            if (anyValue.toHexString) {\n                const hex = anyValue.toHexString();\n                if (typeof (hex) === \"string\") {\n                    return BigNumber.from(hex);\n                }\n            }\n            else {\n                // For now, handle legacy JSON-ified values (goes away in v6)\n                let hex = anyValue._hex;\n                // New-form JSON\n                if (hex == null && anyValue.type === \"BigNumber\") {\n                    hex = anyValue.hex;\n                }\n                if (typeof (hex) === \"string\") {\n                    if (isHexString(hex) || (hex[0] === \"-\" && isHexString(hex.substring(1)))) {\n                        return BigNumber.from(hex);\n                    }\n                }\n            }\n        }\n        return logger.throwArgumentError(\"invalid BigNumber value\", \"value\", value);\n    }\n    static isBigNumber(value) {\n        return !!(value && value._isBigNumber);\n    }\n}\n// Normalize the hex string\nfunction toHex(value) {\n    // For BN, call on the hex string\n    if (typeof (value) !== \"string\") {\n        return toHex(value.toString(16));\n    }\n    // If negative, prepend the negative sign to the normalized positive value\n    if (value[0] === \"-\") {\n        // Strip off the negative sign\n        value = value.substring(1);\n        // Cannot have multiple negative signs (e.g. \"--0x04\")\n        if (value[0] === \"-\") {\n            logger.throwArgumentError(\"invalid hex\", \"value\", value);\n        }\n        // Call toHex on the positive component\n        value = toHex(value);\n        // Do not allow \"-0x00\"\n        if (value === \"0x00\") {\n            return value;\n        }\n        // Negate the value\n        return \"-\" + value;\n    }\n    // Add a \"0x\" prefix if missing\n    if (value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    // Normalize zero\n    if (value === \"0x\") {\n        return \"0x00\";\n    }\n    // Make the string even length\n    if (value.length % 2) {\n        value = \"0x0\" + value.substring(2);\n    }\n    // Trim to smallest even-length string\n    while (value.length > 4 && value.substring(0, 4) === \"0x00\") {\n        value = \"0x\" + value.substring(4);\n    }\n    return value;\n}\nfunction toBigNumber(value) {\n    return BigNumber.from(toHex(value));\n}\nfunction toBN(value) {\n    const hex = BigNumber.from(value).toHexString();\n    if (hex[0] === \"-\") {\n        return (new BN(\"-\" + hex.substring(3), 16));\n    }\n    return new BN(hex.substring(2), 16);\n}\nfunction throwFault(fault, operation, value) {\n    const params = { fault: fault, operation: operation };\n    if (value != null) {\n        params.value = value;\n    }\n    return logger.throwError(fault, Logger.errors.NUMERIC_FAULT, params);\n}\n// value should have no prefix\nexport function _base36To16(value) {\n    return (new BN(value, 36)).toString(16);\n}\n// value should have no prefix\nexport function _base16To36(value) {\n    return (new BN(value, 16)).toString(36);\n}\n//# sourceMappingURL=bignumber.js.map"]},"metadata":{},"sourceType":"module"}