{"ast":null,"code":"function e(e) {\n  this.message = e;\n}\ne.prototype = new Error(), e.prototype.name = \"InvalidCharacterError\";\nvar r = \"undefined\" != typeof window && window.atob && window.atob.bind(window) || function (r) {\n  var t = String(r).replace(/=+$/, \"\");\n  if (t.length % 4 == 1) throw new e(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n  for (var n, o, a = 0, i = 0, c = \"\"; o = t.charAt(i++); ~o && (n = a % 4 ? 64 * n + o : o, a++ % 4) ? c += String.fromCharCode(255 & n >> (-2 * a & 6)) : 0) o = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\".indexOf(o);\n  return c;\n};\nfunction t(e) {\n  var t = e.replace(/-/g, \"+\").replace(/_/g, \"/\");\n  switch (t.length % 4) {\n    case 0:\n      break;\n    case 2:\n      t += \"==\";\n      break;\n    case 3:\n      t += \"=\";\n      break;\n    default:\n      throw \"Illegal base64url string!\";\n  }\n  try {\n    return function (e) {\n      return decodeURIComponent(r(e).replace(/(.)/g, function (e, r) {\n        var t = r.charCodeAt(0).toString(16).toUpperCase();\n        return t.length < 2 && (t = \"0\" + t), \"%\" + t;\n      }));\n    }(t);\n  } catch (e) {\n    return r(t);\n  }\n}\nfunction n(e) {\n  this.message = e;\n}\nfunction o(e, r) {\n  if (\"string\" != typeof e) throw new n(\"Invalid token specified\");\n  var o = !0 === (r = r || {}).header ? 0 : 1;\n  try {\n    return JSON.parse(t(e.split(\".\")[o]));\n  } catch (e) {\n    throw new n(\"Invalid token specified: \" + e.message);\n  }\n}\nn.prototype = new Error(), n.prototype.name = \"InvalidTokenError\";\nexport default o;\nexport { n as InvalidTokenError };","map":{"version":3,"sources":["../lib/atob.js","../lib/base64_url_decode.js","../lib/index.js"],"names":["InvalidCharacterError","message","this","prototype","Error","name","input","str","String","replace","length","bc","bs","buffer","idx","output","charAt","fromCharCode","indexOf","window","atob","bind","decodeURIComponent","m","p","code","charCodeAt","toString","toUpperCase","b64DecodeUnicode","err","InvalidTokenError","token","options","pos","header","JSON","parse","base64_url_decode","split","e"],"mappings":"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","sourcesContent":["/**\n * The code was extracted from:\n * https://github.com/davidchambers/Base64.js\n */\n\nvar chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\nfunction InvalidCharacterError(message) {\n    this.message = message;\n}\n\nInvalidCharacterError.prototype = new Error();\nInvalidCharacterError.prototype.name = \"InvalidCharacterError\";\n\nfunction polyfill(input) {\n    var str = String(input).replace(/=+$/, \"\");\n    if (str.length % 4 == 1) {\n        throw new InvalidCharacterError(\n            \"'atob' failed: The string to be decoded is not correctly encoded.\"\n        );\n    }\n    for (\n        // initialize result and counters\n        var bc = 0, bs, buffer, idx = 0, output = \"\";\n        // get next character\n        (buffer = str.charAt(idx++));\n        // character found in table? initialize bit storage and add its ascii value;\n        ~buffer &&\n        ((bs = bc % 4 ? bs * 64 + buffer : buffer),\n            // and if not first of each 4 characters,\n            // convert the first 8 bits to one ascii character\n            bc++ % 4) ?\n        (output += String.fromCharCode(255 & (bs >> ((-2 * bc) & 6)))) :\n        0\n    ) {\n        // try to find character in table (0-63, not found => -1)\n        buffer = chars.indexOf(buffer);\n    }\n    return output;\n}\n\nexport default (typeof window !== \"undefined\" &&\n    window.atob &&\n    window.atob.bind(window)) ||\npolyfill;","import atob from \"./atob\";\n\nfunction b64DecodeUnicode(str) {\n    return decodeURIComponent(\n        atob(str).replace(/(.)/g, function(m, p) {\n            var code = p.charCodeAt(0).toString(16).toUpperCase();\n            if (code.length < 2) {\n                code = \"0\" + code;\n            }\n            return \"%\" + code;\n        })\n    );\n}\n\nexport default function(str) {\n    var output = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    switch (output.length % 4) {\n        case 0:\n            break;\n        case 2:\n            output += \"==\";\n            break;\n        case 3:\n            output += \"=\";\n            break;\n        default:\n            throw \"Illegal base64url string!\";\n    }\n\n    try {\n        return b64DecodeUnicode(output);\n    } catch (err) {\n        return atob(output);\n    }\n}","\"use strict\";\n\nimport base64_url_decode from \"./base64_url_decode\";\n\nexport function InvalidTokenError(message) {\n    this.message = message;\n}\n\nInvalidTokenError.prototype = new Error();\nInvalidTokenError.prototype.name = \"InvalidTokenError\";\n\nexport default function(token, options) {\n    if (typeof token !== \"string\") {\n        throw new InvalidTokenError(\"Invalid token specified\");\n    }\n\n    options = options || {};\n    var pos = options.header === true ? 0 : 1;\n    try {\n        return JSON.parse(base64_url_decode(token.split(\".\")[pos]));\n    } catch (e) {\n        throw new InvalidTokenError(\"Invalid token specified: \" + e.message);\n    }\n}"]},"metadata":{},"sourceType":"module"}