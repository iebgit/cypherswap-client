{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { ForkEvent, Provider } from \"@ethersproject/abstract-provider\";\nimport { encode as base64Encode } from \"@ethersproject/base64\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexConcat, hexDataLength, hexDataSlice, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { HashZero } from \"@ethersproject/constants\";\nimport { dnsEncode, namehash } from \"@ethersproject/hash\";\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { sha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\nimport bech32 from \"bech32\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { Formatter } from \"./formatter\";\nconst MAX_CCIP_REDIRECTS = 10;\n//////////////////////////////\n// Event Serializeing\nfunction checkTopic(topic) {\n  if (topic == null) {\n    return \"null\";\n  }\n  if (hexDataLength(topic) !== 32) {\n    logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n  }\n  return topic.toLowerCase();\n}\nfunction serializeTopics(topics) {\n  // Remove trailing null AND-topics; they are redundant\n  topics = topics.slice();\n  while (topics.length > 0 && topics[topics.length - 1] == null) {\n    topics.pop();\n  }\n  return topics.map(topic => {\n    if (Array.isArray(topic)) {\n      // Only track unique OR-topics\n      const unique = {};\n      topic.forEach(topic => {\n        unique[checkTopic(topic)] = true;\n      });\n      // The order of OR-topics does not matter\n      const sorted = Object.keys(unique);\n      sorted.sort();\n      return sorted.join(\"|\");\n    } else {\n      return checkTopic(topic);\n    }\n  }).join(\"&\");\n}\nfunction deserializeTopics(data) {\n  if (data === \"\") {\n    return [];\n  }\n  return data.split(/&/g).map(topic => {\n    if (topic === \"\") {\n      return [];\n    }\n    const comps = topic.split(\"|\").map(topic => {\n      return topic === \"null\" ? null : topic;\n    });\n    return comps.length === 1 ? comps[0] : comps;\n  });\n}\nfunction getEventTag(eventName) {\n  if (typeof eventName === \"string\") {\n    eventName = eventName.toLowerCase();\n    if (hexDataLength(eventName) === 32) {\n      return \"tx:\" + eventName;\n    }\n    if (eventName.indexOf(\":\") === -1) {\n      return eventName;\n    }\n  } else if (Array.isArray(eventName)) {\n    return \"filter:*:\" + serializeTopics(eventName);\n  } else if (ForkEvent.isForkEvent(eventName)) {\n    logger.warn(\"not implemented\");\n    throw new Error(\"not implemented\");\n  } else if (eventName && typeof eventName === \"object\") {\n    return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n  }\n  throw new Error(\"invalid event - \" + eventName);\n}\n//////////////////////////////\n// Helper Object\nfunction getTime() {\n  return new Date().getTime();\n}\nfunction stall(duration) {\n  return new Promise(resolve => {\n    setTimeout(resolve, duration);\n  });\n}\n//////////////////////////////\n// Provider Object\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\nconst PollableEvents = [\"block\", \"network\", \"pending\", \"poll\"];\nexport class Event {\n  constructor(tag, listener, once) {\n    defineReadOnly(this, \"tag\", tag);\n    defineReadOnly(this, \"listener\", listener);\n    defineReadOnly(this, \"once\", once);\n    this._lastBlockNumber = -2;\n    this._inflight = false;\n  }\n  get event() {\n    switch (this.type) {\n      case \"tx\":\n        return this.hash;\n      case \"filter\":\n        return this.filter;\n    }\n    return this.tag;\n  }\n  get type() {\n    return this.tag.split(\":\")[0];\n  }\n  get hash() {\n    const comps = this.tag.split(\":\");\n    if (comps[0] !== \"tx\") {\n      return null;\n    }\n    return comps[1];\n  }\n  get filter() {\n    const comps = this.tag.split(\":\");\n    if (comps[0] !== \"filter\") {\n      return null;\n    }\n    const address = comps[1];\n    const topics = deserializeTopics(comps[2]);\n    const filter = {};\n    if (topics.length > 0) {\n      filter.topics = topics;\n    }\n    if (address && address !== \"*\") {\n      filter.address = address;\n    }\n    return filter;\n  }\n  pollable() {\n    return this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0;\n  }\n}\n;\n// https://github.com/satoshilabs/slips/blob/master/slip-0044.md\nconst coinInfos = {\n  \"0\": {\n    symbol: \"btc\",\n    p2pkh: 0x00,\n    p2sh: 0x05,\n    prefix: \"bc\"\n  },\n  \"2\": {\n    symbol: \"ltc\",\n    p2pkh: 0x30,\n    p2sh: 0x32,\n    prefix: \"ltc\"\n  },\n  \"3\": {\n    symbol: \"doge\",\n    p2pkh: 0x1e,\n    p2sh: 0x16\n  },\n  \"60\": {\n    symbol: \"eth\",\n    ilk: \"eth\"\n  },\n  \"61\": {\n    symbol: \"etc\",\n    ilk: \"eth\"\n  },\n  \"700\": {\n    symbol: \"xdai\",\n    ilk: \"eth\"\n  }\n};\nfunction bytes32ify(value) {\n  return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n}\n// Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\nfunction base58Encode(data) {\n  return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));\n}\nconst matcherIpfs = new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\");\nconst matchers = [new RegExp(\"^(https):/\\/(.*)$\", \"i\"), new RegExp(\"^(data):(.*)$\", \"i\"), matcherIpfs, new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\")];\nfunction _parseString(result, start) {\n  try {\n    return toUtf8String(_parseBytes(result, start));\n  } catch (error) {}\n  return null;\n}\nfunction _parseBytes(result, start) {\n  if (result === \"0x\") {\n    return null;\n  }\n  const offset = BigNumber.from(hexDataSlice(result, start, start + 32)).toNumber();\n  const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n  return hexDataSlice(result, offset + 32, offset + 32 + length);\n}\n// Trim off the ipfs:// prefix and return the default gateway URL\nfunction getIpfsLink(link) {\n  if (link.match(/^ipfs:\\/\\/ipfs\\//i)) {\n    link = link.substring(12);\n  } else if (link.match(/^ipfs:\\/\\//i)) {\n    link = link.substring(7);\n  } else {\n    logger.throwArgumentError(\"unsupported IPFS format\", \"link\", link);\n  }\n  return `https:/\\/gateway.ipfs.io/ipfs/${link}`;\n}\nfunction numPad(value) {\n  const result = arrayify(value);\n  if (result.length > 32) {\n    throw new Error(\"internal; should not happen\");\n  }\n  const padded = new Uint8Array(32);\n  padded.set(result, 32 - result.length);\n  return padded;\n}\nfunction bytesPad(value) {\n  if (value.length % 32 === 0) {\n    return value;\n  }\n  const result = new Uint8Array(Math.ceil(value.length / 32) * 32);\n  result.set(value);\n  return result;\n}\n// ABI Encodes a series of (bytes, bytes, ...)\nfunction encodeBytes(datas) {\n  const result = [];\n  let byteCount = 0;\n  // Add place-holders for pointers as we add items\n  for (let i = 0; i < datas.length; i++) {\n    result.push(null);\n    byteCount += 32;\n  }\n  for (let i = 0; i < datas.length; i++) {\n    const data = arrayify(datas[i]);\n    // Update the bytes offset\n    result[i] = numPad(byteCount);\n    // The length and padded value of data\n    result.push(numPad(data.length));\n    result.push(bytesPad(data));\n    byteCount += 32 + Math.ceil(data.length / 32) * 32;\n  }\n  return hexConcat(result);\n}\nexport class Resolver {\n  // The resolvedAddress is only for creating a ReverseLookup resolver\n  constructor(provider, address, name, resolvedAddress) {\n    defineReadOnly(this, \"provider\", provider);\n    defineReadOnly(this, \"name\", name);\n    defineReadOnly(this, \"address\", provider.formatter.address(address));\n    defineReadOnly(this, \"_resolvedAddress\", resolvedAddress);\n  }\n  supportsWildcard() {\n    if (!this._supportsEip2544) {\n      // supportsInterface(bytes4 = selector(\"resolve(bytes,bytes)\"))\n      this._supportsEip2544 = this.provider.call({\n        to: this.address,\n        data: \"0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000\"\n      }).then(result => {\n        return BigNumber.from(result).eq(1);\n      }).catch(error => {\n        if (error.code === Logger.errors.CALL_EXCEPTION) {\n          return false;\n        }\n        // Rethrow the error: link is down, etc. Let future attempts retry.\n        this._supportsEip2544 = null;\n        throw error;\n      });\n    }\n    return this._supportsEip2544;\n  }\n  _fetch(selector, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // e.g. keccak256(\"addr(bytes32,uint256)\")\n      const tx = {\n        to: this.address,\n        ccipReadEnabled: true,\n        data: hexConcat([selector, namehash(this.name), parameters || \"0x\"])\n      };\n      // Wildcard support; use EIP-2544 to resolve the request\n      let parseBytes = false;\n      if (yield this.supportsWildcard()) {\n        parseBytes = true;\n        // selector(\"resolve(bytes,bytes)\")\n        tx.data = hexConcat([\"0x9061b923\", encodeBytes([dnsEncode(this.name), tx.data])]);\n      }\n      try {\n        let result = yield this.provider.call(tx);\n        if (arrayify(result).length % 32 === 4) {\n          logger.throwError(\"resolver threw error\", Logger.errors.CALL_EXCEPTION, {\n            transaction: tx,\n            data: result\n          });\n        }\n        if (parseBytes) {\n          result = _parseBytes(result, 0);\n        }\n        return result;\n      } catch (error) {\n        if (error.code === Logger.errors.CALL_EXCEPTION) {\n          return null;\n        }\n        throw error;\n      }\n    });\n  }\n  _fetchBytes(selector, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this._fetch(selector, parameters);\n      if (result != null) {\n        return _parseBytes(result, 0);\n      }\n      return null;\n    });\n  }\n  _getAddress(coinType, hexBytes) {\n    const coinInfo = coinInfos[String(coinType)];\n    if (coinInfo == null) {\n      logger.throwError(`unsupported coin type: ${coinType}`, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: `getAddress(${coinType})`\n      });\n    }\n    if (coinInfo.ilk === \"eth\") {\n      return this.provider.formatter.address(hexBytes);\n    }\n    const bytes = arrayify(hexBytes);\n    // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n    if (coinInfo.p2pkh != null) {\n      const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n      if (p2pkh) {\n        const length = parseInt(p2pkh[1], 16);\n        if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n          return base58Encode(concat([[coinInfo.p2pkh], \"0x\" + p2pkh[2]]));\n        }\n      }\n    }\n    // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n    if (coinInfo.p2sh != null) {\n      const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n      if (p2sh) {\n        const length = parseInt(p2sh[1], 16);\n        if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {\n          return base58Encode(concat([[coinInfo.p2sh], \"0x\" + p2sh[2]]));\n        }\n      }\n    }\n    // Bech32\n    if (coinInfo.prefix != null) {\n      const length = bytes[1];\n      // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n      let version = bytes[0];\n      if (version === 0x00) {\n        if (length !== 20 && length !== 32) {\n          version = -1;\n        }\n      } else {\n        version = -1;\n      }\n      if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {\n        const words = bech32.toWords(bytes.slice(2));\n        words.unshift(version);\n        return bech32.encode(coinInfo.prefix, words);\n      }\n    }\n    return null;\n  }\n  getAddress(coinType) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (coinType == null) {\n        coinType = 60;\n      }\n      // If Ethereum, use the standard `addr(bytes32)`\n      if (coinType === 60) {\n        try {\n          // keccak256(\"addr(bytes32)\")\n          const result = yield this._fetch(\"0x3b3b57de\");\n          // No address\n          if (result === \"0x\" || result === HashZero) {\n            return null;\n          }\n          return this.provider.formatter.callAddress(result);\n        } catch (error) {\n          if (error.code === Logger.errors.CALL_EXCEPTION) {\n            return null;\n          }\n          throw error;\n        }\n      }\n      // keccak256(\"addr(bytes32,uint256\")\n      const hexBytes = yield this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType));\n      // No address\n      if (hexBytes == null || hexBytes === \"0x\") {\n        return null;\n      }\n      // Compute the address\n      const address = this._getAddress(coinType, hexBytes);\n      if (address == null) {\n        logger.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: `getAddress(${coinType})`,\n          coinType: coinType,\n          data: hexBytes\n        });\n      }\n      return address;\n    });\n  }\n  getAvatar() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const linkage = [{\n        type: \"name\",\n        content: this.name\n      }];\n      try {\n        // test data for ricmoo.eth\n        //const avatar = \"eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233\";\n        const avatar = yield this.getText(\"avatar\");\n        if (avatar == null) {\n          return null;\n        }\n        for (let i = 0; i < matchers.length; i++) {\n          const match = avatar.match(matchers[i]);\n          if (match == null) {\n            continue;\n          }\n          const scheme = match[1].toLowerCase();\n          switch (scheme) {\n            case \"https\":\n              linkage.push({\n                type: \"url\",\n                content: avatar\n              });\n              return {\n                linkage,\n                url: avatar\n              };\n            case \"data\":\n              linkage.push({\n                type: \"data\",\n                content: avatar\n              });\n              return {\n                linkage,\n                url: avatar\n              };\n            case \"ipfs\":\n              linkage.push({\n                type: \"ipfs\",\n                content: avatar\n              });\n              return {\n                linkage,\n                url: getIpfsLink(avatar)\n              };\n            case \"erc721\":\n            case \"erc1155\":\n              {\n                // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n                const selector = scheme === \"erc721\" ? \"0xc87b56dd\" : \"0x0e89341c\";\n                linkage.push({\n                  type: scheme,\n                  content: avatar\n                });\n                // The owner of this name\n                const owner = this._resolvedAddress || (yield this.getAddress());\n                const comps = (match[2] || \"\").split(\"/\");\n                if (comps.length !== 2) {\n                  return null;\n                }\n                const addr = yield this.provider.formatter.address(comps[0]);\n                const tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32);\n                // Check that this account owns the token\n                if (scheme === \"erc721\") {\n                  // ownerOf(uint256 tokenId)\n                  const tokenOwner = this.provider.formatter.callAddress(yield this.provider.call({\n                    to: addr,\n                    data: hexConcat([\"0x6352211e\", tokenId])\n                  }));\n                  if (owner !== tokenOwner) {\n                    return null;\n                  }\n                  linkage.push({\n                    type: \"owner\",\n                    content: tokenOwner\n                  });\n                } else if (scheme === \"erc1155\") {\n                  // balanceOf(address owner, uint256 tokenId)\n                  const balance = BigNumber.from(yield this.provider.call({\n                    to: addr,\n                    data: hexConcat([\"0x00fdd58e\", hexZeroPad(owner, 32), tokenId])\n                  }));\n                  if (balance.isZero()) {\n                    return null;\n                  }\n                  linkage.push({\n                    type: \"balance\",\n                    content: balance.toString()\n                  });\n                }\n                // Call the token contract for the metadata URL\n                const tx = {\n                  to: this.provider.formatter.address(comps[0]),\n                  data: hexConcat([selector, tokenId])\n                };\n                let metadataUrl = _parseString(yield this.provider.call(tx), 0);\n                if (metadataUrl == null) {\n                  return null;\n                }\n                linkage.push({\n                  type: \"metadata-url-base\",\n                  content: metadataUrl\n                });\n                // ERC-1155 allows a generic {id} in the URL\n                if (scheme === \"erc1155\") {\n                  metadataUrl = metadataUrl.replace(\"{id}\", tokenId.substring(2));\n                  linkage.push({\n                    type: \"metadata-url-expanded\",\n                    content: metadataUrl\n                  });\n                }\n                // Transform IPFS metadata links\n                if (metadataUrl.match(/^ipfs:/i)) {\n                  metadataUrl = getIpfsLink(metadataUrl);\n                }\n                linkage.push({\n                  type: \"metadata-url\",\n                  content: metadataUrl\n                });\n                // Get the token metadata\n                const metadata = yield fetchJson(metadataUrl);\n                if (!metadata) {\n                  return null;\n                }\n                linkage.push({\n                  type: \"metadata\",\n                  content: JSON.stringify(metadata)\n                });\n                // Pull the image URL out\n                let imageUrl = metadata.image;\n                if (typeof imageUrl !== \"string\") {\n                  return null;\n                }\n                if (imageUrl.match(/^(https:\\/\\/|data:)/i)) {\n                  // Allow\n                } else {\n                  // Transform IPFS link to gateway\n                  const ipfs = imageUrl.match(matcherIpfs);\n                  if (ipfs == null) {\n                    return null;\n                  }\n                  linkage.push({\n                    type: \"url-ipfs\",\n                    content: imageUrl\n                  });\n                  imageUrl = getIpfsLink(imageUrl);\n                }\n                linkage.push({\n                  type: \"url\",\n                  content: imageUrl\n                });\n                return {\n                  linkage,\n                  url: imageUrl\n                };\n              }\n          }\n        }\n      } catch (error) {}\n      return null;\n    });\n  }\n  getContentHash() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // keccak256(\"contenthash()\")\n      const hexBytes = yield this._fetchBytes(\"0xbc1c58d1\");\n      // No contenthash\n      if (hexBytes == null || hexBytes === \"0x\") {\n        return null;\n      }\n      // IPFS (CID: 1, Type: DAG-PB)\n      const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n      if (ipfs) {\n        const length = parseInt(ipfs[3], 16);\n        if (ipfs[4].length === length * 2) {\n          return \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]);\n        }\n      }\n      // IPNS (CID: 1, Type: libp2p-key)\n      const ipns = hexBytes.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n      if (ipns) {\n        const length = parseInt(ipns[3], 16);\n        if (ipns[4].length === length * 2) {\n          return \"ipns:/\\/\" + Base58.encode(\"0x\" + ipns[1]);\n        }\n      }\n      // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n      const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);\n      if (swarm) {\n        if (swarm[1].length === 32 * 2) {\n          return \"bzz:/\\/\" + swarm[1];\n        }\n      }\n      const skynet = hexBytes.match(/^0x90b2c605([0-9a-f]*)$/);\n      if (skynet) {\n        if (skynet[1].length === 34 * 2) {\n          // URL Safe base64; https://datatracker.ietf.org/doc/html/rfc4648#section-5\n          const urlSafe = {\n            \"=\": \"\",\n            \"+\": \"-\",\n            \"/\": \"_\"\n          };\n          const hash = base64Encode(\"0x\" + skynet[1]).replace(/[=+\\/]/g, a => urlSafe[a]);\n          return \"sia:/\\/\" + hash;\n        }\n      }\n      return logger.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"getContentHash()\",\n        data: hexBytes\n      });\n    });\n  }\n  getText(key) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // The key encoded as parameter to fetchBytes\n      let keyBytes = toUtf8Bytes(key);\n      // The nodehash consumes the first slot, so the string pointer targets\n      // offset 64, with the length at offset 64 and data starting at offset 96\n      keyBytes = concat([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]);\n      // Pad to word-size (32 bytes)\n      if (keyBytes.length % 32 !== 0) {\n        keyBytes = concat([keyBytes, hexZeroPad(\"0x\", 32 - key.length % 32)]);\n      }\n      const hexBytes = yield this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n      if (hexBytes == null || hexBytes === \"0x\") {\n        return null;\n      }\n      return toUtf8String(hexBytes);\n    });\n  }\n}\nlet defaultFormatter = null;\nlet nextPollId = 1;\nexport class BaseProvider extends Provider {\n  /**\n   *  ready\n   *\n   *  A Promise<Network> that resolves only once the provider is ready.\n   *\n   *  Sub-classes that call the super with a network without a chainId\n   *  MUST set this. Standard named networks have a known chainId.\n   *\n   */\n  constructor(network) {\n    super();\n    // Events being listened to\n    this._events = [];\n    this._emitted = {\n      block: -2\n    };\n    this.disableCcipRead = false;\n    this.formatter = new.target.getFormatter();\n    // If network is any, this Provider allows the underlying\n    // network to change dynamically, and we auto-detect the\n    // current network\n    defineReadOnly(this, \"anyNetwork\", network === \"any\");\n    if (this.anyNetwork) {\n      network = this.detectNetwork();\n    }\n    if (network instanceof Promise) {\n      this._networkPromise = network;\n      // Squash any \"unhandled promise\" errors; that do not need to be handled\n      network.catch(error => {});\n      // Trigger initial network setting (async)\n      this._ready().catch(error => {});\n    } else {\n      const knownNetwork = getStatic(new.target, \"getNetwork\")(network);\n      if (knownNetwork) {\n        defineReadOnly(this, \"_network\", knownNetwork);\n        this.emit(\"network\", knownNetwork, null);\n      } else {\n        logger.throwArgumentError(\"invalid network\", \"network\", network);\n      }\n    }\n    this._maxInternalBlockNumber = -1024;\n    this._lastBlockNumber = -2;\n    this._maxFilterBlockRange = 10;\n    this._pollingInterval = 4000;\n    this._fastQueryDate = 0;\n  }\n  _ready() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this._network == null) {\n        let network = null;\n        if (this._networkPromise) {\n          try {\n            network = yield this._networkPromise;\n          } catch (error) {}\n        }\n        // Try the Provider's network detection (this MUST throw if it cannot)\n        if (network == null) {\n          network = yield this.detectNetwork();\n        }\n        // This should never happen; every Provider sub-class should have\n        // suggested a network by here (or have thrown).\n        if (!network) {\n          logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, {});\n        }\n        // Possible this call stacked so do not call defineReadOnly again\n        if (this._network == null) {\n          if (this.anyNetwork) {\n            this._network = network;\n          } else {\n            defineReadOnly(this, \"_network\", network);\n          }\n          this.emit(\"network\", network, null);\n        }\n      }\n      return this._network;\n    });\n  }\n  // This will always return the most recently established network.\n  // For \"any\", this can change (a \"network\" event is emitted before\n  // any change is reflected); otherwise this cannot change\n  get ready() {\n    return poll(() => {\n      return this._ready().then(network => {\n        return network;\n      }, error => {\n        // If the network isn't running yet, we will wait\n        if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n          return undefined;\n        }\n        throw error;\n      });\n    });\n  }\n  // @TODO: Remove this and just create a singleton formatter\n  static getFormatter() {\n    if (defaultFormatter == null) {\n      defaultFormatter = new Formatter();\n    }\n    return defaultFormatter;\n  }\n  // @TODO: Remove this and just use getNetwork\n  static getNetwork(network) {\n    return getNetwork(network == null ? \"homestead\" : network);\n  }\n  ccipReadFetch(tx, calldata, urls) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.disableCcipRead || urls.length === 0) {\n        return null;\n      }\n      const sender = tx.to.toLowerCase();\n      const data = calldata.toLowerCase();\n      const errorMessages = [];\n      for (let i = 0; i < urls.length; i++) {\n        const url = urls[i];\n        // URL expansion\n        const href = url.replace(\"{sender}\", sender).replace(\"{data}\", data);\n        // If no {data} is present, use POST; otherwise GET\n        const json = url.indexOf(\"{data}\") >= 0 ? null : JSON.stringify({\n          data,\n          sender\n        });\n        const result = yield fetchJson({\n          url: href,\n          errorPassThrough: true\n        }, json, (value, response) => {\n          value.status = response.statusCode;\n          return value;\n        });\n        if (result.data) {\n          return result.data;\n        }\n        const errorMessage = result.message || \"unknown error\";\n        // 4xx indicates the result is not present; stop\n        if (result.status >= 400 && result.status < 500) {\n          return logger.throwError(`response not found during CCIP fetch: ${errorMessage}`, Logger.errors.SERVER_ERROR, {\n            url,\n            errorMessage\n          });\n        }\n        // 5xx indicates server issue; try the next url\n        errorMessages.push(errorMessage);\n      }\n      return logger.throwError(`error encountered during CCIP fetch: ${errorMessages.map(m => JSON.stringify(m)).join(\", \")}`, Logger.errors.SERVER_ERROR, {\n        urls,\n        errorMessages\n      });\n    });\n  }\n  // Fetches the blockNumber, but will reuse any result that is less\n  // than maxAge old or has been requested since the last request\n  _getInternalBlockNumber(maxAge) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this._ready();\n      // Allowing stale data up to maxAge old\n      if (maxAge > 0) {\n        // While there are pending internal block requests...\n        while (this._internalBlockNumber) {\n          // ...\"remember\" which fetch we started with\n          const internalBlockNumber = this._internalBlockNumber;\n          try {\n            // Check the result is not too stale\n            const result = yield internalBlockNumber;\n            if (getTime() - result.respTime <= maxAge) {\n              return result.blockNumber;\n            }\n            // Too old; fetch a new value\n            break;\n          } catch (error) {\n            // The fetch rejected; if we are the first to get the\n            // rejection, drop through so we replace it with a new\n            // fetch; all others blocked will then get that fetch\n            // which won't match the one they \"remembered\" and loop\n            if (this._internalBlockNumber === internalBlockNumber) {\n              break;\n            }\n          }\n        }\n      }\n      const reqTime = getTime();\n      const checkInternalBlockNumber = resolveProperties({\n        blockNumber: this.perform(\"getBlockNumber\", {}),\n        networkError: this.getNetwork().then(network => null, error => error)\n      }).then(_ref => {\n        let {\n          blockNumber,\n          networkError\n        } = _ref;\n        if (networkError) {\n          // Unremember this bad internal block number\n          if (this._internalBlockNumber === checkInternalBlockNumber) {\n            this._internalBlockNumber = null;\n          }\n          throw networkError;\n        }\n        const respTime = getTime();\n        blockNumber = BigNumber.from(blockNumber).toNumber();\n        if (blockNumber < this._maxInternalBlockNumber) {\n          blockNumber = this._maxInternalBlockNumber;\n        }\n        this._maxInternalBlockNumber = blockNumber;\n        this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n        return {\n          blockNumber,\n          reqTime,\n          respTime\n        };\n      });\n      this._internalBlockNumber = checkInternalBlockNumber;\n      // Swallow unhandled exceptions; if needed they are handled else where\n      checkInternalBlockNumber.catch(error => {\n        // Don't null the dead (rejected) fetch, if it has already been updated\n        if (this._internalBlockNumber === checkInternalBlockNumber) {\n          this._internalBlockNumber = null;\n        }\n      });\n      return (yield checkInternalBlockNumber).blockNumber;\n    });\n  }\n  poll() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const pollId = nextPollId++;\n      // Track all running promises, so we can trigger a post-poll once they are complete\n      const runners = [];\n      let blockNumber = null;\n      try {\n        blockNumber = yield this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n      } catch (error) {\n        this.emit(\"error\", error);\n        return;\n      }\n      this._setFastBlockNumber(blockNumber);\n      // Emit a poll event after we have the latest (fast) block number\n      this.emit(\"poll\", pollId, blockNumber);\n      // If the block has not changed, meh.\n      if (blockNumber === this._lastBlockNumber) {\n        this.emit(\"didPoll\", pollId);\n        return;\n      }\n      // First polling cycle, trigger a \"block\" events\n      if (this._emitted.block === -2) {\n        this._emitted.block = blockNumber - 1;\n      }\n      if (Math.abs(this._emitted.block - blockNumber) > 1000) {\n        logger.warn(`network block skew detected; skipping block events (emitted=${this._emitted.block} blockNumber${blockNumber})`);\n        this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n          blockNumber: blockNumber,\n          event: \"blockSkew\",\n          previousBlockNumber: this._emitted.block\n        }));\n        this.emit(\"block\", blockNumber);\n      } else {\n        // Notify all listener for each block that has passed\n        for (let i = this._emitted.block + 1; i <= blockNumber; i++) {\n          this.emit(\"block\", i);\n        }\n      }\n      // The emitted block was updated, check for obsolete events\n      if (this._emitted.block !== blockNumber) {\n        this._emitted.block = blockNumber;\n        Object.keys(this._emitted).forEach(key => {\n          // The block event does not expire\n          if (key === \"block\") {\n            return;\n          }\n          // The block we were at when we emitted this event\n          const eventBlockNumber = this._emitted[key];\n          // We cannot garbage collect pending transactions or blocks here\n          // They should be garbage collected by the Provider when setting\n          // \"pending\" events\n          if (eventBlockNumber === \"pending\") {\n            return;\n          }\n          // Evict any transaction hashes or block hashes over 12 blocks\n          // old, since they should not return null anyways\n          if (blockNumber - eventBlockNumber > 12) {\n            delete this._emitted[key];\n          }\n        });\n      }\n      // First polling cycle\n      if (this._lastBlockNumber === -2) {\n        this._lastBlockNumber = blockNumber - 1;\n      }\n      // Find all transaction hashes we are waiting on\n      this._events.forEach(event => {\n        switch (event.type) {\n          case \"tx\":\n            {\n              const hash = event.hash;\n              let runner = this.getTransactionReceipt(hash).then(receipt => {\n                if (!receipt || receipt.blockNumber == null) {\n                  return null;\n                }\n                this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                this.emit(hash, receipt);\n                return null;\n              }).catch(error => {\n                this.emit(\"error\", error);\n              });\n              runners.push(runner);\n              break;\n            }\n          case \"filter\":\n            {\n              // We only allow a single getLogs to be in-flight at a time\n              if (!event._inflight) {\n                event._inflight = true;\n                // This is the first filter for this event, so we want to\n                // restrict events to events that happened no earlier than now\n                if (event._lastBlockNumber === -2) {\n                  event._lastBlockNumber = blockNumber - 1;\n                }\n                // Filter from the last *known* event; due to load-balancing\n                // and some nodes returning updated block numbers before\n                // indexing events, a logs result with 0 entries cannot be\n                // trusted and we must retry a range which includes it again\n                const filter = event.filter;\n                filter.fromBlock = event._lastBlockNumber + 1;\n                filter.toBlock = blockNumber;\n                // Prevent fitler ranges from growing too wild, since it is quite\n                // likely there just haven't been any events to move the lastBlockNumber.\n                const minFromBlock = filter.toBlock - this._maxFilterBlockRange;\n                if (minFromBlock > filter.fromBlock) {\n                  filter.fromBlock = minFromBlock;\n                }\n                if (filter.fromBlock < 0) {\n                  filter.fromBlock = 0;\n                }\n                const runner = this.getLogs(filter).then(logs => {\n                  // Allow the next getLogs\n                  event._inflight = false;\n                  if (logs.length === 0) {\n                    return;\n                  }\n                  logs.forEach(log => {\n                    // Only when we get an event for a given block number\n                    // can we trust the events are indexed\n                    if (log.blockNumber > event._lastBlockNumber) {\n                      event._lastBlockNumber = log.blockNumber;\n                    }\n                    // Make sure we stall requests to fetch blocks and txs\n                    this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                    this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n                    this.emit(filter, log);\n                  });\n                }).catch(error => {\n                  this.emit(\"error\", error);\n                  // Allow another getLogs (the range was not updated)\n                  event._inflight = false;\n                });\n                runners.push(runner);\n              }\n              break;\n            }\n        }\n      });\n      this._lastBlockNumber = blockNumber;\n      // Once all events for this loop have been processed, emit \"didPoll\"\n      Promise.all(runners).then(() => {\n        this.emit(\"didPoll\", pollId);\n      }).catch(error => {\n        this.emit(\"error\", error);\n      });\n      return;\n    });\n  }\n  // Deprecated; do not use this\n  resetEventsBlock(blockNumber) {\n    this._lastBlockNumber = blockNumber - 1;\n    if (this.polling) {\n      this.poll();\n    }\n  }\n  get network() {\n    return this._network;\n  }\n  // This method should query the network if the underlying network\n  // can change, such as when connected to a JSON-RPC backend\n  detectNetwork() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"provider.detectNetwork\"\n      });\n    });\n  }\n  getNetwork() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const network = yield this._ready();\n      // Make sure we are still connected to the same network; this is\n      // only an external call for backends which can have the underlying\n      // network change spontaneously\n      const currentNetwork = yield this.detectNetwork();\n      if (network.chainId !== currentNetwork.chainId) {\n        // We are allowing network changes, things can get complex fast;\n        // make sure you know what you are doing if you use \"any\"\n        if (this.anyNetwork) {\n          this._network = currentNetwork;\n          // Reset all internal block number guards and caches\n          this._lastBlockNumber = -2;\n          this._fastBlockNumber = null;\n          this._fastBlockNumberPromise = null;\n          this._fastQueryDate = 0;\n          this._emitted.block = -2;\n          this._maxInternalBlockNumber = -1024;\n          this._internalBlockNumber = null;\n          // The \"network\" event MUST happen before this method resolves\n          // so any events have a chance to unregister, so we stall an\n          // additional event loop before returning from /this/ call\n          this.emit(\"network\", currentNetwork, network);\n          yield stall(0);\n          return this._network;\n        }\n        const error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n          event: \"changed\",\n          network: network,\n          detectedNetwork: currentNetwork\n        });\n        this.emit(\"error\", error);\n        throw error;\n      }\n      return network;\n    });\n  }\n  get blockNumber() {\n    this._getInternalBlockNumber(100 + this.pollingInterval / 2).then(blockNumber => {\n      this._setFastBlockNumber(blockNumber);\n    }, error => {});\n    return this._fastBlockNumber != null ? this._fastBlockNumber : -1;\n  }\n  get polling() {\n    return this._poller != null;\n  }\n  set polling(value) {\n    if (value && !this._poller) {\n      this._poller = setInterval(() => {\n        this.poll();\n      }, this.pollingInterval);\n      if (!this._bootstrapPoll) {\n        this._bootstrapPoll = setTimeout(() => {\n          this.poll();\n          // We block additional polls until the polling interval\n          // is done, to prevent overwhelming the poll function\n          this._bootstrapPoll = setTimeout(() => {\n            // If polling was disabled, something may require a poke\n            // since starting the bootstrap poll and it was disabled\n            if (!this._poller) {\n              this.poll();\n            }\n            // Clear out the bootstrap so we can do another\n            this._bootstrapPoll = null;\n          }, this.pollingInterval);\n        }, 0);\n      }\n    } else if (!value && this._poller) {\n      clearInterval(this._poller);\n      this._poller = null;\n    }\n  }\n  get pollingInterval() {\n    return this._pollingInterval;\n  }\n  set pollingInterval(value) {\n    if (typeof value !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n      throw new Error(\"invalid polling interval\");\n    }\n    this._pollingInterval = value;\n    if (this._poller) {\n      clearInterval(this._poller);\n      this._poller = setInterval(() => {\n        this.poll();\n      }, this._pollingInterval);\n    }\n  }\n  _getFastBlockNumber() {\n    const now = getTime();\n    // Stale block number, request a newer value\n    if (now - this._fastQueryDate > 2 * this._pollingInterval) {\n      this._fastQueryDate = now;\n      this._fastBlockNumberPromise = this.getBlockNumber().then(blockNumber => {\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n          this._fastBlockNumber = blockNumber;\n        }\n        return this._fastBlockNumber;\n      });\n    }\n    return this._fastBlockNumberPromise;\n  }\n  _setFastBlockNumber(blockNumber) {\n    // Older block, maybe a stale request\n    if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {\n      return;\n    }\n    // Update the time we updated the blocknumber\n    this._fastQueryDate = getTime();\n    // Newer block number, use  it\n    if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n      this._fastBlockNumber = blockNumber;\n      this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n    }\n  }\n  waitForTransaction(transactionHash, confirmations, timeout) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._waitForTransaction(transactionHash, confirmations == null ? 1 : confirmations, timeout || 0, null);\n    });\n  }\n  _waitForTransaction(transactionHash, confirmations, timeout, replaceable) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const receipt = yield this.getTransactionReceipt(transactionHash);\n      // Receipt is already good\n      if ((receipt ? receipt.confirmations : 0) >= confirmations) {\n        return receipt;\n      }\n      // Poll until the receipt is good...\n      return new Promise((resolve, reject) => {\n        const cancelFuncs = [];\n        let done = false;\n        const alreadyDone = function () {\n          if (done) {\n            return true;\n          }\n          done = true;\n          cancelFuncs.forEach(func => {\n            func();\n          });\n          return false;\n        };\n        const minedHandler = receipt => {\n          if (receipt.confirmations < confirmations) {\n            return;\n          }\n          if (alreadyDone()) {\n            return;\n          }\n          resolve(receipt);\n        };\n        this.on(transactionHash, minedHandler);\n        cancelFuncs.push(() => {\n          this.removeListener(transactionHash, minedHandler);\n        });\n        if (replaceable) {\n          let lastBlockNumber = replaceable.startBlock;\n          let scannedBlock = null;\n          const replaceHandler = blockNumber => __awaiter(this, void 0, void 0, function* () {\n            if (done) {\n              return;\n            }\n            // Wait 1 second; this is only used in the case of a fault, so\n            // we will trade off a little bit of latency for more consistent\n            // results and fewer JSON-RPC calls\n            yield stall(1000);\n            this.getTransactionCount(replaceable.from).then(nonce => __awaiter(this, void 0, void 0, function* () {\n              if (done) {\n                return;\n              }\n              if (nonce <= replaceable.nonce) {\n                lastBlockNumber = blockNumber;\n              } else {\n                // First check if the transaction was mined\n                {\n                  const mined = yield this.getTransaction(transactionHash);\n                  if (mined && mined.blockNumber != null) {\n                    return;\n                  }\n                }\n                // First time scanning. We start a little earlier for some\n                // wiggle room here to handle the eventually consistent nature\n                // of blockchain (e.g. the getTransactionCount was for a\n                // different block)\n                if (scannedBlock == null) {\n                  scannedBlock = lastBlockNumber - 3;\n                  if (scannedBlock < replaceable.startBlock) {\n                    scannedBlock = replaceable.startBlock;\n                  }\n                }\n                while (scannedBlock <= blockNumber) {\n                  if (done) {\n                    return;\n                  }\n                  const block = yield this.getBlockWithTransactions(scannedBlock);\n                  for (let ti = 0; ti < block.transactions.length; ti++) {\n                    const tx = block.transactions[ti];\n                    // Successfully mined!\n                    if (tx.hash === transactionHash) {\n                      return;\n                    }\n                    // Matches our transaction from and nonce; its a replacement\n                    if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {\n                      if (done) {\n                        return;\n                      }\n                      // Get the receipt of the replacement\n                      const receipt = yield this.waitForTransaction(tx.hash, confirmations);\n                      // Already resolved or rejected (prolly a timeout)\n                      if (alreadyDone()) {\n                        return;\n                      }\n                      // The reason we were replaced\n                      let reason = \"replaced\";\n                      if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                        reason = \"repriced\";\n                      } else if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                        reason = \"cancelled\";\n                      }\n                      // Explain why we were replaced\n                      reject(logger.makeError(\"transaction was replaced\", Logger.errors.TRANSACTION_REPLACED, {\n                        cancelled: reason === \"replaced\" || reason === \"cancelled\",\n                        reason,\n                        replacement: this._wrapTransaction(tx),\n                        hash: transactionHash,\n                        receipt\n                      }));\n                      return;\n                    }\n                  }\n                  scannedBlock++;\n                }\n              }\n              if (done) {\n                return;\n              }\n              this.once(\"block\", replaceHandler);\n            }), error => {\n              if (done) {\n                return;\n              }\n              this.once(\"block\", replaceHandler);\n            });\n          });\n          if (done) {\n            return;\n          }\n          this.once(\"block\", replaceHandler);\n          cancelFuncs.push(() => {\n            this.removeListener(\"block\", replaceHandler);\n          });\n        }\n        if (typeof timeout === \"number\" && timeout > 0) {\n          const timer = setTimeout(() => {\n            if (alreadyDone()) {\n              return;\n            }\n            reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, {\n              timeout: timeout\n            }));\n          }, timeout);\n          if (timer.unref) {\n            timer.unref();\n          }\n          cancelFuncs.push(() => {\n            clearTimeout(timer);\n          });\n        }\n      });\n    });\n  }\n  getBlockNumber() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._getInternalBlockNumber(0);\n    });\n  }\n  getGasPrice() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const result = yield this.perform(\"getGasPrice\", {});\n      try {\n        return BigNumber.from(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getGasPrice\",\n          result,\n          error\n        });\n      }\n    });\n  }\n  getBalance(addressOrName, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag)\n      });\n      const result = yield this.perform(\"getBalance\", params);\n      try {\n        return BigNumber.from(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getBalance\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n  getTransactionCount(addressOrName, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag)\n      });\n      const result = yield this.perform(\"getTransactionCount\", params);\n      try {\n        return BigNumber.from(result).toNumber();\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getTransactionCount\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n  getCode(addressOrName, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag)\n      });\n      const result = yield this.perform(\"getCode\", params);\n      try {\n        return hexlify(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getCode\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n  getStorageAt(addressOrName, position, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag),\n        position: Promise.resolve(position).then(p => hexValue(p))\n      });\n      const result = yield this.perform(\"getStorageAt\", params);\n      try {\n        return hexlify(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getStorageAt\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n  // This should be called by any subclass wrapping a TransactionResponse\n  _wrapTransaction(tx, hash, startBlock) {\n    if (hash != null && hexDataLength(hash) !== 32) {\n      throw new Error(\"invalid response - sendTransaction\");\n    }\n    const result = tx;\n    // Check the hash we expect is the same as the hash the server reported\n    if (hash != null && tx.hash !== hash) {\n      logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, {\n        expectedHash: tx.hash,\n        returnedHash: hash\n      });\n    }\n    result.wait = (confirms, timeout) => __awaiter(this, void 0, void 0, function* () {\n      if (confirms == null) {\n        confirms = 1;\n      }\n      if (timeout == null) {\n        timeout = 0;\n      }\n      // Get the details to detect replacement\n      let replacement = undefined;\n      if (confirms !== 0 && startBlock != null) {\n        replacement = {\n          data: tx.data,\n          from: tx.from,\n          nonce: tx.nonce,\n          to: tx.to,\n          value: tx.value,\n          startBlock\n        };\n      }\n      const receipt = yield this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n      if (receipt == null && confirms === 0) {\n        return null;\n      }\n      // No longer pending, allow the polling loop to garbage collect this\n      this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n      if (receipt.status === 0) {\n        logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n          transactionHash: tx.hash,\n          transaction: tx,\n          receipt: receipt\n        });\n      }\n      return receipt;\n    });\n    return result;\n  }\n  sendTransaction(signedTransaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const hexTx = yield Promise.resolve(signedTransaction).then(t => hexlify(t));\n      const tx = this.formatter.transaction(signedTransaction);\n      if (tx.confirmations == null) {\n        tx.confirmations = 0;\n      }\n      const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n      try {\n        const hash = yield this.perform(\"sendTransaction\", {\n          signedTransaction: hexTx\n        });\n        return this._wrapTransaction(tx, hash, blockNumber);\n      } catch (error) {\n        error.transaction = tx;\n        error.transactionHash = tx.hash;\n        throw error;\n      }\n    });\n  }\n  _getTransactionRequest(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const values = yield transaction;\n      const tx = {};\n      [\"from\", \"to\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n        tx[key] = Promise.resolve(values[key]).then(v => v ? this._getAddress(v) : null);\n      });\n      [\"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"value\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n        tx[key] = Promise.resolve(values[key]).then(v => v ? BigNumber.from(v) : null);\n      });\n      [\"type\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n        tx[key] = Promise.resolve(values[key]).then(v => v != null ? v : null);\n      });\n      if (values.accessList) {\n        tx.accessList = this.formatter.accessList(values.accessList);\n      }\n      [\"data\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n        tx[key] = Promise.resolve(values[key]).then(v => v ? hexlify(v) : null);\n      });\n      return this.formatter.transactionRequest(yield resolveProperties(tx));\n    });\n  }\n  _getFilter(filter) {\n    return __awaiter(this, void 0, void 0, function* () {\n      filter = yield filter;\n      const result = {};\n      if (filter.address != null) {\n        result.address = this._getAddress(filter.address);\n      }\n      [\"blockHash\", \"topics\"].forEach(key => {\n        if (filter[key] == null) {\n          return;\n        }\n        result[key] = filter[key];\n      });\n      [\"fromBlock\", \"toBlock\"].forEach(key => {\n        if (filter[key] == null) {\n          return;\n        }\n        result[key] = this._getBlockTag(filter[key]);\n      });\n      return this.formatter.filter(yield resolveProperties(result));\n    });\n  }\n  _call(transaction, blockTag, attempt) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (attempt >= MAX_CCIP_REDIRECTS) {\n        logger.throwError(\"CCIP read exceeded maximum redirections\", Logger.errors.SERVER_ERROR, {\n          redirects: attempt,\n          transaction\n        });\n      }\n      const txSender = transaction.to;\n      const result = yield this.perform(\"call\", {\n        transaction,\n        blockTag\n      });\n      // CCIP Read request via OffchainLookup(address,string[],bytes,bytes4,bytes)\n      if (attempt >= 0 && blockTag === \"latest\" && txSender != null && result.substring(0, 10) === \"0x556f1830\" && hexDataLength(result) % 32 === 4) {\n        try {\n          const data = hexDataSlice(result, 4);\n          // Check the sender of the OffchainLookup matches the transaction\n          const sender = hexDataSlice(data, 0, 32);\n          if (!BigNumber.from(sender).eq(txSender)) {\n            logger.throwError(\"CCIP Read sender did not match\", Logger.errors.CALL_EXCEPTION, {\n              name: \"OffchainLookup\",\n              signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n              transaction,\n              data: result\n            });\n          }\n          // Read the URLs from the response\n          const urls = [];\n          const urlsOffset = BigNumber.from(hexDataSlice(data, 32, 64)).toNumber();\n          const urlsLength = BigNumber.from(hexDataSlice(data, urlsOffset, urlsOffset + 32)).toNumber();\n          const urlsData = hexDataSlice(data, urlsOffset + 32);\n          for (let u = 0; u < urlsLength; u++) {\n            const url = _parseString(urlsData, u * 32);\n            if (url == null) {\n              logger.throwError(\"CCIP Read contained corrupt URL string\", Logger.errors.CALL_EXCEPTION, {\n                name: \"OffchainLookup\",\n                signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                transaction,\n                data: result\n              });\n            }\n            urls.push(url);\n          }\n          // Get the CCIP calldata to forward\n          const calldata = _parseBytes(data, 64);\n          // Get the callbackSelector (bytes4)\n          if (!BigNumber.from(hexDataSlice(data, 100, 128)).isZero()) {\n            logger.throwError(\"CCIP Read callback selector included junk\", Logger.errors.CALL_EXCEPTION, {\n              name: \"OffchainLookup\",\n              signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n              transaction,\n              data: result\n            });\n          }\n          const callbackSelector = hexDataSlice(data, 96, 100);\n          // Get the extra data to send back to the contract as context\n          const extraData = _parseBytes(data, 128);\n          const ccipResult = yield this.ccipReadFetch(transaction, calldata, urls);\n          if (ccipResult == null) {\n            logger.throwError(\"CCIP Read disabled or provided no URLs\", Logger.errors.CALL_EXCEPTION, {\n              name: \"OffchainLookup\",\n              signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n              transaction,\n              data: result\n            });\n          }\n          const tx = {\n            to: txSender,\n            data: hexConcat([callbackSelector, encodeBytes([ccipResult, extraData])])\n          };\n          return this._call(tx, blockTag, attempt + 1);\n        } catch (error) {\n          if (error.code === Logger.errors.SERVER_ERROR) {\n            throw error;\n          }\n        }\n      }\n      try {\n        return hexlify(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"call\",\n          params: {\n            transaction,\n            blockTag\n          },\n          result,\n          error\n        });\n      }\n    });\n  }\n  call(transaction, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const resolved = yield resolveProperties({\n        transaction: this._getTransactionRequest(transaction),\n        blockTag: this._getBlockTag(blockTag),\n        ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)\n      });\n      return this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0 : -1);\n    });\n  }\n  estimateGas(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        transaction: this._getTransactionRequest(transaction)\n      });\n      const result = yield this.perform(\"estimateGas\", params);\n      try {\n        return BigNumber.from(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"estimateGas\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n  _getAddress(addressOrName) {\n    return __awaiter(this, void 0, void 0, function* () {\n      addressOrName = yield addressOrName;\n      if (typeof addressOrName !== \"string\") {\n        logger.throwArgumentError(\"invalid address or ENS name\", \"name\", addressOrName);\n      }\n      const address = yield this.resolveName(addressOrName);\n      if (address == null) {\n        logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: `resolveName(${JSON.stringify(addressOrName)})`\n        });\n      }\n      return address;\n    });\n  }\n  _getBlock(blockHashOrBlockTag, includeTransactions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      blockHashOrBlockTag = yield blockHashOrBlockTag;\n      // If blockTag is a number (not \"latest\", etc), this is the block number\n      let blockNumber = -128;\n      const params = {\n        includeTransactions: !!includeTransactions\n      };\n      if (isHexString(blockHashOrBlockTag, 32)) {\n        params.blockHash = blockHashOrBlockTag;\n      } else {\n        try {\n          params.blockTag = yield this._getBlockTag(blockHashOrBlockTag);\n          if (isHexString(params.blockTag)) {\n            blockNumber = parseInt(params.blockTag.substring(2), 16);\n          }\n        } catch (error) {\n          logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n        }\n      }\n      return poll(() => __awaiter(this, void 0, void 0, function* () {\n        const block = yield this.perform(\"getBlock\", params);\n        // Block was not found\n        if (block == null) {\n          // For blockhashes, if we didn't say it existed, that blockhash may\n          // not exist. If we did see it though, perhaps from a log, we know\n          // it exists, and this node is just not caught up yet.\n          if (params.blockHash != null) {\n            if (this._emitted[\"b:\" + params.blockHash] == null) {\n              return null;\n            }\n          }\n          // For block tags, if we are asking for a future block, we return null\n          if (params.blockTag != null) {\n            if (blockNumber > this._emitted.block) {\n              return null;\n            }\n          }\n          // Retry on the next block\n          return undefined;\n        }\n        // Add transactions\n        if (includeTransactions) {\n          let blockNumber = null;\n          for (let i = 0; i < block.transactions.length; i++) {\n            const tx = block.transactions[i];\n            if (tx.blockNumber == null) {\n              tx.confirmations = 0;\n            } else if (tx.confirmations == null) {\n              if (blockNumber == null) {\n                blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n              }\n              // Add the confirmations using the fast block number (pessimistic)\n              let confirmations = blockNumber - tx.blockNumber + 1;\n              if (confirmations <= 0) {\n                confirmations = 1;\n              }\n              tx.confirmations = confirmations;\n            }\n          }\n          const blockWithTxs = this.formatter.blockWithTransactions(block);\n          blockWithTxs.transactions = blockWithTxs.transactions.map(tx => this._wrapTransaction(tx));\n          return blockWithTxs;\n        }\n        return this.formatter.block(block);\n      }), {\n        oncePoll: this\n      });\n    });\n  }\n  getBlock(blockHashOrBlockTag) {\n    return this._getBlock(blockHashOrBlockTag, false);\n  }\n  getBlockWithTransactions(blockHashOrBlockTag) {\n    return this._getBlock(blockHashOrBlockTag, true);\n  }\n  getTransaction(transactionHash) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      transactionHash = yield transactionHash;\n      const params = {\n        transactionHash: this.formatter.hash(transactionHash, true)\n      };\n      return poll(() => __awaiter(this, void 0, void 0, function* () {\n        const result = yield this.perform(\"getTransaction\", params);\n        if (result == null) {\n          if (this._emitted[\"t:\" + transactionHash] == null) {\n            return null;\n          }\n          return undefined;\n        }\n        const tx = this.formatter.transactionResponse(result);\n        if (tx.blockNumber == null) {\n          tx.confirmations = 0;\n        } else if (tx.confirmations == null) {\n          const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n          // Add the confirmations using the fast block number (pessimistic)\n          let confirmations = blockNumber - tx.blockNumber + 1;\n          if (confirmations <= 0) {\n            confirmations = 1;\n          }\n          tx.confirmations = confirmations;\n        }\n        return this._wrapTransaction(tx);\n      }), {\n        oncePoll: this\n      });\n    });\n  }\n  getTransactionReceipt(transactionHash) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      transactionHash = yield transactionHash;\n      const params = {\n        transactionHash: this.formatter.hash(transactionHash, true)\n      };\n      return poll(() => __awaiter(this, void 0, void 0, function* () {\n        const result = yield this.perform(\"getTransactionReceipt\", params);\n        if (result == null) {\n          if (this._emitted[\"t:\" + transactionHash] == null) {\n            return null;\n          }\n          return undefined;\n        }\n        // \"geth-etc\" returns receipts before they are ready\n        if (result.blockHash == null) {\n          return undefined;\n        }\n        const receipt = this.formatter.receipt(result);\n        if (receipt.blockNumber == null) {\n          receipt.confirmations = 0;\n        } else if (receipt.confirmations == null) {\n          const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n          // Add the confirmations using the fast block number (pessimistic)\n          let confirmations = blockNumber - receipt.blockNumber + 1;\n          if (confirmations <= 0) {\n            confirmations = 1;\n          }\n          receipt.confirmations = confirmations;\n        }\n        return receipt;\n      }), {\n        oncePoll: this\n      });\n    });\n  }\n  getLogs(filter) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        filter: this._getFilter(filter)\n      });\n      const logs = yield this.perform(\"getLogs\", params);\n      logs.forEach(log => {\n        if (log.removed == null) {\n          log.removed = false;\n        }\n      });\n      return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n    });\n  }\n  getEtherPrice() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      return this.perform(\"getEtherPrice\", {});\n    });\n  }\n  _getBlockTag(blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      blockTag = yield blockTag;\n      if (typeof blockTag === \"number\" && blockTag < 0) {\n        if (blockTag % 1) {\n          logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n        }\n        let blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n        blockNumber += blockTag;\n        if (blockNumber < 0) {\n          blockNumber = 0;\n        }\n        return this.formatter.blockTag(blockNumber);\n      }\n      return this.formatter.blockTag(blockTag);\n    });\n  }\n  getResolver(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let currentName = name;\n      while (true) {\n        if (currentName === \"\" || currentName === \".\") {\n          return null;\n        }\n        // Optimization since the eth node cannot change and does\n        // not have a wildcard resolver\n        if (name !== \"eth\" && currentName === \"eth\") {\n          return null;\n        }\n        // Check the current node for a resolver\n        const addr = yield this._getResolver(currentName, \"getResolver\");\n        // Found a resolver!\n        if (addr != null) {\n          const resolver = new Resolver(this, addr, name);\n          // Legacy resolver found, using EIP-2544 so it isn't safe to use\n          if (currentName !== name && !(yield resolver.supportsWildcard())) {\n            return null;\n          }\n          return resolver;\n        }\n        // Get the parent node\n        currentName = currentName.split(\".\").slice(1).join(\".\");\n      }\n    });\n  }\n  _getResolver(name, operation) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (operation == null) {\n        operation = \"ENS\";\n      }\n      const network = yield this.getNetwork();\n      // No ENS...\n      if (!network.ensAddress) {\n        logger.throwError(\"network does not support ENS\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation,\n          network: network.name\n        });\n      }\n      try {\n        // keccak256(\"resolver(bytes32)\")\n        const addrData = yield this.call({\n          to: network.ensAddress,\n          data: \"0x0178b8bf\" + namehash(name).substring(2)\n        });\n        return this.formatter.callAddress(addrData);\n      } catch (error) {\n        // ENS registry cannot throw errors on resolver(bytes32)\n      }\n      return null;\n    });\n  }\n  resolveName(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      name = yield name;\n      // If it is already an address, nothing to resolve\n      try {\n        return Promise.resolve(this.formatter.address(name));\n      } catch (error) {\n        // If is is a hexstring, the address is bad (See #694)\n        if (isHexString(name)) {\n          throw error;\n        }\n      }\n      if (typeof name !== \"string\") {\n        logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n      }\n      // Get the addr from the resolver\n      const resolver = yield this.getResolver(name);\n      if (!resolver) {\n        return null;\n      }\n      return yield resolver.getAddress();\n    });\n  }\n  lookupAddress(address) {\n    return __awaiter(this, void 0, void 0, function* () {\n      address = yield address;\n      address = this.formatter.address(address);\n      const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n      const resolverAddr = yield this._getResolver(node, \"lookupAddress\");\n      if (resolverAddr == null) {\n        return null;\n      }\n      // keccak(\"name(bytes32)\")\n      const name = _parseString(yield this.call({\n        to: resolverAddr,\n        data: \"0x691f3431\" + namehash(node).substring(2)\n      }), 0);\n      const addr = yield this.resolveName(name);\n      if (addr != address) {\n        return null;\n      }\n      return name;\n    });\n  }\n  getAvatar(nameOrAddress) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let resolver = null;\n      if (isHexString(nameOrAddress)) {\n        // Address; reverse lookup\n        const address = this.formatter.address(nameOrAddress);\n        const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n        const resolverAddress = yield this._getResolver(node, \"getAvatar\");\n        if (!resolverAddress) {\n          return null;\n        }\n        // Try resolving the avatar against the addr.reverse resolver\n        resolver = new Resolver(this, resolverAddress, node);\n        try {\n          const avatar = yield resolver.getAvatar();\n          if (avatar) {\n            return avatar.url;\n          }\n        } catch (error) {\n          if (error.code !== Logger.errors.CALL_EXCEPTION) {\n            throw error;\n          }\n        }\n        // Try getting the name and performing forward lookup; allowing wildcards\n        try {\n          // keccak(\"name(bytes32)\")\n          const name = _parseString(yield this.call({\n            to: resolverAddress,\n            data: \"0x691f3431\" + namehash(node).substring(2)\n          }), 0);\n          resolver = yield this.getResolver(name);\n        } catch (error) {\n          if (error.code !== Logger.errors.CALL_EXCEPTION) {\n            throw error;\n          }\n          return null;\n        }\n      } else {\n        // ENS name; forward lookup with wildcard\n        resolver = yield this.getResolver(nameOrAddress);\n        if (!resolver) {\n          return null;\n        }\n      }\n      const avatar = yield resolver.getAvatar();\n      if (avatar == null) {\n        return null;\n      }\n      return avatar.url;\n    });\n  }\n  perform(method, params) {\n    return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, {\n      operation: method\n    });\n  }\n  _startEvent(event) {\n    this.polling = this._events.filter(e => e.pollable()).length > 0;\n  }\n  _stopEvent(event) {\n    this.polling = this._events.filter(e => e.pollable()).length > 0;\n  }\n  _addEventListener(eventName, listener, once) {\n    const event = new Event(getEventTag(eventName), listener, once);\n    this._events.push(event);\n    this._startEvent(event);\n    return this;\n  }\n  on(eventName, listener) {\n    return this._addEventListener(eventName, listener, false);\n  }\n  once(eventName, listener) {\n    return this._addEventListener(eventName, listener, true);\n  }\n  emit(eventName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    let result = false;\n    let stopped = [];\n    let eventTag = getEventTag(eventName);\n    this._events = this._events.filter(event => {\n      if (event.tag !== eventTag) {\n        return true;\n      }\n      setTimeout(() => {\n        event.listener.apply(this, args);\n      }, 0);\n      result = true;\n      if (event.once) {\n        stopped.push(event);\n        return false;\n      }\n      return true;\n    });\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n    return result;\n  }\n  listenerCount(eventName) {\n    if (!eventName) {\n      return this._events.length;\n    }\n    let eventTag = getEventTag(eventName);\n    return this._events.filter(event => {\n      return event.tag === eventTag;\n    }).length;\n  }\n  listeners(eventName) {\n    if (eventName == null) {\n      return this._events.map(event => event.listener);\n    }\n    let eventTag = getEventTag(eventName);\n    return this._events.filter(event => event.tag === eventTag).map(event => event.listener);\n  }\n  off(eventName, listener) {\n    if (listener == null) {\n      return this.removeAllListeners(eventName);\n    }\n    const stopped = [];\n    let found = false;\n    let eventTag = getEventTag(eventName);\n    this._events = this._events.filter(event => {\n      if (event.tag !== eventTag || event.listener != listener) {\n        return true;\n      }\n      if (found) {\n        return true;\n      }\n      found = true;\n      stopped.push(event);\n      return false;\n    });\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n    return this;\n  }\n  removeAllListeners(eventName) {\n    let stopped = [];\n    if (eventName == null) {\n      stopped = this._events;\n      this._events = [];\n    } else {\n      const eventTag = getEventTag(eventName);\n      this._events = this._events.filter(event => {\n        if (event.tag !== eventTag) {\n          return true;\n        }\n        stopped.push(event);\n        return false;\n      });\n    }\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n    return this;\n  }\n}","map":{"version":3,"sources":["../src.ts/base-provider.ts"],"names":[],"mappings":"AAAA,YAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEZ,SACkF,SAAS,EACxE,QAAQ,QACpB,kCAAkC;AACzC,SAAS,MAAM,IAAI,YAAY,QAAQ,uBAAuB;AAC9D,SAAS,MAAM,QAAQ,sBAAsB;AAC7C,SAAS,SAAS,QAAsB,0BAA0B;AAClE,SAAS,QAAQ,EAAa,MAAM,EAAE,SAAS,EAAE,aAAa,EAAE,YAAY,EAAE,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,WAAW,QAAQ,sBAAsB;AACtJ,SAAS,QAAQ,QAAQ,0BAA0B;AACnD,SAAS,SAAS,EAAE,QAAQ,QAAQ,qBAAqB;AACzD,SAAS,UAAU,QAA6B,yBAAyB;AACzE,SAAqB,cAAc,EAAE,SAAS,EAAE,iBAAiB,QAAQ,2BAA2B;AAEpG,SAAS,MAAM,QAAQ,qBAAqB;AAC5C,SAAS,WAAW,EAAE,YAAY,QAAQ,wBAAwB;AAClE,SAAS,SAAS,EAAE,IAAI,QAAQ,oBAAoB;AAEpD,OAAO,MAAM,MAAM,QAAQ;AAE3B,SAAS,MAAM,QAAQ,uBAAuB;AAC9C,SAAS,OAAO,QAAQ,YAAY;AACpC,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,OAAO,CAAC;AAElC,SAAS,SAAS,QAAQ,aAAa;AAEvC,MAAM,kBAAkB,GAAG,EAAE;AAE7B;AACA;AAEA,SAAS,UAAU,CAAC,KAAa,EAAA;EAC5B,IAAI,KAAK,IAAI,IAAI,EAAE;IAAE,OAAO,MAAM;EAAG;EACrC,IAAI,aAAa,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE;IAC7B,MAAM,CAAC,kBAAkB,CAAC,eAAe,EAAE,OAAO,EAAE,KAAK,CAAC;EAC7D;EACD,OAAO,KAAK,CAAC,WAAW,EAAE;AAC/B;AAEA,SAAS,eAAe,CAAC,MAAqC,EAAA;EAC1D;EACA,MAAM,GAAG,MAAM,CAAC,KAAK,EAAE;EACvB,OAAO,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,IAAI,EAAE;IAAE,MAAM,CAAC,GAAG,EAAE;EAAG;EAEhF,OAAO,MAAM,CAAC,GAAG,CAAE,KAAK,IAAI;IACxB,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;MAEtB;MACA,MAAM,MAAM,GAAmC,CAAA,CAAG;MAClD,KAAK,CAAC,OAAO,CAAE,KAAK,IAAI;QACpB,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI;MACpC,CAAC,CAAC;MAEF;MACA,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;MAClC,MAAM,CAAC,IAAI,EAAE;MAEb,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;KAE1B,MAAM;MACH,OAAO,UAAU,CAAC,KAAK,CAAC;IAC3B;EACL,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;AAChB;AAEA,SAAS,iBAAiB,CAAC,IAAY,EAAA;EACnC,IAAI,IAAI,KAAK,EAAE,EAAE;IAAE,OAAO,EAAG;EAAG;EAEhC,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAE,KAAK,IAAI;IAClC,IAAI,KAAK,KAAK,EAAE,EAAE;MAAE,OAAO,EAAG;IAAG;IAEjC,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAE,KAAK,IAAI;MACzC,OAAS,KAAK,KAAK,MAAM,GAAI,IAAI,GAAE,KAAK;IAC5C,CAAC,CAAC;IAEF,OAAS,KAAK,CAAC,MAAM,KAAK,CAAC,GAAI,KAAK,CAAC,CAAC,CAAC,GAAE,KAAK;EAClD,CAAC,CAAC;AACN;AAEA,SAAS,WAAW,CAAC,SAAoB,EAAA;EACrC,IAAI,OAAO,SAAU,KAAK,QAAQ,EAAE;IAChC,SAAS,GAAG,SAAS,CAAC,WAAW,EAAE;IAEnC,IAAI,aAAa,CAAC,SAAS,CAAC,KAAK,EAAE,EAAE;MACjC,OAAO,KAAK,GAAG,SAAS;IAC3B;IAED,IAAI,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;MAC/B,OAAO,SAAS;IACnB;GAEJ,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;IACjC,OAAO,WAAW,GAAG,eAAe,CAAC,SAAS,CAAC;GAElD,MAAM,IAAI,SAAS,CAAC,WAAW,CAAC,SAAS,CAAC,EAAE;IACzC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC;IAC9B,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC;GAErC,MAAM,IAAI,SAAS,IAAI,OAAO,SAAU,KAAK,QAAQ,EAAE;IACpD,OAAO,SAAS,IAAI,SAAS,CAAC,OAAO,IAAI,GAAG,CAAC,GAAG,GAAG,GAAG,eAAe,CAAC,SAAS,CAAC,MAAM,IAAI,EAAE,CAAC;EAChG;EAED,MAAM,IAAI,KAAK,CAAC,kBAAkB,GAAG,SAAS,CAAC;AACnD;AAEA;AACA;AAEA,SAAS,OAAO,GAAA;EACZ,OAAQ,IAAI,IAAI,EAAE,CAAE,OAAO,EAAE;AACjC;AAEA,SAAS,KAAK,CAAC,QAAgB,EAAA;EAC3B,OAAO,IAAI,OAAO,CAAE,OAAO,IAAI;IAC3B,UAAU,CAAC,OAAO,EAAE,QAAQ,CAAC;EACjC,CAAC,CAAC;AACN;AAEA;AACA;AAGA;;;;;;;;;;;AAWG;AAEH,MAAM,cAAc,GAAG,CAAE,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,MAAM,CAAE;AAEhE,OAAM,MAAO,KAAK,CAAA;EAQd,WAAA,CAAY,GAAW,EAAE,QAAkB,EAAE,IAAa,EAAA;IACtD,cAAc,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC;IAChC,cAAc,CAAC,IAAI,EAAE,UAAU,EAAE,QAAQ,CAAC;IAC1C,cAAc,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC;IAElC,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC;IAC1B,IAAI,CAAC,SAAS,GAAG,KAAK;EAC1B;EAEA,IAAI,KAAK,GAAA;IACL,QAAQ,IAAI,CAAC,IAAI;MACb,KAAK,IAAI;QACN,OAAO,IAAI,CAAC,IAAI;MACnB,KAAK,QAAQ;QACV,OAAO,IAAI,CAAC,MAAM;IAAC;IAE1B,OAAO,IAAI,CAAC,GAAG;EACnB;EAEA,IAAI,IAAI,GAAA;IACJ,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACjC;EAEA,IAAI,IAAI,GAAA;IACJ,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC;IACjC,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;MAAE,OAAO,IAAI;IAAG;IACvC,OAAO,KAAK,CAAC,CAAC,CAAC;EACnB;EAEA,IAAI,MAAM,GAAA;IACN,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC;IACjC,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;MAAE,OAAO,IAAI;IAAG;IAC3C,MAAM,OAAO,GAAG,KAAK,CAAC,CAAC,CAAC;IAExB,MAAM,MAAM,GAAG,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC1C,MAAM,MAAM,GAAW,CAAA,CAAG;IAE1B,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;MAAE,MAAM,CAAC,MAAM,GAAG,MAAM;IAAG;IAClD,IAAI,OAAO,IAAI,OAAO,KAAK,GAAG,EAAE;MAAE,MAAM,CAAC,OAAO,GAAG,OAAO;IAAG;IAE7D,OAAO,MAAM;EACjB;EAEA,QAAQ,GAAA;IACJ,OAAQ,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC;EAC/E;AACH;AAqBA;AAgBD;AACA,MAAM,SAAS,GAAuC;EAClD,GAAG,EAAI;IAAE,MAAM,EAAE,KAAK;IAAG,KAAK,EAAE,IAAI;IAAE,IAAI,EAAE,IAAI;IAAE,MAAM,EAAE;EAAI,CAAE;EAChE,GAAG,EAAI;IAAE,MAAM,EAAE,KAAK;IAAG,KAAK,EAAE,IAAI;IAAE,IAAI,EAAE,IAAI;IAAE,MAAM,EAAE;EAAK,CAAE;EACjE,GAAG,EAAI;IAAE,MAAM,EAAE,MAAM;IAAE,KAAK,EAAE,IAAI;IAAE,IAAI,EAAE;EAAI,CAAE;EAClD,IAAI,EAAG;IAAE,MAAM,EAAE,KAAK;IAAG,GAAG,EAAE;EAAK,CAAE;EACrC,IAAI,EAAG;IAAE,MAAM,EAAE,KAAK;IAAG,GAAG,EAAE;EAAK,CAAE;EACrC,KAAK,EAAE;IAAE,MAAM,EAAE,MAAM;IAAE,GAAG,EAAE;EAAK;CACtC;AAED,SAAS,UAAU,CAAC,KAAa,EAAA;EAC7B,OAAO,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,EAAE,EAAE,CAAC;AAC9D;AAEA;AACA,SAAS,YAAY,CAAC,IAAgB,EAAA;EAClC,OAAO,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAE,IAAI,EAAE,YAAY,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAE,CAAC,CAAC;AACpF;AAOA,MAAM,WAAW,GAAG,IAAI,MAAM,CAAC,kBAAkB,EAAE,GAAG,CAAC;AACvD,MAAM,QAAQ,GAAG,CACb,IAAI,MAAM,CAAC,mBAAmB,EAAE,GAAG,CAAC,EACpC,IAAI,MAAM,CAAC,eAAe,EAAE,GAAG,CAAC,EAChC,WAAW,EACX,IAAI,MAAM,CAAC,kCAAkC,EAAE,GAAG,CAAC,CACtD;AAED,SAAS,YAAY,CAAC,MAAc,EAAE,KAAa,EAAA;EAC/C,IAAI;IACA,OAAO,YAAY,CAAC,WAAW,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;GAClD,CAAC,OAAM,KAAK,EAAE,CAAA;EACf,OAAO,IAAI;AACf;AAEA,SAAS,WAAW,CAAC,MAAc,EAAE,KAAa,EAAA;EAC9C,IAAI,MAAM,KAAK,IAAI,EAAE;IAAE,OAAO,IAAI;EAAG;EAErC,MAAM,MAAM,GAAG,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,KAAK,EAAE,KAAK,GAAG,EAAE,CAAC,CAAC,CAAC,QAAQ,EAAE;EACjF,MAAM,MAAM,GAAG,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,GAAG,EAAE,CAAC,CAAC,CAAC,QAAQ,EAAE;EAEnF,OAAO,YAAY,CAAC,MAAM,EAAE,MAAM,GAAG,EAAE,EAAE,MAAM,GAAG,EAAE,GAAG,MAAM,CAAC;AAClE;AAEA;AACA,SAAS,WAAW,CAAC,IAAY,EAAA;EAC7B,IAAI,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,EAAE;IACjC,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;GAC5B,MAAM,IAAI,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,EAAE;IAClC,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;GAC3B,MAAM;IACH,MAAM,CAAC,kBAAkB,CAAC,yBAAyB,EAAE,MAAM,EAAE,IAAI,CAAC;EACrE;EAED,OAAO,iCAAkC,IAAK,EAAE;AACpD;AAEA,SAAS,MAAM,CAAC,KAAa,EAAA;EACzB,MAAM,MAAM,GAAG,QAAQ,CAAC,KAAK,CAAC;EAC9B,IAAI,MAAM,CAAC,MAAM,GAAG,EAAE,EAAE;IAAE,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC;EAAG;EAE3E,MAAM,MAAM,GAAG,IAAI,UAAU,CAAC,EAAE,CAAC;EACjC,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC;EACtC,OAAO,MAAM;AACjB;AAEA,SAAS,QAAQ,CAAC,KAAiB,EAAA;EAC/B,IAAK,KAAK,CAAC,MAAM,GAAG,EAAE,KAAM,CAAC,EAAE;IAAE,OAAO,KAAK;EAAG;EAEhD,MAAM,MAAM,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC;EAChE,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC;EACjB,OAAO,MAAM;AACjB;AAEA;AACA,SAAS,WAAW,CAAC,KAAuB,EAAA;EACxC,MAAM,MAAM,GAAsB,EAAG;EAErC,IAAI,SAAS,GAAG,CAAC;EAEjB;EACA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IACnC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;IACjB,SAAS,IAAI,EAAE;EAClB;EAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IACnC,MAAM,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAE/B;IACA,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,SAAS,CAAC;IAE7B;IACA,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAChC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IAC3B,SAAS,IAAI,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC,GAAG,EAAE;EACrD;EAED,OAAO,SAAS,CAAC,MAAM,CAAC;AAC5B;AAEA,OAAM,MAAO,QAAQ,CAAA;EAWjB;EACA,WAAA,CAAY,QAAsB,EAAE,OAAe,EAAE,IAAY,EAAE,eAAwB,EAAA;IACvF,cAAc,CAAC,IAAI,EAAE,UAAU,EAAE,QAAQ,CAAC;IAC1C,cAAc,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC;IAClC,cAAc,CAAC,IAAI,EAAE,SAAS,EAAE,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IACpE,cAAc,CAAC,IAAI,EAAE,kBAAkB,EAAE,eAAe,CAAC;EAC7D;EAEA,gBAAgB,GAAA;IACZ,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE;MACxB;MACA,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;QACvC,EAAE,EAAE,IAAI,CAAC,OAAO;QAChB,IAAI,EAAE;OACT,CAAC,CAAC,IAAI,CAAE,MAAM,IAAI;QACf,OAAO,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;MACvC,CAAC,CAAC,CAAC,KAAK,CAAE,KAAK,IAAI;QACf,IAAI,KAAK,CAAC,IAAI,KAAK,MAAM,CAAC,MAAM,CAAC,cAAc,EAAE;UAAE,OAAO,KAAK;QAAG;QAClE;QACA,IAAI,CAAC,gBAAgB,GAAG,IAAI;QAC5B,MAAM,KAAK;MACf,CAAC,CAAC;IACL;IAED,OAAO,IAAI,CAAC,gBAAgB;EAChC;EAEM,MAAM,CAAC,QAAgB,EAAE,UAAmB,EAAA;;MAE9C;MACA,MAAM,EAAE,GAAG;QACP,EAAE,EAAE,IAAI,CAAC,OAAO;QAChB,eAAe,EAAE,IAAI;QACrB,IAAI,EAAE,SAAS,CAAC,CAAE,QAAQ,EAAE,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,EAAG,UAAU,IAAI,IAAI,CAAG;OAC1E;MAED;MACA,IAAI,UAAU,GAAG,KAAK;MACtB,IAAI,MAAM,IAAI,CAAC,gBAAgB,EAAE,EAAE;QAC/B,UAAU,GAAG,IAAI;QAEjB;QACA,EAAE,CAAC,IAAI,GAAG,SAAS,CAAC,CAAE,YAAY,EAAE,WAAW,CAAC,CAAE,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,IAAI,CAAE,CAAC,CAAE,CAAC;MACxF;MAED,IAAI;QACA,IAAI,MAAM,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC;QACzC,IAAK,QAAQ,CAAC,MAAM,CAAC,CAAC,MAAM,GAAG,EAAE,KAAM,CAAC,EAAE;UACtC,MAAM,CAAC,UAAU,CAAC,sBAAsB,EAAE,MAAM,CAAC,MAAM,CAAC,cAAc,EAAE;YACpE,WAAW,EAAE,EAAE;YAAE,IAAI,EAAE;WAC1B,CAAC;QACL;QACD,IAAI,UAAU,EAAE;UAAE,MAAM,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC;QAAG;QACpD,OAAO,MAAM;OAChB,CAAC,OAAO,KAAK,EAAE;QACZ,IAAI,KAAK,CAAC,IAAI,KAAK,MAAM,CAAC,MAAM,CAAC,cAAc,EAAE;UAAE,OAAO,IAAI;QAAG;QACjE,MAAM,KAAK;MACd;IACL,CAAC,CAAA;EAAA;EAEK,WAAW,CAAC,QAAgB,EAAE,UAAmB,EAAA;;MACnD,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,UAAU,CAAC;MACtD,IAAI,MAAM,IAAI,IAAI,EAAE;QAAE,OAAO,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC;MAAG;MACtD,OAAO,IAAI;IACf,CAAC,CAAA;EAAA;EAED,WAAW,CAAC,QAAgB,EAAE,QAAgB,EAAA;IAC1C,MAAM,QAAQ,GAAG,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IAE5C,IAAI,QAAQ,IAAI,IAAI,EAAE;MAClB,MAAM,CAAC,UAAU,CAAC,0BAA2B,QAAS,EAAE,EAAE,MAAM,CAAC,MAAM,CAAC,qBAAqB,EAAE;QAC3F,SAAS,EAAE,cAAe,QAAS;OACtC,CAAC;IACL;IAED,IAAI,QAAQ,CAAC,GAAG,KAAK,KAAK,EAAE;MACxB,OAAO,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC;IACnD;IAED,MAAM,KAAK,GAAG,QAAQ,CAAC,QAAQ,CAAC;IAEhC;IACA,IAAI,QAAQ,CAAC,KAAK,IAAI,IAAI,EAAE;MACxB,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,2CAA2C,CAAC;MACzE,IAAI,KAAK,EAAE;QACP,MAAM,MAAM,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;QACrC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,MAAM,GAAG,CAAC,IAAI,MAAM,IAAI,CAAC,IAAI,MAAM,IAAI,EAAE,EAAE;UAC/D,OAAO,YAAY,CAAC,MAAM,CAAC,CAAE,CAAE,QAAQ,CAAC,KAAK,CAAE,EAAG,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAG,CAAC,CAAC;QACzE;MACJ;IACJ;IAED;IACA,IAAI,QAAQ,CAAC,IAAI,IAAI,IAAI,EAAE;MACvB,MAAM,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,uCAAuC,CAAC;MACpE,IAAI,IAAI,EAAE;QACN,MAAM,MAAM,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;QACpC,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,MAAM,GAAG,CAAC,IAAI,MAAM,IAAI,CAAC,IAAI,MAAM,IAAI,EAAE,EAAE;UAC9D,OAAO,YAAY,CAAC,MAAM,CAAC,CAAE,CAAE,QAAQ,CAAC,IAAI,CAAE,EAAG,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAG,CAAC,CAAC;QACvE;MACJ;IACJ;IAED;IACA,IAAI,QAAQ,CAAC,MAAM,IAAI,IAAI,EAAE;MACzB,MAAM,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC;MAEvB;MACA,IAAI,OAAO,GAAG,KAAK,CAAC,CAAC,CAAC;MACtB,IAAI,OAAO,KAAK,IAAI,EAAE;QAClB,IAAI,MAAM,KAAK,EAAE,IAAI,MAAM,KAAK,EAAE,EAAE;UAChC,OAAO,GAAG,CAAC,CAAC;QACf;OACJ,MAAM;QACH,OAAO,GAAG,CAAC,CAAC;MACf;MAED,IAAI,OAAO,IAAI,CAAC,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,GAAG,MAAM,IAAI,MAAM,IAAI,CAAC,IAAI,MAAM,IAAI,EAAE,EAAE;QAC5E,MAAM,KAAK,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAC5C,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC;QACtB,OAAO,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,KAAK,CAAC;MAC/C;IACJ;IAED,OAAO,IAAI;EACf;EAGM,UAAU,CAAC,QAAiB,EAAA;;MAC9B,IAAI,QAAQ,IAAI,IAAI,EAAE;QAAE,QAAQ,GAAG,EAAE;MAAG;MAExC;MACA,IAAI,QAAQ,KAAK,EAAE,EAAE;QACjB,IAAI;UACA;UACA,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC;UAE9C;UACA,IAAI,MAAM,KAAK,IAAI,IAAI,MAAM,KAAK,QAAQ,EAAE;YAAE,OAAO,IAAI;UAAG;UAE5D,OAAO,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,WAAW,CAAC,MAAM,CAAC;SACrD,CAAC,OAAO,KAAK,EAAE;UACZ,IAAI,KAAK,CAAC,IAAI,KAAK,MAAM,CAAC,MAAM,CAAC,cAAc,EAAE;YAAE,OAAO,IAAI;UAAG;UACjE,MAAM,KAAK;QACd;MACJ;MAED;MACA,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,UAAU,CAAC,QAAQ,CAAC,CAAC;MAE3E;MACA,IAAI,QAAQ,IAAI,IAAI,IAAI,QAAQ,KAAK,IAAI,EAAE;QAAE,OAAO,IAAI;MAAG;MAE3D;MACA,MAAM,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,QAAQ,CAAC;MAEpD,IAAI,OAAO,IAAI,IAAI,EAAE;QACjB,MAAM,CAAC,UAAU,CAAC,kCAAkC,EAAE,MAAM,CAAC,MAAM,CAAC,qBAAqB,EAAE;UACvF,SAAS,EAAE,cAAe,QAAS,GAAG;UACtC,QAAQ,EAAE,QAAQ;UAClB,IAAI,EAAE;SACT,CAAC;MACL;MAED,OAAO,OAAO;IAClB,CAAC,CAAA;EAAA;EAEK,SAAS,GAAA;;MACX,MAAM,OAAO,GAA6C,CAAE;QAAE,IAAI,EAAE,MAAM;QAAE,OAAO,EAAE,IAAI,CAAC;MAAI,CAAE,CAAE;MAClG,IAAI;QACA;QACA;QACA,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;QAC3C,IAAI,MAAM,IAAI,IAAI,EAAE;UAAE,OAAO,IAAI;QAAG;QAEpC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;UACtC,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;UACvC,IAAI,KAAK,IAAI,IAAI,EAAE;YAAE;UAAW;UAEhC,MAAM,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE;UAErC,QAAQ,MAAM;YACV,KAAK,OAAO;cACR,OAAO,CAAC,IAAI,CAAC;gBAAE,IAAI,EAAE,KAAK;gBAAE,OAAO,EAAE;cAAM,CAAE,CAAC;cAC9C,OAAO;gBAAE,OAAO;gBAAE,GAAG,EAAE;cAAM,CAAE;YAEnC,KAAK,MAAM;cACP,OAAO,CAAC,IAAI,CAAC;gBAAE,IAAI,EAAE,MAAM;gBAAE,OAAO,EAAE;cAAM,CAAE,CAAC;cAC/C,OAAO;gBAAE,OAAO;gBAAE,GAAG,EAAE;cAAM,CAAE;YAEnC,KAAK,MAAM;cACP,OAAO,CAAC,IAAI,CAAC;gBAAE,IAAI,EAAE,MAAM;gBAAE,OAAO,EAAE;cAAM,CAAE,CAAC;cAC/C,OAAO;gBAAE,OAAO;gBAAE,GAAG,EAAE,WAAW,CAAC,MAAM;cAAC,CAAE;YAEhD,KAAK,QAAQ;YACb,KAAK,SAAS;cAAE;gBACZ;gBACA,MAAM,QAAQ,GAAI,MAAM,KAAK,QAAQ,GAAI,YAAY,GAAE,YAAY;gBACnE,OAAO,CAAC,IAAI,CAAC;kBAAE,IAAI,EAAE,MAAM;kBAAE,OAAO,EAAE;gBAAM,CAAE,CAAC;gBAE/C;gBACA,MAAM,KAAK,GAAI,IAAI,CAAC,gBAAgB,KAAI,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;gBAEhE,MAAM,KAAK,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,KAAK,CAAC,GAAG,CAAC;gBACzC,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;kBAAE,OAAO,IAAI;gBAAG;gBAExC,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC5D,MAAM,OAAO,GAAG,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,EAAE,EAAE,CAAC;gBAEtE;gBACA,IAAI,MAAM,KAAK,QAAQ,EAAE;kBACrB;kBACA,MAAM,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,WAAW,CAAC,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;oBAC5E,EAAE,EAAE,IAAI;oBAAE,IAAI,EAAE,SAAS,CAAC,CAAE,YAAY,EAAE,OAAO,CAAE;mBACtD,CAAC,CAAC;kBACH,IAAI,KAAK,KAAK,UAAU,EAAE;oBAAE,OAAO,IAAI;kBAAG;kBAC1C,OAAO,CAAC,IAAI,CAAC;oBAAE,IAAI,EAAE,OAAO;oBAAE,OAAO,EAAE;kBAAU,CAAE,CAAC;iBAEvD,MAAM,IAAI,MAAM,KAAK,SAAS,EAAE;kBAC7B;kBACA,MAAM,OAAO,GAAG,SAAS,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;oBACpD,EAAE,EAAE,IAAI;oBAAE,IAAI,EAAE,SAAS,CAAC,CAAE,YAAY,EAAE,UAAU,CAAC,KAAK,EAAE,EAAE,CAAC,EAAE,OAAO,CAAE;mBAC7E,CAAC,CAAC;kBACH,IAAI,OAAO,CAAC,MAAM,EAAE,EAAE;oBAAE,OAAO,IAAI;kBAAG;kBACtC,OAAO,CAAC,IAAI,CAAC;oBAAE,IAAI,EAAE,SAAS;oBAAE,OAAO,EAAE,OAAO,CAAC,QAAQ;kBAAE,CAAE,CAAC;gBACjE;gBAED;gBACA,MAAM,EAAE,GAAG;kBACP,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;kBAC7C,IAAI,EAAE,SAAS,CAAC,CAAE,QAAQ,EAAE,OAAO,CAAE;iBACxC;gBAED,IAAI,WAAW,GAAG,YAAY,CAAC,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;gBAC/D,IAAI,WAAW,IAAI,IAAI,EAAE;kBAAE,OAAO,IAAI;gBAAG;gBACzC,OAAO,CAAC,IAAI,CAAC;kBAAE,IAAI,EAAE,mBAAmB;kBAAE,OAAO,EAAE;gBAAW,CAAE,CAAC;gBAEjE;gBACA,IAAI,MAAM,KAAK,SAAS,EAAE;kBACtB,WAAW,GAAG,WAAW,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;kBAC/D,OAAO,CAAC,IAAI,CAAC;oBAAE,IAAI,EAAE,uBAAuB;oBAAE,OAAO,EAAE;kBAAW,CAAE,CAAC;gBACxE;gBAED;gBACA,IAAI,WAAW,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE;kBAC9B,WAAW,GAAG,WAAW,CAAC,WAAW,CAAC;gBACzC;gBAED,OAAO,CAAC,IAAI,CAAC;kBAAE,IAAI,EAAE,cAAc;kBAAE,OAAO,EAAE;gBAAW,CAAE,CAAC;gBAE5D;gBACA,MAAM,QAAQ,GAAG,MAAM,SAAS,CAAC,WAAW,CAAC;gBAC7C,IAAI,CAAC,QAAQ,EAAE;kBAAE,OAAO,IAAI;gBAAG;gBAC/B,OAAO,CAAC,IAAI,CAAC;kBAAE,IAAI,EAAE,UAAU;kBAAE,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ;gBAAC,CAAE,CAAC;gBAErE;gBACA,IAAI,QAAQ,GAAG,QAAQ,CAAC,KAAK;gBAC7B,IAAI,OAAO,QAAS,KAAK,QAAQ,EAAE;kBAAE,OAAO,IAAI;gBAAG;gBAEnD,IAAI,QAAQ,CAAC,KAAK,CAAC,sBAAsB,CAAC,EAAE;kBACxC;gBAAA,CACH,MAAM;kBACH;kBACA,MAAM,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,WAAW,CAAC;kBACxC,IAAI,IAAI,IAAI,IAAI,EAAE;oBAAE,OAAO,IAAI;kBAAG;kBAElC,OAAO,CAAC,IAAI,CAAC;oBAAE,IAAI,EAAE,UAAU;oBAAE,OAAO,EAAE;kBAAQ,CAAE,CAAC;kBACrD,QAAQ,GAAG,WAAW,CAAC,QAAQ,CAAC;gBACnC;gBAED,OAAO,CAAC,IAAI,CAAC;kBAAE,IAAI,EAAE,KAAK;kBAAE,OAAO,EAAE;gBAAQ,CAAE,CAAC;gBAEhD,OAAO;kBAAE,OAAO;kBAAE,GAAG,EAAE;gBAAQ,CAAE;;UACpC;QAER;OACJ,CAAC,OAAO,KAAK,EAAE,CAAA;MAEhB,OAAO,IAAI;IACf,CAAC,CAAA;EAAA;EAEK,cAAc,GAAA;;MAEhB;MACA,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC;MAErD;MACA,IAAI,QAAQ,IAAI,IAAI,IAAI,QAAQ,KAAK,IAAI,EAAE;QAAE,OAAO,IAAI;MAAG;MAE3D;MACA,MAAM,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,+DAA+D,CAAC;MAC5F,IAAI,IAAI,EAAE;QACN,MAAM,MAAM,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;QACpC,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,MAAM,GAAG,CAAC,EAAE;UAC/B,OAAO,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QACpD;MACJ;MAED;MACA,MAAM,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,+DAA+D,CAAC;MAC5F,IAAI,IAAI,EAAE;QACN,MAAM,MAAM,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;QACpC,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,KAAK,MAAM,GAAG,CAAC,EAAE;UAC/B,OAAO,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QACpD;MACJ;MAED;MACA,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,+BAA+B,CAAC;MAC7D,IAAI,KAAK,EAAE;QACP,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,KAAM,EAAE,GAAG,CAAE,EAAE;UAC9B,OAAO,SAAS,GAAG,KAAK,CAAC,CAAC,CAAC;QAC9B;MACJ;MAED,MAAM,MAAM,GAAG,QAAQ,CAAC,KAAK,CAAC,yBAAyB,CAAC;MACxD,IAAI,MAAM,EAAE;QACR,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,KAAM,EAAE,GAAG,CAAE,EAAE;UAC/B;UACA,MAAM,OAAO,GAA2B;YAAE,GAAG,EAAE,EAAE;YAAE,GAAG,EAAE,GAAG;YAAE,GAAG,EAAE;UAAG,CAAE;UACvE,MAAM,IAAI,GAAG,YAAY,CAAC,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,EAAG,CAAC,IAAM,OAAO,CAAC,CAAC,CAAE,CAAC;UACnF,OAAO,SAAS,GAAG,IAAI;QAC1B;MACJ;MAED,OAAO,MAAM,CAAC,UAAU,CAAC,0CAA0C,EAAE,MAAM,CAAC,MAAM,CAAC,qBAAqB,EAAE;QACtG,SAAS,EAAE,kBAAkB;QAC7B,IAAI,EAAE;OACT,CAAC;IACN,CAAC,CAAA;EAAA;EAEK,OAAO,CAAC,GAAW,EAAA;;MAErB;MACA,IAAI,QAAQ,GAAG,WAAW,CAAC,GAAG,CAAC;MAE/B;MACA;MACA,QAAQ,GAAG,MAAM,CAAC,CAAE,UAAU,CAAC,EAAE,CAAC,EAAE,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,QAAQ,CAAE,CAAC;MAE5E;MACA,IAAK,QAAQ,CAAC,MAAM,GAAG,EAAE,KAAM,CAAC,EAAE;QAC9B,QAAQ,GAAG,MAAM,CAAC,CAAE,QAAQ,EAAE,UAAU,CAAC,IAAI,EAAE,EAAE,GAAI,GAAG,CAAC,MAAM,GAAG,EAAG,CAAC,CAAE,CAAC;MAC5E;MAED,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC;MACxE,IAAI,QAAQ,IAAI,IAAI,IAAI,QAAQ,KAAK,IAAI,EAAE;QAAE,OAAO,IAAI;MAAG;MAE3D,OAAO,YAAY,CAAC,QAAQ,CAAC;IACjC,CAAC,CAAA;EAAA;AACJ;AAED,IAAI,gBAAgB,GAAc,IAAI;AAEtC,IAAI,UAAU,GAAG,CAAC;AAElB,OAAM,MAAO,YAAa,SAAQ,QAAQ,CAAA;EAuCtC;;;;;;;;AAQG;EAEH,WAAA,CAAY,OAAsC,EAAA;IAC9C,KAAK,EAAE;IAEP;IACA,IAAI,CAAC,OAAO,GAAG,EAAE;IAEjB,IAAI,CAAC,QAAQ,GAAG;MAAE,KAAK,EAAE,CAAC;IAAC,CAAE;IAE7B,IAAI,CAAC,eAAe,GAAG,KAAK;IAE5B,IAAI,CAAC,SAAS,GAAG,GAAG,CAAC,MAAM,CAAC,YAAY,EAAE;IAE1C;IACA;IACA;IACA,cAAc,CAAC,IAAI,EAAE,YAAY,EAAG,OAAO,KAAK,KAAK,CAAE;IACvD,IAAI,IAAI,CAAC,UAAU,EAAE;MAAE,OAAO,GAAG,IAAI,CAAC,aAAa,EAAE;IAAG;IAExD,IAAI,OAAO,YAAY,OAAO,EAAE;MAC5B,IAAI,CAAC,eAAe,GAAG,OAAO;MAE9B;MACA,OAAO,CAAC,KAAK,CAAE,KAAK,IAAI,CAAG,CAAC,CAAC;MAE7B;MACA,IAAI,CAAC,MAAM,EAAE,CAAC,KAAK,CAAE,KAAK,IAAI,CAAG,CAAC,CAAC;KAEtC,MAAM;MACH,MAAM,YAAY,GAAG,SAAS,CAAmC,GAAG,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC,OAAO,CAAC;MACnG,IAAI,YAAY,EAAE;QACd,cAAc,CAAC,IAAI,EAAE,UAAU,EAAE,YAAY,CAAC;QAC9C,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,YAAY,EAAE,IAAI,CAAC;OAE3C,MAAM;QACH,MAAM,CAAC,kBAAkB,CAAC,iBAAiB,EAAE,SAAS,EAAE,OAAO,CAAC;MACnE;IACJ;IAED,IAAI,CAAC,uBAAuB,GAAG,CAAC,IAAI;IAEpC,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC;IAC1B,IAAI,CAAC,oBAAoB,GAAG,EAAE;IAE9B,IAAI,CAAC,gBAAgB,GAAG,IAAI;IAE5B,IAAI,CAAC,cAAc,GAAG,CAAC;EAC3B;EAEM,MAAM,GAAA;;MACR,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,EAAE;QACvB,IAAI,OAAO,GAAY,IAAI;QAC3B,IAAI,IAAI,CAAC,eAAe,EAAE;UACtB,IAAI;YACA,OAAO,GAAG,MAAM,IAAI,CAAC,eAAe;WACvC,CAAC,OAAO,KAAK,EAAE,CAAA;QACnB;QAED;QACA,IAAI,OAAO,IAAI,IAAI,EAAE;UACjB,OAAO,GAAG,MAAM,IAAI,CAAC,aAAa,EAAE;QACvC;QAED;QACA;QACA,IAAI,CAAC,OAAO,EAAE;UACV,MAAM,CAAC,UAAU,CAAC,qBAAqB,EAAE,MAAM,CAAC,MAAM,CAAC,aAAa,EAAE,CAAA,CAAG,CAAC;QAC7E;QAED;QACA,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,EAAE;UACvB,IAAI,IAAI,CAAC,UAAU,EAAE;YACjB,IAAI,CAAC,QAAQ,GAAG,OAAO;WAC1B,MAAM;YACH,cAAc,CAAC,IAAI,EAAE,UAAU,EAAE,OAAO,CAAC;UAC5C;UACD,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,EAAE,IAAI,CAAC;QACtC;MACJ;MAED,OAAO,IAAI,CAAC,QAAQ;IACxB,CAAC,CAAA;EAAA;EAED;EACA;EACA;EACA,IAAI,KAAK,GAAA;IACL,OAAO,IAAI,CAAC,MAAK;MACb,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,CAAE,OAAO,IAAI;QAClC,OAAO,OAAO;MAClB,CAAC,EAAG,KAAK,IAAI;QACT;QACA,IAAI,KAAK,CAAC,IAAI,KAAK,MAAM,CAAC,MAAM,CAAC,aAAa,IAAI,KAAK,CAAC,KAAK,KAAK,WAAW,EAAE;UAC3E,OAAO,SAAS;QACnB;QACD,MAAM,KAAK;MACf,CAAC,CAAC;IACN,CAAC,CAAC;EACN;EAEA;EACA,OAAO,YAAY,GAAA;IACf,IAAI,gBAAgB,IAAI,IAAI,EAAE;MAC1B,gBAAgB,GAAG,IAAI,SAAS,EAAE;IACrC;IACD,OAAO,gBAAgB;EAC3B;EAEA;EACA,OAAO,UAAU,CAAC,OAAmB,EAAA;IACjC,OAAO,UAAU,CAAE,OAAO,IAAI,IAAI,GAAI,WAAW,GAAE,OAAO,CAAC;EAC/D;EAEM,aAAa,CAAC,EAAe,EAAE,QAAgB,EAAE,IAAmB,EAAA;;MACtE,IAAI,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;QAAE,OAAO,IAAI;MAAG;MAE/D,MAAM,MAAM,GAAG,EAAE,CAAC,EAAE,CAAC,WAAW,EAAE;MAClC,MAAM,IAAI,GAAG,QAAQ,CAAC,WAAW,EAAE;MAEnC,MAAM,aAAa,GAAkB,EAAG;MAExC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QAClC,MAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC;QAEnB;QACA,MAAM,IAAI,GAAG,GAAG,CAAC,OAAO,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC;QAEpE;QACA,MAAM,IAAI,GAAmB,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAI,IAAI,GAAE,IAAI,CAAC,SAAS,CAAC;UAAE,IAAI;UAAE;QAAM,CAAE,CAAC;QAEjG,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC;UAAE,GAAG,EAAE,IAAI;UAAE,gBAAgB,EAAE;QAAI,CAAE,EAAE,IAAI,EAAE,CAAC,KAAK,EAAE,QAAQ,KAAI;UAC5F,KAAK,CAAC,MAAM,GAAG,QAAQ,CAAC,UAAU;UAClC,OAAO,KAAK;QAChB,CAAC,CAAC;QAEF,IAAI,MAAM,CAAC,IAAI,EAAE;UAAE,OAAO,MAAM,CAAC,IAAI;QAAG;QAExC,MAAM,YAAY,GAAI,MAAM,CAAC,OAAO,IAAI,eAAgB;QAExD;QACA,IAAI,MAAM,CAAC,MAAM,IAAI,GAAG,IAAI,MAAM,CAAC,MAAM,GAAG,GAAG,EAAE;UAC7C,OAAO,MAAM,CAAC,UAAU,CAAC,yCAA0C,YAAa,EAAE,EAAE,MAAM,CAAC,MAAM,CAAC,YAAY,EAAE;YAAE,GAAG;YAAE;UAAY,CAAE,CAAC;QACzI;QAED;QACA,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC;MACnC;MAED,OAAO,MAAM,CAAC,UAAU,CAAC,wCAAyC,aAAa,CAAC,GAAG,CAAE,CAAC,IAAK,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAE,EAAE,EAAE,MAAM,CAAC,MAAM,CAAC,YAAY,EAAE;QACrJ,IAAI;QAAE;OACT,CAAC;IACN,CAAC,CAAA;EAAA;EAED;EACA;EACM,uBAAuB,CAAC,MAAc,EAAA;;MACxC,MAAM,IAAI,CAAC,MAAM,EAAE;MAEnB;MACA,IAAI,MAAM,GAAG,CAAC,EAAE;QAEZ;QACA,OAAO,IAAI,CAAC,oBAAoB,EAAE;UAE9B;UACA,MAAM,mBAAmB,GAAG,IAAI,CAAC,oBAAoB;UAErD,IAAI;YACA;YACA,MAAM,MAAM,GAAG,MAAM,mBAAmB;YACxC,IAAK,OAAO,EAAE,GAAG,MAAM,CAAC,QAAQ,IAAK,MAAM,EAAE;cACzC,OAAO,MAAM,CAAC,WAAW;YAC5B;YAED;YACA;WAEH,CAAC,OAAM,KAAK,EAAE;YAEX;YACA;YACA;YACA;YACA,IAAI,IAAI,CAAC,oBAAoB,KAAK,mBAAmB,EAAE;cACnD;YACH;UACJ;QACJ;MACJ;MAED,MAAM,OAAO,GAAG,OAAO,EAAE;MAEzB,MAAM,wBAAwB,GAAG,iBAAiB,CAAC;QAC/C,WAAW,EAAE,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE,CAAA,CAAG,CAAC;QAChD,YAAY,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,IAAI,CAAE,OAAO,IAAM,IAAK,EAAG,KAAK,IAAM,KAAM;OAC/E,CAAC,CAAC,IAAI,CAAC,QAAkC;QAAA,IAAjC;UAAE,WAAW;UAAE;QAAY,CAAE;QAClC,IAAI,YAAY,EAAE;UACd;UACA,IAAI,IAAI,CAAC,oBAAoB,KAAK,wBAAwB,EAAE;YACxD,IAAI,CAAC,oBAAoB,GAAG,IAAI;UACnC;UACD,MAAM,YAAY;QACrB;QAED,MAAM,QAAQ,GAAG,OAAO,EAAE;QAE1B,WAAW,GAAG,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,QAAQ,EAAE;QACpD,IAAI,WAAW,GAAG,IAAI,CAAC,uBAAuB,EAAE;UAAE,WAAW,GAAG,IAAI,CAAC,uBAAuB;QAAG;QAE/F,IAAI,CAAC,uBAAuB,GAAG,WAAW;QAC1C,IAAI,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC,CAAC;QACvC,OAAO;UAAE,WAAW;UAAE,OAAO;UAAE;QAAQ,CAAE;MAC7C,CAAC,CAAC;MAEF,IAAI,CAAC,oBAAoB,GAAG,wBAAwB;MAEpD;MACA,wBAAwB,CAAC,KAAK,CAAE,KAAK,IAAI;QACrC;QACA,IAAI,IAAI,CAAC,oBAAoB,KAAK,wBAAwB,EAAE;UACxD,IAAI,CAAC,oBAAoB,GAAG,IAAI;QACnC;MACL,CAAC,CAAC;MAEF,OAAO,CAAC,MAAM,wBAAwB,EAAE,WAAW;IACvD,CAAC,CAAA;EAAA;EAEK,IAAI,GAAA;;MACN,MAAM,MAAM,GAAG,UAAU,EAAE;MAE3B;MACA,MAAM,OAAO,GAAyB,EAAE;MAExC,IAAI,WAAW,GAAW,IAAI;MAC9B,IAAI;QACA,WAAW,GAAG,MAAM,IAAI,CAAC,uBAAuB,CAAC,GAAG,GAAG,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC;OACnF,CAAC,OAAO,KAAK,EAAE;QACZ,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC;QACzB;MACH;MACD,IAAI,CAAC,mBAAmB,CAAC,WAAW,CAAC;MAErC;MACA,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,EAAE,WAAW,CAAC;MAEtC;MACA,IAAI,WAAW,KAAK,IAAI,CAAC,gBAAgB,EAAE;QACvC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC;QAC5B;MACH;MAED;MACA,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,KAAK,CAAC,CAAC,EAAE;QAC5B,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,WAAW,GAAG,CAAC;MACxC;MAED,IAAI,IAAI,CAAC,GAAG,CAAW,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAK,WAAW,CAAC,GAAG,IAAI,EAAE;QAChE,MAAM,CAAC,IAAI,CAAC,+DAAgE,IAAI,CAAC,QAAQ,CAAC,KAAM,eAAgB,WAAY,GAAG,CAAC;QAChI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,SAAS,CAAC,6BAA6B,EAAE,MAAM,CAAC,MAAM,CAAC,aAAa,EAAE;UAC5F,WAAW,EAAE,WAAW;UACxB,KAAK,EAAE,WAAW;UAClB,mBAAmB,EAAE,IAAI,CAAC,QAAQ,CAAC;SACtC,CAAC,CAAC;QACH,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,WAAW,CAAC;OAElC,MAAM;QACH;QACA,KAAK,IAAI,CAAC,GAAY,IAAI,CAAC,QAAQ,CAAC,KAAM,GAAG,CAAC,EAAE,CAAC,IAAI,WAAW,EAAE,CAAC,EAAE,EAAE;UACnE,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;QACxB;MACJ;MAED;MACA,IAAa,IAAI,CAAC,QAAQ,CAAC,KAAM,KAAK,WAAW,EAAE;QAC/C,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,WAAW;QAEjC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAE,GAAG,IAAI;UACvC;UACA,IAAI,GAAG,KAAK,OAAO,EAAE;YAAE;UAAS;UAEhC;UACA,MAAM,gBAAgB,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC;UAE3C;UACA;UACA;UACA,IAAI,gBAAgB,KAAK,SAAS,EAAE;YAAE;UAAS;UAE/C;UACA;UACA,IAAI,WAAW,GAAG,gBAAgB,GAAG,EAAE,EAAE;YACrC,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC;UAC5B;QACL,CAAC,CAAC;MACL;MAED;MACA,IAAI,IAAI,CAAC,gBAAgB,KAAK,CAAC,CAAC,EAAE;QAC9B,IAAI,CAAC,gBAAgB,GAAG,WAAW,GAAG,CAAC;MAC1C;MACD;MACA,IAAI,CAAC,OAAO,CAAC,OAAO,CAAE,KAAK,IAAI;QAC3B,QAAQ,KAAK,CAAC,IAAI;UACd,KAAK,IAAI;YAAE;cACP,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI;cACvB,IAAI,MAAM,GAAG,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC,IAAI,CAAE,OAAO,IAAI;gBAC3D,IAAI,CAAC,OAAO,IAAI,OAAO,CAAC,WAAW,IAAI,IAAI,EAAE;kBAAE,OAAO,IAAI;gBAAG;gBAC7D,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,OAAO,CAAC,WAAW;gBAChD,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC;gBACxB,OAAO,IAAI;cACf,CAAC,CAAC,CAAC,KAAK,CAAE,KAAY,IAAI;gBAAG,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC;cAAE,CAAC,CAAC;cAE1D,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC;cAEpB;YACH;UAED,KAAK,QAAQ;YAAE;cACX;cACA,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE;gBAClB,KAAK,CAAC,SAAS,GAAG,IAAI;gBAEtB;gBACA;gBACA,IAAI,KAAK,CAAC,gBAAgB,KAAK,CAAC,CAAC,EAAE;kBAC/B,KAAK,CAAC,gBAAgB,GAAG,WAAW,GAAG,CAAC;gBAC3C;gBAED;gBACA;gBACA;gBACA;gBACA,MAAM,MAAM,GAAG,KAAK,CAAC,MAAM;gBAC3B,MAAM,CAAC,SAAS,GAAG,KAAK,CAAC,gBAAgB,GAAG,CAAC;gBAC7C,MAAM,CAAC,OAAO,GAAG,WAAW;gBAE5B;gBACA;gBACA,MAAM,YAAY,GAAG,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,oBAAoB;gBAC/D,IAAI,YAAY,GAAG,MAAM,CAAC,SAAS,EAAE;kBAAE,MAAM,CAAC,SAAS,GAAG,YAAY;gBAAG;gBAEzE,IAAI,MAAM,CAAC,SAAS,GAAG,CAAC,EAAE;kBAAE,MAAM,CAAC,SAAS,GAAG,CAAC;gBAAG;gBAEnD,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAE,IAAI,IAAI;kBAC9C;kBACA,KAAK,CAAC,SAAS,GAAG,KAAK;kBAEvB,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;oBAAE;kBAAS;kBAElC,IAAI,CAAC,OAAO,CAAE,GAAQ,IAAI;oBACtB;oBACA;oBACA,IAAI,GAAG,CAAC,WAAW,GAAG,KAAK,CAAC,gBAAgB,EAAE;sBAC1C,KAAK,CAAC,gBAAgB,GAAG,GAAG,CAAC,WAAW;oBAC3C;oBAED;oBACA,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,GAAG,CAAC,SAAS,CAAC,GAAG,GAAG,CAAC,WAAW;oBACrD,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,GAAG,CAAC,eAAe,CAAC,GAAG,GAAG,CAAC,WAAW;oBAE3D,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC;kBAC1B,CAAC,CAAC;gBACN,CAAC,CAAC,CAAC,KAAK,CAAE,KAAY,IAAI;kBACtB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC;kBAEzB;kBACA,KAAK,CAAC,SAAS,GAAG,KAAK;gBAC3B,CAAC,CAAC;gBACF,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC;cACvB;cAED;;QACH;MAET,CAAC,CAAC;MAEF,IAAI,CAAC,gBAAgB,GAAG,WAAW;MAEnC;MACA,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,MAAK;QAC3B,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC;MAChC,CAAC,CAAC,CAAC,KAAK,CAAE,KAAK,IAAI;QAAG,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC;MAAE,CAAC,CAAC;MAEnD;IACJ,CAAC,CAAA;EAAA;EAED;EACA,gBAAgB,CAAC,WAAmB,EAAA;IAChC,IAAI,CAAC,gBAAgB,GAAG,WAAW,GAAG,CAAC;IACvC,IAAI,IAAI,CAAC,OAAO,EAAE;MAAE,IAAI,CAAC,IAAI,EAAE;IAAG;EACtC;EAEA,IAAI,OAAO,GAAA;IACP,OAAO,IAAI,CAAC,QAAQ;EACxB;EAEA;EACA;EACM,aAAa,GAAA;;MACf,OAAO,MAAM,CAAC,UAAU,CAAC,6CAA6C,EAAE,MAAM,CAAC,MAAM,CAAC,qBAAqB,EAAE;QACzG,SAAS,EAAE;OACd,CAAC;IACN,CAAC,CAAA;EAAA;EAEK,UAAU,GAAA;;MACZ,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,MAAM,EAAE;MAEnC;MACA;MACA;MACA,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,aAAa,EAAE;MACjD,IAAI,OAAO,CAAC,OAAO,KAAK,cAAc,CAAC,OAAO,EAAE;QAE5C;QACA;QACA,IAAI,IAAI,CAAC,UAAU,EAAE;UACjB,IAAI,CAAC,QAAQ,GAAG,cAAc;UAE9B;UACA,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC;UAC1B,IAAI,CAAC,gBAAgB,GAAG,IAAI;UAC5B,IAAI,CAAC,uBAAuB,GAAG,IAAI;UACnC,IAAI,CAAC,cAAc,GAAG,CAAC;UACvB,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,CAAC,CAAC;UACxB,IAAI,CAAC,uBAAuB,GAAG,CAAC,IAAI;UACpC,IAAI,CAAC,oBAAoB,GAAG,IAAI;UAEhC;UACA;UACA;UACA,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,cAAc,EAAE,OAAO,CAAC;UAC7C,MAAM,KAAK,CAAC,CAAC,CAAC;UAEd,OAAO,IAAI,CAAC,QAAQ;QACvB;QAED,MAAM,KAAK,GAAG,MAAM,CAAC,SAAS,CAAC,4BAA4B,EAAE,MAAM,CAAC,MAAM,CAAC,aAAa,EAAE;UACtF,KAAK,EAAE,SAAS;UAChB,OAAO,EAAE,OAAO;UAChB,eAAe,EAAE;SACpB,CAAC;QAEF,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC;QACzB,MAAM,KAAK;MACd;MAED,OAAO,OAAO;IAClB,CAAC,CAAA;EAAA;EAED,IAAI,WAAW,GAAA;IACX,IAAI,CAAC,uBAAuB,CAAC,GAAG,GAAG,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC,CAAC,IAAI,CAAE,WAAW,IAAI;MAC9E,IAAI,CAAC,mBAAmB,CAAC,WAAW,CAAC;IACzC,CAAC,EAAG,KAAK,IAAI,CAAG,CAAC,CAAC;IAElB,OAAQ,IAAI,CAAC,gBAAgB,IAAI,IAAI,GAAI,IAAI,CAAC,gBAAgB,GAAE,CAAC,CAAC;EACtE;EAEA,IAAI,OAAO,GAAA;IACP,OAAQ,IAAI,CAAC,OAAO,IAAI,IAAI;EAChC;EAEA,IAAI,OAAO,CAAC,KAAc,EAAA;IACtB,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;MACxB,IAAI,CAAC,OAAO,GAAG,WAAW,CAAC,MAAK;QAAG,IAAI,CAAC,IAAI,EAAE;MAAE,CAAC,EAAE,IAAI,CAAC,eAAe,CAAC;MAExE,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;QACtB,IAAI,CAAC,cAAc,GAAG,UAAU,CAAC,MAAK;UAClC,IAAI,CAAC,IAAI,EAAE;UAEX;UACA;UACA,IAAI,CAAC,cAAc,GAAG,UAAU,CAAC,MAAK;YAClC;YACA;YACA,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;cAAE,IAAI,CAAC,IAAI,EAAE;YAAG;YAEnC;YACA,IAAI,CAAC,cAAc,GAAG,IAAI;UAC9B,CAAC,EAAE,IAAI,CAAC,eAAe,CAAC;QAC5B,CAAC,EAAE,CAAC,CAAC;MACR;KAEJ,MAAM,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,OAAO,EAAE;MAC/B,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC;MAC3B,IAAI,CAAC,OAAO,GAAG,IAAI;IACtB;EACL;EAEA,IAAI,eAAe,GAAA;IACf,OAAO,IAAI,CAAC,gBAAgB;EAChC;EAEA,IAAI,eAAe,CAAC,KAAa,EAAA;IAC7B,IAAI,OAAO,KAAM,KAAK,QAAQ,IAAI,KAAK,IAAI,CAAC,IAAI,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,KAAK,EAAE;MAC9E,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC;IAC9C;IAED,IAAI,CAAC,gBAAgB,GAAG,KAAK;IAE7B,IAAI,IAAI,CAAC,OAAO,EAAE;MACd,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC;MAC3B,IAAI,CAAC,OAAO,GAAG,WAAW,CAAC,MAAK;QAAG,IAAI,CAAC,IAAI,EAAE;MAAE,CAAC,EAAE,IAAI,CAAC,gBAAgB,CAAC;IAC5E;EACL;EAEA,mBAAmB,GAAA;IACf,MAAM,GAAG,GAAG,OAAO,EAAE;IAErB;IACA,IAAK,GAAG,GAAG,IAAI,CAAC,cAAc,GAAI,CAAC,GAAG,IAAI,CAAC,gBAAgB,EAAE;MACzD,IAAI,CAAC,cAAc,GAAG,GAAG;MACzB,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC,IAAI,CAAE,WAAW,IAAI;QACtE,IAAI,IAAI,CAAC,gBAAgB,IAAI,IAAI,IAAI,WAAW,GAAG,IAAI,CAAC,gBAAgB,EAAE;UACtE,IAAI,CAAC,gBAAgB,GAAG,WAAW;QACtC;QACD,OAAO,IAAI,CAAC,gBAAgB;MAChC,CAAC,CAAC;IACL;IAED,OAAO,IAAI,CAAC,uBAAuB;EACvC;EAEA,mBAAmB,CAAC,WAAmB,EAAA;IACnC;IACA,IAAI,IAAI,CAAC,gBAAgB,IAAI,IAAI,IAAI,WAAW,GAAG,IAAI,CAAC,gBAAgB,EAAE;MAAE;IAAS;IAErF;IACA,IAAI,CAAC,cAAc,GAAG,OAAO,EAAE;IAE/B;IACA,IAAI,IAAI,CAAC,gBAAgB,IAAI,IAAI,IAAI,WAAW,GAAG,IAAI,CAAC,gBAAgB,EAAE;MACtE,IAAI,CAAC,gBAAgB,GAAG,WAAW;MACnC,IAAI,CAAC,uBAAuB,GAAG,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC;IAC9D;EACL;EAEM,kBAAkB,CAAC,eAAuB,EAAE,aAAsB,EAAE,OAAgB,EAAA;;MACtF,OAAO,IAAI,CAAC,mBAAmB,CAAC,eAAe,EAAG,aAAa,IAAI,IAAI,GAAI,CAAC,GAAE,aAAa,EAAE,OAAO,IAAI,CAAC,EAAE,IAAI,CAAC;IACpH,CAAC,CAAA;EAAA;EAEK,mBAAmB,CAAC,eAAuB,EAAE,aAAqB,EAAE,OAAe,EAAE,WAA4G,EAAA;;MACnM,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,eAAe,CAAC;MAEjE;MACA,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,aAAa,GAAE,CAAC,KAAK,aAAa,EAAE;QAAE,OAAO,OAAO;MAAG;MAE9E;MACA,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,KAAI;QACnC,MAAM,WAAW,GAAsB,EAAE;QAEzC,IAAI,IAAI,GAAG,KAAK;QAChB,MAAM,WAAW,GAAG,YAAA;UAChB,IAAI,IAAI,EAAE;YAAE,OAAO,IAAI;UAAG;UAC1B,IAAI,GAAG,IAAI;UACX,WAAW,CAAC,OAAO,CAAE,IAAI,IAAI;YAAG,IAAI,EAAE;UAAE,CAAC,CAAC;UAC1C,OAAO,KAAK;QAChB,CAAC;QAED,MAAM,YAAY,GAAI,OAA2B,IAAI;UACjD,IAAI,OAAO,CAAC,aAAa,GAAG,aAAa,EAAE;YAAE;UAAS;UACtD,IAAI,WAAW,EAAE,EAAE;YAAE;UAAS;UAC9B,OAAO,CAAC,OAAO,CAAC;QACpB,CAAC;QACD,IAAI,CAAC,EAAE,CAAC,eAAe,EAAE,YAAY,CAAC;QACtC,WAAW,CAAC,IAAI,CAAC,MAAK;UAAG,IAAI,CAAC,cAAc,CAAC,eAAe,EAAE,YAAY,CAAC;QAAE,CAAC,CAAC;QAE/E,IAAI,WAAW,EAAE;UACb,IAAI,eAAe,GAAG,WAAW,CAAC,UAAU;UAC5C,IAAI,YAAY,GAAW,IAAI;UAC/B,MAAM,cAAc,GAAU,WAAmB,IAAI,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;YACjD,IAAI,IAAI,EAAE;cAAE;YAAS;YAErB;YACA;YACA;YACA,MAAM,KAAK,CAAC,IAAI,CAAC;YAEjB,IAAI,CAAC,mBAAmB,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,IAAI,CAAQ,KAAK,IAAI,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;cAC5D,IAAI,IAAI,EAAE;gBAAE;cAAS;cAErB,IAAI,KAAK,IAAI,WAAW,CAAC,KAAK,EAAE;gBAC5B,eAAe,GAAG,WAAW;eAEhC,MAAM;gBACH;gBACA;kBACI,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC;kBACxD,IAAI,KAAK,IAAI,KAAK,CAAC,WAAW,IAAI,IAAI,EAAE;oBAAE;kBAAS;gBACtD;gBAED;gBACA;gBACA;gBACA;gBACA,IAAI,YAAY,IAAI,IAAI,EAAE;kBACtB,YAAY,GAAG,eAAe,GAAG,CAAC;kBAClC,IAAI,YAAY,GAAG,WAAW,CAAC,UAAU,EAAE;oBACvC,YAAY,GAAG,WAAW,CAAC,UAAU;kBACxC;gBACJ;gBAED,OAAO,YAAY,IAAI,WAAW,EAAE;kBAChC,IAAI,IAAI,EAAE;oBAAE;kBAAS;kBAErB,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC;kBAC/D,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,KAAK,CAAC,YAAY,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE;oBACnD,MAAM,EAAE,GAAG,KAAK,CAAC,YAAY,CAAC,EAAE,CAAC;oBAEjC;oBACA,IAAI,EAAE,CAAC,IAAI,KAAK,eAAe,EAAE;sBAAE;oBAAS;oBAE5C;oBACA,IAAI,EAAE,CAAC,IAAI,KAAK,WAAW,CAAC,IAAI,IAAI,EAAE,CAAC,KAAK,KAAK,WAAW,CAAC,KAAK,EAAE;sBAChE,IAAI,IAAI,EAAE;wBAAE;sBAAS;sBAErB;sBACA,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,EAAE,CAAC,IAAI,EAAE,aAAa,CAAC;sBAErE;sBACA,IAAI,WAAW,EAAE,EAAE;wBAAE;sBAAS;sBAE9B;sBACA,IAAI,MAAM,GAAG,UAAU;sBACvB,IAAI,EAAE,CAAC,IAAI,KAAK,WAAW,CAAC,IAAI,IAAI,EAAE,CAAC,EAAE,KAAK,WAAW,CAAC,EAAE,IAAI,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE;wBAC5F,MAAM,GAAG,UAAU;uBACtB,MAAO,IAAI,EAAE,CAAC,IAAI,KAAK,IAAI,IAAI,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE;wBACpE,MAAM,GAAG,WAAW;sBACvB;sBAED;sBACA,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,0BAA0B,EAAE,MAAM,CAAC,MAAM,CAAC,oBAAoB,EAAE;wBACpF,SAAS,EAAG,MAAM,KAAK,UAAU,IAAI,MAAM,KAAK,WAAY;wBAC5D,MAAM;wBACN,WAAW,EAAE,IAAI,CAAC,gBAAgB,CAAC,EAAE,CAAC;wBACtC,IAAI,EAAE,eAAe;wBACrB;uBACH,CAAC,CAAC;sBAEH;oBACH;kBACJ;kBACD,YAAY,EAAE;gBACjB;cACJ;cAED,IAAI,IAAI,EAAE;gBAAE;cAAS;cACrB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,cAAc,CAAC;YAEtC,CAAC,CAAA,EAAG,KAAK,IAAI;cACT,IAAI,IAAI,EAAE;gBAAE;cAAS;cACrB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,cAAc,CAAC;YACtC,CAAC,CAAC;UACN,CAAC,CAAA;UAED,IAAI,IAAI,EAAE;YAAE;UAAS;UACrB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,cAAc,CAAC;UAElC,WAAW,CAAC,IAAI,CAAC,MAAK;YAClB,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,cAAc,CAAC;UAChD,CAAC,CAAC;QACL;QAED,IAAI,OAAO,OAAQ,KAAK,QAAQ,IAAI,OAAO,GAAG,CAAC,EAAE;UAC7C,MAAM,KAAK,GAAG,UAAU,CAAC,MAAK;YAC1B,IAAI,WAAW,EAAE,EAAE;cAAE;YAAS;YAC9B,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,kBAAkB,EAAE,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE;cAAE,OAAO,EAAE;YAAO,CAAE,CAAC,CAAC;UAC7F,CAAC,EAAE,OAAO,CAAC;UACX,IAAI,KAAK,CAAC,KAAK,EAAE;YAAE,KAAK,CAAC,KAAK,EAAE;UAAG;UAEnC,WAAW,CAAC,IAAI,CAAC,MAAK;YAAG,YAAY,CAAC,KAAK,CAAC;UAAE,CAAC,CAAC;QACnD;MACL,CAAC,CAAC;IACN,CAAC,CAAA;EAAA;EAEK,cAAc,GAAA;;MAChB,OAAO,IAAI,CAAC,uBAAuB,CAAC,CAAC,CAAC;IAC1C,CAAC,CAAA;EAAA;EAEK,WAAW,GAAA;;MACb,MAAM,IAAI,CAAC,UAAU,EAAE;MAEvB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,CAAA,CAAG,CAAC;MACrD,IAAI;QACA,OAAO,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC;OAChC,CAAC,OAAO,KAAK,EAAE;QACZ,OAAO,MAAM,CAAC,UAAU,CAAC,yBAAyB,EAAE,MAAM,CAAC,MAAM,CAAC,YAAY,EAAE;UAC5E,MAAM,EAAE,aAAa;UACrB,MAAM;UAAE;SACX,CAAC;MACL;IACL,CAAC,CAAA;EAAA;EAEK,UAAU,CAAC,aAAuC,EAAE,QAAuC,EAAA;;MAC7F,MAAM,IAAI,CAAC,UAAU,EAAE;MACvB,MAAM,MAAM,GAAG,MAAM,iBAAiB,CAAC;QACnC,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC;QACxC,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC,QAAQ;OACvC,CAAC;MAEF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,MAAM,CAAC;MACvD,IAAI;QACA,OAAO,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC;OAChC,CAAC,OAAO,KAAK,EAAE;QACZ,OAAO,MAAM,CAAC,UAAU,CAAC,yBAAyB,EAAE,MAAM,CAAC,MAAM,CAAC,YAAY,EAAE;UAC5E,MAAM,EAAE,YAAY;UACpB,MAAM;UAAE,MAAM;UAAE;SACnB,CAAC;MACL;IACL,CAAC,CAAA;EAAA;EAEK,mBAAmB,CAAC,aAAuC,EAAE,QAAuC,EAAA;;MACtG,MAAM,IAAI,CAAC,UAAU,EAAE;MACvB,MAAM,MAAM,GAAG,MAAM,iBAAiB,CAAC;QACnC,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC;QACxC,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC,QAAQ;OACvC,CAAC;MAEF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,qBAAqB,EAAE,MAAM,CAAC;MAChE,IAAI;QACA,OAAO,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE;OAC3C,CAAC,OAAO,KAAK,EAAE;QACZ,OAAO,MAAM,CAAC,UAAU,CAAC,yBAAyB,EAAE,MAAM,CAAC,MAAM,CAAC,YAAY,EAAE;UAC5E,MAAM,EAAE,qBAAqB;UAC7B,MAAM;UAAE,MAAM;UAAE;SACnB,CAAC;MACL;IACL,CAAC,CAAA;EAAA;EAEK,OAAO,CAAC,aAAuC,EAAE,QAAuC,EAAA;;MAC1F,MAAM,IAAI,CAAC,UAAU,EAAE;MACvB,MAAM,MAAM,GAAG,MAAM,iBAAiB,CAAC;QACnC,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC;QACxC,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC,QAAQ;OACvC,CAAC;MAEF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,MAAM,CAAC;MACpD,IAAI;QACA,OAAO,OAAO,CAAC,MAAM,CAAC;OACzB,CAAC,OAAO,KAAK,EAAE;QACZ,OAAO,MAAM,CAAC,UAAU,CAAC,yBAAyB,EAAE,MAAM,CAAC,MAAM,CAAC,YAAY,EAAE;UAC5E,MAAM,EAAE,SAAS;UACjB,MAAM;UAAE,MAAM;UAAE;SACnB,CAAC;MACL;IACL,CAAC,CAAA;EAAA;EAEK,YAAY,CAAC,aAAuC,EAAE,QAA8C,EAAE,QAAuC,EAAA;;MAC/I,MAAM,IAAI,CAAC,UAAU,EAAE;MACvB,MAAM,MAAM,GAAG,MAAM,iBAAiB,CAAC;QACnC,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC;QACxC,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC;QACrC,QAAQ,EAAE,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAE,CAAC,IAAK,QAAQ,CAAC,CAAC,CAAC;OAC9D,CAAC;MACF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,MAAM,CAAC;MACzD,IAAI;QACA,OAAO,OAAO,CAAC,MAAM,CAAC;OACzB,CAAC,OAAO,KAAK,EAAE;QACZ,OAAO,MAAM,CAAC,UAAU,CAAC,yBAAyB,EAAE,MAAM,CAAC,MAAM,CAAC,YAAY,EAAE;UAC5E,MAAM,EAAE,cAAc;UACtB,MAAM;UAAE,MAAM;UAAE;SACnB,CAAC;MACL;IACL,CAAC,CAAA;EAAA;EAED;EACA,gBAAgB,CAAC,EAAe,EAAE,IAAa,EAAE,UAAmB,EAAA;IAChE,IAAI,IAAI,IAAI,IAAI,IAAI,aAAa,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE;MAAE,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC;IAAG;IAE1G,MAAM,MAAM,GAAwB,EAAE;IAEtC;IACA,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,CAAC,IAAI,KAAK,IAAI,EAAE;MAClC,MAAM,CAAC,UAAU,CAAC,0DAA0D,EAAE,MAAM,CAAC,MAAM,CAAC,aAAa,EAAE;QAAE,YAAY,EAAE,EAAE,CAAC,IAAI;QAAE,YAAY,EAAE;MAAI,CAAE,CAAC;IAC5J;IAED,MAAM,CAAC,IAAI,GAAG,CAAO,QAAiB,EAAE,OAAgB,KAAI,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;MACxD,IAAI,QAAQ,IAAI,IAAI,EAAE;QAAE,QAAQ,GAAG,CAAC;MAAG;MACvC,IAAI,OAAO,IAAI,IAAI,EAAE;QAAE,OAAO,GAAG,CAAC;MAAG;MAErC;MACA,IAAI,WAAW,GAAG,SAAS;MAC3B,IAAI,QAAQ,KAAK,CAAC,IAAI,UAAU,IAAI,IAAI,EAAE;QACtC,WAAW,GAAG;UACV,IAAI,EAAE,EAAE,CAAC,IAAI;UACb,IAAI,EAAE,EAAE,CAAC,IAAI;UACb,KAAK,EAAE,EAAE,CAAC,KAAK;UACf,EAAE,EAAE,EAAE,CAAC,EAAE;UACT,KAAK,EAAE,EAAE,CAAC,KAAK;UACf;SACH;MACJ;MAED,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,EAAE,CAAC,IAAI,EAAE,QAAQ,EAAE,OAAO,EAAE,WAAW,CAAC;MACvF,IAAI,OAAO,IAAI,IAAI,IAAI,QAAQ,KAAK,CAAC,EAAE;QAAE,OAAO,IAAI;MAAG;MAEvD;MACA,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,EAAE,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,WAAW;MAEnD,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;QACtB,MAAM,CAAC,UAAU,CAAC,oBAAoB,EAAE,MAAM,CAAC,MAAM,CAAC,cAAc,EAAE;UAClE,eAAe,EAAE,EAAE,CAAC,IAAI;UACxB,WAAW,EAAE,EAAE;UACf,OAAO,EAAE;SACZ,CAAC;MACL;MACD,OAAO,OAAO;IAClB,CAAC,CAAA;IAED,OAAO,MAAM;EACjB;EAEM,eAAe,CAAC,iBAA2C,EAAA;;MAC7D,MAAM,IAAI,CAAC,UAAU,EAAE;MACvB,MAAM,KAAK,GAAG,MAAM,OAAO,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC;MAC5E,MAAM,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,iBAAiB,CAAC;MACxD,IAAI,EAAE,CAAC,aAAa,IAAI,IAAI,EAAE;QAAE,EAAE,CAAC,aAAa,GAAG,CAAC;MAAG;MACvD,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,uBAAuB,CAAC,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC;MACtF,IAAI;QACA,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,iBAAiB,EAAE;UAAE,iBAAiB,EAAE;QAAK,CAAE,CAAC;QAChF,OAAO,IAAI,CAAC,gBAAgB,CAAC,EAAE,EAAE,IAAI,EAAE,WAAW,CAAC;OACtD,CAAC,OAAO,KAAK,EAAE;QACN,KAAM,CAAC,WAAW,GAAG,EAAE;QACvB,KAAM,CAAC,eAAe,GAAG,EAAE,CAAC,IAAI;QACtC,MAAM,KAAK;MACd;IACL,CAAC,CAAA;EAAA;EAEK,sBAAsB,CAAC,WAA2C,EAAA;;MACpE,MAAM,MAAM,GAAQ,MAAM,WAAW;MAErC,MAAM,EAAE,GAAQ,CAAA,CAAG;MAEnB,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,OAAO,CAAE,GAAG,IAAI;QAC3B,IAAI,MAAM,CAAC,GAAG,CAAC,IAAI,IAAI,EAAE;UAAE;QAAS;QACpC,EAAE,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAE,CAAC,IAAM,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,GAAE,IAAK,CAAC;MACvF,CAAC,CAAC;MAEF,CAAC,UAAU,EAAE,UAAU,EAAE,cAAc,EAAE,sBAAsB,EAAE,OAAO,CAAC,CAAC,OAAO,CAAE,GAAG,IAAI;QACtF,IAAI,MAAM,CAAC,GAAG,CAAC,IAAI,IAAI,EAAE;UAAE;QAAS;QACpC,EAAE,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAE,CAAC,IAAM,CAAC,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,GAAE,IAAK,CAAC;MACrF,CAAC,CAAC;MAEF,CAAC,MAAM,CAAC,CAAC,OAAO,CAAE,GAAG,IAAI;QACrB,IAAI,MAAM,CAAC,GAAG,CAAC,IAAI,IAAI,EAAE;UAAE;QAAS;QACpC,EAAE,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAE,CAAC,IAAO,CAAC,IAAI,IAAI,GAAI,CAAC,GAAE,IAAK,CAAC;MAC/E,CAAC,CAAC;MAEF,IAAI,MAAM,CAAC,UAAU,EAAE;QACnB,EAAE,CAAC,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,MAAM,CAAC,UAAU,CAAC;MAC/D;MAED,CAAC,MAAM,CAAC,CAAC,OAAO,CAAE,GAAG,IAAI;QACrB,IAAI,MAAM,CAAC,GAAG,CAAC,IAAI,IAAI,EAAE;UAAE;QAAS;QACpC,EAAE,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAE,CAAC,IAAM,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,GAAE,IAAK,CAAC;MAC9E,CAAC,CAAC;MAEF,OAAO,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC,MAAM,iBAAiB,CAAC,EAAE,CAAC,CAAC;IACzE,CAAC,CAAA;EAAA;EAEK,UAAU,CAAC,MAAwE,EAAA;;MACrF,MAAM,GAAG,MAAM,MAAM;MAErB,MAAM,MAAM,GAAQ,CAAA,CAAG;MAEvB,IAAI,MAAM,CAAC,OAAO,IAAI,IAAI,EAAE;QACxB,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC;MACpD;MAED,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC,OAAO,CAAE,GAAG,IAAI;QACpC,IAAU,MAAO,CAAC,GAAG,CAAC,IAAI,IAAI,EAAE;UAAE;QAAS;QAC3C,MAAM,CAAC,GAAG,CAAC,GAAS,MAAO,CAAC,GAAG,CAAC;MACpC,CAAC,CAAC;MAEF,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC,OAAO,CAAE,GAAG,IAAI;QACrC,IAAU,MAAO,CAAC,GAAG,CAAC,IAAI,IAAI,EAAE;UAAE;QAAS;QAC3C,MAAM,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,YAAY,CAAO,MAAO,CAAC,GAAG,CAAC,CAAC;MACvD,CAAC,CAAC;MAEF,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,iBAAiB,CAAC,MAAM,CAAC,CAAC;IACjE,CAAC,CAAA;EAAA;EAEK,KAAK,CAAC,WAA+B,EAAE,QAAkB,EAAE,OAAe,EAAA;;MAC5E,IAAI,OAAO,IAAI,kBAAkB,EAAE;QAC/B,MAAM,CAAC,UAAU,CAAC,yCAAyC,EAAE,MAAM,CAAC,MAAM,CAAC,YAAY,EAAE;UACrF,SAAS,EAAE,OAAO;UAAE;SACvB,CAAC;MACL;MAED,MAAM,QAAQ,GAAG,WAAW,CAAC,EAAE;MAE/B,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;QAAE,WAAW;QAAE;MAAQ,CAAE,CAAC;MAEpE;MACA,IAAI,OAAO,IAAI,CAAC,IAAI,QAAQ,KAAK,QAAQ,IAAI,QAAQ,IAAI,IAAI,IAAI,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,YAAY,IAAK,aAAa,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,CAAE,EAAE;QAC7I,IAAI;UACA,MAAM,IAAI,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC,CAAC;UAEpC;UACA,MAAM,MAAM,GAAG,YAAY,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC;UACxC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAE;YACtC,MAAM,CAAC,UAAU,CAAC,gCAAgC,EAAE,MAAM,CAAC,MAAM,CAAC,cAAc,EAAE;cAC9E,IAAI,EAAE,gBAAgB;cACtB,SAAS,EAAE,qDAAqD;cAChE,WAAW;cAAE,IAAI,EAAE;aACtB,CAAC;UACL;UAED;UACA,MAAM,IAAI,GAAkB,EAAE;UAC9B,MAAM,UAAU,GAAG,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,EAAE;UACxE,MAAM,UAAU,GAAG,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,UAAU,EAAE,UAAU,GAAG,EAAE,CAAC,CAAC,CAAC,QAAQ,EAAE;UAC7F,MAAM,QAAQ,GAAG,YAAY,CAAC,IAAI,EAAE,UAAU,GAAG,EAAE,CAAC;UACpD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE;YACjC,MAAM,GAAG,GAAG,YAAY,CAAC,QAAQ,EAAE,CAAC,GAAG,EAAE,CAAC;YAC1C,IAAI,GAAG,IAAI,IAAI,EAAE;cACb,MAAM,CAAC,UAAU,CAAC,wCAAwC,EAAE,MAAM,CAAC,MAAM,CAAC,cAAc,EAAE;gBACtF,IAAI,EAAE,gBAAgB;gBACtB,SAAS,EAAE,qDAAqD;gBAChE,WAAW;gBAAE,IAAI,EAAE;eACtB,CAAC;YACL;YACD,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;UACjB;UAED;UACA,MAAM,QAAQ,GAAG,WAAW,CAAC,IAAI,EAAE,EAAE,CAAC;UAEtC;UACA,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,MAAM,EAAE,EAAE;YACxD,MAAM,CAAC,UAAU,CAAC,2CAA2C,EAAE,MAAM,CAAC,MAAM,CAAC,cAAc,EAAE;cACzF,IAAI,EAAE,gBAAgB;cACtB,SAAS,EAAE,qDAAqD;cAChE,WAAW;cAAE,IAAI,EAAE;aACtB,CAAC;UACL;UACD,MAAM,gBAAgB,GAAG,YAAY,CAAC,IAAI,EAAE,EAAE,EAAE,GAAG,CAAC;UAEpD;UACA,MAAM,SAAS,GAAG,WAAW,CAAC,IAAI,EAAE,GAAG,CAAC;UAExC,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,aAAa,CAAc,WAAW,EAAE,QAAQ,EAAE,IAAI,CAAC;UACrF,IAAI,UAAU,IAAI,IAAI,EAAE;YACpB,MAAM,CAAC,UAAU,CAAC,wCAAwC,EAAE,MAAM,CAAC,MAAM,CAAC,cAAc,EAAE;cACtF,IAAI,EAAE,gBAAgB;cACtB,SAAS,EAAE,qDAAqD;cAChE,WAAW;cAAE,IAAI,EAAE;aACtB,CAAC;UACL;UAED,MAAM,EAAE,GAAG;YACP,EAAE,EAAE,QAAQ;YACZ,IAAI,EAAE,SAAS,CAAC,CAAE,gBAAgB,EAAE,WAAW,CAAC,CAAE,UAAU,EAAE,SAAS,CAAE,CAAC,CAAE;WAC/E;UAED,OAAO,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,QAAQ,EAAE,OAAO,GAAG,CAAC,CAAC;SAE/C,CAAC,OAAO,KAAK,EAAE;UACZ,IAAI,KAAK,CAAC,IAAI,KAAK,MAAM,CAAC,MAAM,CAAC,YAAY,EAAE;YAAE,MAAM,KAAK;UAAG;QAClE;MACJ;MAED,IAAI;QACA,OAAO,OAAO,CAAC,MAAM,CAAC;OACzB,CAAC,OAAO,KAAK,EAAE;QACZ,OAAO,MAAM,CAAC,UAAU,CAAC,yBAAyB,EAAE,MAAM,CAAC,MAAM,CAAC,YAAY,EAAE;UAC5E,MAAM,EAAE,MAAM;UACd,MAAM,EAAE;YAAE,WAAW;YAAE;UAAQ,CAAE;UAAE,MAAM;UAAE;SAC9C,CAAC;MACL;IAEL,CAAC,CAAA;EAAA;EAEK,IAAI,CAAC,WAA2C,EAAE,QAAuC,EAAA;;MAC3F,MAAM,IAAI,CAAC,UAAU,EAAE;MACvB,MAAM,QAAQ,GAAG,MAAM,iBAAiB,CAAC;QACrC,WAAW,EAAE,IAAI,CAAC,sBAAsB,CAAC,WAAW,CAAC;QACrD,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC;QACrC,eAAe,EAAE,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,eAAe;OAC/D,CAAC;MACF,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,WAAW,EAAE,QAAQ,CAAC,QAAQ,EAAE,QAAQ,CAAC,eAAe,GAAG,CAAC,GAAE,CAAC,CAAC,CAAC;IAChG,CAAC,CAAA;EAAA;EAEK,WAAW,CAAC,WAA2C,EAAA;;MACzD,MAAM,IAAI,CAAC,UAAU,EAAE;MACvB,MAAM,MAAM,GAAG,MAAM,iBAAiB,CAAC;QACnC,WAAW,EAAE,IAAI,CAAC,sBAAsB,CAAC,WAAW;OACvD,CAAC;MAEF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,MAAM,CAAC;MACxD,IAAI;QACA,OAAO,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC;OAChC,CAAC,OAAO,KAAK,EAAE;QACZ,OAAO,MAAM,CAAC,UAAU,CAAC,yBAAyB,EAAE,MAAM,CAAC,MAAM,CAAC,YAAY,EAAE;UAC5E,MAAM,EAAE,aAAa;UACrB,MAAM;UAAE,MAAM;UAAE;SACnB,CAAC;MACL;IACL,CAAC,CAAA;EAAA;EAEK,WAAW,CAAC,aAAuC,EAAA;;MACrD,aAAa,GAAG,MAAM,aAAa;MACnC,IAAI,OAAO,aAAc,KAAK,QAAQ,EAAE;QACpC,MAAM,CAAC,kBAAkB,CAAC,6BAA6B,EAAE,MAAM,EAAE,aAAa,CAAC;MAClF;MAED,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC;MACrD,IAAI,OAAO,IAAI,IAAI,EAAE;QACjB,MAAM,CAAC,UAAU,CAAC,yBAAyB,EAAE,MAAM,CAAC,MAAM,CAAC,qBAAqB,EAAE;UAC9E,SAAS,EAAE,eAAgB,IAAI,CAAC,SAAS,CAAC,aAAa,CAAE;SAC5D,CAAC;MACL;MACD,OAAO,OAAO;IAClB,CAAC,CAAA;EAAA;EAEK,SAAS,CAAC,mBAAmE,EAAE,mBAA6B,EAAA;;MAC9G,MAAM,IAAI,CAAC,UAAU,EAAE;MAEvB,mBAAmB,GAAG,MAAM,mBAAmB;MAE/C;MACA,IAAI,WAAW,GAAG,CAAC,GAAG;MAEtB,MAAM,MAAM,GAA2B;QACnC,mBAAmB,EAAE,CAAC,CAAC;OAC1B;MAED,IAAI,WAAW,CAAC,mBAAmB,EAAE,EAAE,CAAC,EAAE;QACtC,MAAM,CAAC,SAAS,GAAG,mBAAmB;OACzC,MAAM;QACH,IAAI;UACA,MAAM,CAAC,QAAQ,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,mBAAmB,CAAC;UAC9D,IAAI,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE;YAC9B,WAAW,GAAG,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;UAC3D;SACJ,CAAC,OAAO,KAAK,EAAE;UACZ,MAAM,CAAC,kBAAkB,CAAC,iCAAiC,EAAE,qBAAqB,EAAE,mBAAmB,CAAC;QAC3G;MACJ;MAED,OAAO,IAAI,CAAC,MAAW,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;QACnB,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,MAAM,CAAC;QAEpD;QACA,IAAI,KAAK,IAAI,IAAI,EAAE;UAEf;UACA;UACA;UACA,IAAI,MAAM,CAAC,SAAS,IAAI,IAAI,EAAE;YAC1B,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,MAAM,CAAC,SAAS,CAAC,IAAI,IAAI,EAAE;cAAE,OAAO,IAAI;YAAG;UACvE;UAED;UACA,IAAI,MAAM,CAAC,QAAQ,IAAI,IAAI,EAAE;YACzB,IAAI,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE;cAAE,OAAO,IAAI;YAAG;UAC1D;UAED;UACA,OAAO,SAAS;QACnB;QAED;QACA,IAAI,mBAAmB,EAAE;UACrB,IAAI,WAAW,GAAW,IAAI;UAC9B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAChD,MAAM,EAAE,GAAG,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC;YAChC,IAAI,EAAE,CAAC,WAAW,IAAI,IAAI,EAAE;cACxB,EAAE,CAAC,aAAa,GAAG,CAAC;aAEvB,MAAM,IAAI,EAAE,CAAC,aAAa,IAAI,IAAI,EAAE;cACjC,IAAI,WAAW,IAAI,IAAI,EAAE;gBACrB,WAAW,GAAG,MAAM,IAAI,CAAC,uBAAuB,CAAC,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC;cACnF;cAED;cACA,IAAI,aAAa,GAAI,WAAW,GAAG,EAAE,CAAC,WAAW,GAAI,CAAC;cACtD,IAAI,aAAa,IAAI,CAAC,EAAE;gBAAE,aAAa,GAAG,CAAC;cAAG;cAC9C,EAAE,CAAC,aAAa,GAAG,aAAa;YACnC;UACJ;UAED,MAAM,YAAY,GAAQ,IAAI,CAAC,SAAS,CAAC,qBAAqB,CAAC,KAAK,CAAC;UACrE,YAAY,CAAC,YAAY,GAAG,YAAY,CAAC,YAAY,CAAC,GAAG,CAAE,EAAuB,IAAK,IAAI,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC;UACjH,OAAO,YAAY;QACtB;QAED,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC;MAEtC,CAAC,CAAA,EAAE;QAAE,QAAQ,EAAE;MAAI,CAAE,CAAC;IAC1B,CAAC,CAAA;EAAA;EAED,QAAQ,CAAC,mBAAmE,EAAA;IACxE,OAAwB,IAAI,CAAC,SAAS,CAAC,mBAAmB,EAAE,KAAK,CAAC;EACtE;EAEA,wBAAwB,CAAC,mBAAmE,EAAA;IACxF,OAAwC,IAAI,CAAC,SAAS,CAAC,mBAAmB,EAAE,IAAI,CAAC;EACrF;EAEM,cAAc,CAAC,eAAyC,EAAA;;MAC1D,MAAM,IAAI,CAAC,UAAU,EAAE;MACvB,eAAe,GAAG,MAAM,eAAe;MAEvC,MAAM,MAAM,GAAG;QAAE,eAAe,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI;MAAC,CAAE;MAE9E,OAAO,IAAI,CAAC,MAAW,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;QACnB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE,MAAM,CAAC;QAE3D,IAAI,MAAM,IAAI,IAAI,EAAE;UAChB,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,eAAe,CAAC,IAAI,IAAI,EAAE;YAC/C,OAAO,IAAI;UACd;UACD,OAAO,SAAS;QACnB;QAED,MAAM,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,MAAM,CAAC;QAErD,IAAI,EAAE,CAAC,WAAW,IAAI,IAAI,EAAE;UACxB,EAAE,CAAC,aAAa,GAAG,CAAC;SAEvB,MAAM,IAAI,EAAE,CAAC,aAAa,IAAI,IAAI,EAAE;UACjC,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,uBAAuB,CAAC,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC;UAEtF;UACA,IAAI,aAAa,GAAI,WAAW,GAAG,EAAE,CAAC,WAAW,GAAI,CAAC;UACtD,IAAI,aAAa,IAAI,CAAC,EAAE;YAAE,aAAa,GAAG,CAAC;UAAG;UAC9C,EAAE,CAAC,aAAa,GAAG,aAAa;QACnC;QAED,OAAO,IAAI,CAAC,gBAAgB,CAAC,EAAE,CAAC;MACpC,CAAC,CAAA,EAAE;QAAE,QAAQ,EAAE;MAAI,CAAE,CAAC;IAC1B,CAAC,CAAA;EAAA;EAEK,qBAAqB,CAAC,eAAyC,EAAA;;MACjE,MAAM,IAAI,CAAC,UAAU,EAAE;MAEvB,eAAe,GAAG,MAAM,eAAe;MAEvC,MAAM,MAAM,GAAG;QAAE,eAAe,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI;MAAC,CAAE;MAE9E,OAAO,IAAI,CAAC,MAAW,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;QACnB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,uBAAuB,EAAE,MAAM,CAAC;QAElE,IAAI,MAAM,IAAI,IAAI,EAAE;UAChB,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,eAAe,CAAC,IAAI,IAAI,EAAE;YAC/C,OAAO,IAAI;UACd;UACD,OAAO,SAAS;QACnB;QAED;QACA,IAAI,MAAM,CAAC,SAAS,IAAI,IAAI,EAAE;UAAE,OAAO,SAAS;QAAG;QAEnD,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC;QAE9C,IAAI,OAAO,CAAC,WAAW,IAAI,IAAI,EAAE;UAC7B,OAAO,CAAC,aAAa,GAAG,CAAC;SAE5B,MAAM,IAAI,OAAO,CAAC,aAAa,IAAI,IAAI,EAAE;UACtC,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,uBAAuB,CAAC,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC;UAEtF;UACA,IAAI,aAAa,GAAI,WAAW,GAAG,OAAO,CAAC,WAAW,GAAI,CAAC;UAC3D,IAAI,aAAa,IAAI,CAAC,EAAE;YAAE,aAAa,GAAG,CAAC;UAAG;UAC9C,OAAO,CAAC,aAAa,GAAG,aAAa;QACxC;QAED,OAAO,OAAO;MAClB,CAAC,CAAA,EAAE;QAAE,QAAQ,EAAE;MAAI,CAAE,CAAC;IAC1B,CAAC,CAAA;EAAA;EAEK,OAAO,CAAC,MAAwE,EAAA;;MAClF,MAAM,IAAI,CAAC,UAAU,EAAE;MACvB,MAAM,MAAM,GAAG,MAAM,iBAAiB,CAAC;QAAE,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,MAAM;MAAC,CAAE,CAAC;MAC3E,MAAM,IAAI,GAAe,MAAM,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,MAAM,CAAC;MAC9D,IAAI,CAAC,OAAO,CAAE,GAAG,IAAI;QACjB,IAAI,GAAG,CAAC,OAAO,IAAI,IAAI,EAAE;UAAE,GAAG,CAAC,OAAO,GAAG,KAAK;QAAG;MACrD,CAAC,CAAC;MACF,OAAO,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC;IACjF,CAAC,CAAA;EAAA;EAEK,aAAa,GAAA;;MACf,MAAM,IAAI,CAAC,UAAU,EAAE;MACvB,OAAO,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE,CAAA,CAAG,CAAC;IAC7C,CAAC,CAAA;EAAA;EAEK,YAAY,CAAC,QAAsC,EAAA;;MACrD,QAAQ,GAAG,MAAM,QAAQ;MAEzB,IAAI,OAAO,QAAS,KAAK,QAAQ,IAAI,QAAQ,GAAG,CAAC,EAAE;QAC/C,IAAI,QAAQ,GAAG,CAAC,EAAE;UACd,MAAM,CAAC,kBAAkB,CAAC,kBAAkB,EAAE,UAAU,EAAE,QAAQ,CAAC;QACtE;QAED,IAAI,WAAW,GAAG,MAAM,IAAI,CAAC,uBAAuB,CAAC,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC;QACpF,WAAW,IAAI,QAAQ;QACvB,IAAI,WAAW,GAAG,CAAC,EAAE;UAAE,WAAW,GAAG,CAAC;QAAG;QACzC,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,WAAW,CAAC;MAC9C;MAED,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC;IAC5C,CAAC,CAAA;EAAA;EAGK,WAAW,CAAC,IAAY,EAAA;;MAC1B,IAAI,WAAW,GAAG,IAAI;MACtB,OAAO,IAAI,EAAE;QACT,IAAI,WAAW,KAAK,EAAE,IAAI,WAAW,KAAK,GAAG,EAAE;UAAE,OAAO,IAAI;QAAG;QAE/D;QACA;QACA,IAAI,IAAI,KAAK,KAAK,IAAI,WAAW,KAAK,KAAK,EAAE;UAAE,OAAO,IAAI;QAAG;QAE7D;QACA,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,aAAa,CAAC;QAEhE;QACA,IAAI,IAAI,IAAI,IAAI,EAAE;UACd,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;UAE/C;UACA,IAAI,WAAW,KAAK,IAAI,IAAI,EAAE,MAAM,QAAQ,CAAC,gBAAgB,EAAE,CAAC,EAAE;YAAE,OAAO,IAAI;UAAG;UAElF,OAAO,QAAQ;QAClB;QAED;QACA,WAAW,GAAG,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;MAC1D;IAEL,CAAC,CAAA;EAAA;EAEK,YAAY,CAAC,IAAY,EAAE,SAAkB,EAAA;;MAC/C,IAAI,SAAS,IAAI,IAAI,EAAE;QAAE,SAAS,GAAG,KAAK;MAAG;MAE7C,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,UAAU,EAAE;MAEvC;MACA,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE;QACrB,MAAM,CAAC,UAAU,CACb,8BAA8B,EAC9B,MAAM,CAAC,MAAM,CAAC,qBAAqB,EACnC;UAAE,SAAS;UAAE,OAAO,EAAE,OAAO,CAAC;QAAI,CAAE,CACvC;MACJ;MAED,IAAI;QACA;QACA,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC;UAC7B,EAAE,EAAE,OAAO,CAAC,UAAU;UACtB,IAAI,EAAG,YAAY,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,CAAC;SACnD,CAAC;QACF,OAAO,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,QAAQ,CAAC;OAC9C,CAAC,OAAO,KAAK,EAAE;QACZ;MAAA;MAGJ,OAAO,IAAI;IACf,CAAC,CAAA;EAAA;EAEK,WAAW,CAAC,IAA8B,EAAA;;MAC5C,IAAI,GAAG,MAAM,IAAI;MAEjB;MACA,IAAI;QACA,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;OACvD,CAAC,OAAO,KAAK,EAAE;QACZ;QACA,IAAI,WAAW,CAAC,IAAI,CAAC,EAAE;UAAE,MAAM,KAAK;QAAG;MAC1C;MAED,IAAI,OAAO,IAAK,KAAK,QAAQ,EAAE;QAC3B,MAAM,CAAC,kBAAkB,CAAC,kBAAkB,EAAE,MAAM,EAAE,IAAI,CAAC;MAC9D;MAED;MACA,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;MAC7C,IAAI,CAAC,QAAQ,EAAE;QAAE,OAAO,IAAI;MAAG;MAE/B,OAAO,MAAM,QAAQ,CAAC,UAAU,EAAE;IACtC,CAAC,CAAA;EAAA;EAEK,aAAa,CAAC,OAAiC,EAAA;;MACjD,OAAO,GAAG,MAAM,OAAO;MACvB,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC;MAEzC,MAAM,IAAI,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,eAAe;MAEjE,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,eAAe,CAAC;MACnE,IAAI,YAAY,IAAI,IAAI,EAAE;QAAE,OAAO,IAAI;MAAG;MAE1C;MACA,MAAM,IAAI,GAAG,YAAY,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC;QACtC,EAAE,EAAE,YAAY;QAChB,IAAI,EAAG,YAAY,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,CAAC;OACnD,CAAC,EAAE,CAAC,CAAC;MAEN,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;MACzC,IAAI,IAAI,IAAI,OAAO,EAAE;QAAE,OAAO,IAAI;MAAG;MAErC,OAAO,IAAI;IACf,CAAC,CAAA;EAAA;EAEK,SAAS,CAAC,aAAqB,EAAA;;MACjC,IAAI,QAAQ,GAAa,IAAI;MAC7B,IAAI,WAAW,CAAC,aAAa,CAAC,EAAE;QAC5B;QACA,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,aAAa,CAAC;QAErD,MAAM,IAAI,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,eAAe;QAEjE,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,WAAW,CAAC;QAClE,IAAI,CAAC,eAAe,EAAE;UAAE,OAAO,IAAI;QAAG;QAEtC;QACA,QAAQ,GAAG,IAAI,QAAQ,CAAC,IAAI,EAAE,eAAe,EAAE,IAAI,CAAC;QACpD,IAAI;UACA,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,SAAS,EAAE;UACzC,IAAI,MAAM,EAAE;YAAE,OAAO,MAAM,CAAC,GAAG;UAAG;SACrC,CAAC,OAAO,KAAK,EAAE;UACZ,IAAI,KAAK,CAAC,IAAI,KAAK,MAAM,CAAC,MAAM,CAAC,cAAc,EAAE;YAAE,MAAM,KAAK;UAAG;QACpE;QAED;QACA,IAAI;UACA;UACA,MAAM,IAAI,GAAG,YAAY,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC;YACtC,EAAE,EAAE,eAAe;YACnB,IAAI,EAAG,YAAY,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,CAAC;WACnD,CAAC,EAAE,CAAC,CAAC;UACN,QAAQ,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;SAC1C,CAAC,OAAO,KAAK,EAAE;UACZ,IAAI,KAAK,CAAC,IAAI,KAAK,MAAM,CAAC,MAAM,CAAC,cAAc,EAAE;YAAE,MAAM,KAAK;UAAG;UACjE,OAAO,IAAI;QACd;OAEJ,MAAM;QACH;QACA,QAAQ,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC;QAChD,IAAI,CAAC,QAAQ,EAAE;UAAE,OAAO,IAAI;QAAG;MAClC;MAED,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,SAAS,EAAE;MACzC,IAAI,MAAM,IAAI,IAAI,EAAE;QAAE,OAAO,IAAI;MAAG;MAEpC,OAAO,MAAM,CAAC,GAAG;IACrB,CAAC,CAAA;EAAA;EAED,OAAO,CAAC,MAAc,EAAE,MAAW,EAAA;IAC/B,OAAO,MAAM,CAAC,UAAU,CAAC,MAAM,GAAG,kBAAkB,EAAE,MAAM,CAAC,MAAM,CAAC,eAAe,EAAE;MAAE,SAAS,EAAE;IAAM,CAAE,CAAC;EAC/G;EAEA,WAAW,CAAC,KAAY,EAAA;IACpB,IAAI,CAAC,OAAO,GAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAE,CAAC,IAAK,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,MAAM,GAAG,CAAE;EACxE;EAEA,UAAU,CAAC,KAAY,EAAA;IACnB,IAAI,CAAC,OAAO,GAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAE,CAAC,IAAK,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,MAAM,GAAG,CAAE;EACxE;EAEA,iBAAiB,CAAC,SAAoB,EAAE,QAAkB,EAAE,IAAa,EAAA;IACrE,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,WAAW,CAAC,SAAS,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC;IAC/D,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC;IACxB,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;IAEvB,OAAO,IAAI;EACf;EAEA,EAAE,CAAC,SAAoB,EAAE,QAAkB,EAAA;IACvC,OAAO,IAAI,CAAC,iBAAiB,CAAC,SAAS,EAAE,QAAQ,EAAE,KAAK,CAAC;EAC7D;EAEA,IAAI,CAAC,SAAoB,EAAE,QAAkB,EAAA;IACzC,OAAO,IAAI,CAAC,iBAAiB,CAAC,SAAS,EAAE,QAAQ,EAAE,IAAI,CAAC;EAC5D;EAGA,IAAI,CAAC,SAAoB,EAAqB;IAAA,kCAAhB,IAAgB;MAAhB,IAAgB;IAAA;IAC1C,IAAI,MAAM,GAAG,KAAK;IAElB,IAAI,OAAO,GAAiB,EAAG;IAE/B,IAAI,QAAQ,GAAG,WAAW,CAAC,SAAS,CAAC;IACrC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAE,KAAK,IAAI;MACzC,IAAI,KAAK,CAAC,GAAG,KAAK,QAAQ,EAAE;QAAE,OAAO,IAAI;MAAG;MAE5C,UAAU,CAAC,MAAK;QACZ,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC;MACpC,CAAC,EAAE,CAAC,CAAC;MAEL,MAAM,GAAG,IAAI;MAEb,IAAI,KAAK,CAAC,IAAI,EAAE;QACZ,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC;QACnB,OAAO,KAAK;MACf;MAED,OAAO,IAAI;IACf,CAAC,CAAC;IAEF,OAAO,CAAC,OAAO,CAAE,KAAK,IAAI;MAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC;IAAE,CAAC,CAAC;IAEvD,OAAO,MAAM;EACjB;EAEA,aAAa,CAAC,SAAqB,EAAA;IAC/B,IAAI,CAAC,SAAS,EAAE;MAAE,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM;IAAG;IAE/C,IAAI,QAAQ,GAAG,WAAW,CAAC,SAAS,CAAC;IACrC,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAE,KAAK,IAAI;MACjC,OAAQ,KAAK,CAAC,GAAG,KAAK,QAAQ;IAClC,CAAC,CAAC,CAAC,MAAM;EACb;EAEA,SAAS,CAAC,SAAqB,EAAA;IAC3B,IAAI,SAAS,IAAI,IAAI,EAAE;MACnB,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAE,KAAK,IAAK,KAAK,CAAC,QAAQ,CAAC;IACrD;IAED,IAAI,QAAQ,GAAG,WAAW,CAAC,SAAS,CAAC;IACrC,OAAO,IAAI,CAAC,OAAO,CACd,MAAM,CAAE,KAAK,IAAM,KAAK,CAAC,GAAG,KAAK,QAAS,CAAC,CAC3C,GAAG,CAAE,KAAK,IAAK,KAAK,CAAC,QAAQ,CAAC;EACvC;EAEA,GAAG,CAAC,SAAoB,EAAE,QAAmB,EAAA;IACzC,IAAI,QAAQ,IAAI,IAAI,EAAE;MAClB,OAAO,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC;IAC5C;IAED,MAAM,OAAO,GAAiB,EAAG;IAEjC,IAAI,KAAK,GAAG,KAAK;IAEjB,IAAI,QAAQ,GAAG,WAAW,CAAC,SAAS,CAAC;IACrC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAE,KAAK,IAAI;MACzC,IAAI,KAAK,CAAC,GAAG,KAAK,QAAQ,IAAI,KAAK,CAAC,QAAQ,IAAI,QAAQ,EAAE;QAAE,OAAO,IAAI;MAAG;MAC1E,IAAI,KAAK,EAAE;QAAE,OAAO,IAAI;MAAG;MAC3B,KAAK,GAAG,IAAI;MACZ,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC;MACnB,OAAO,KAAK;IAChB,CAAC,CAAC;IAEF,OAAO,CAAC,OAAO,CAAE,KAAK,IAAI;MAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC;IAAE,CAAC,CAAC;IAEvD,OAAO,IAAI;EACf;EAEA,kBAAkB,CAAC,SAAqB,EAAA;IACpC,IAAI,OAAO,GAAiB,EAAG;IAC/B,IAAI,SAAS,IAAI,IAAI,EAAE;MACnB,OAAO,GAAG,IAAI,CAAC,OAAO;MAEtB,IAAI,CAAC,OAAO,GAAG,EAAG;KACrB,MAAM;MACH,MAAM,QAAQ,GAAG,WAAW,CAAC,SAAS,CAAC;MACvC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAE,KAAK,IAAI;QACzC,IAAI,KAAK,CAAC,GAAG,KAAK,QAAQ,EAAE;UAAE,OAAO,IAAI;QAAG;QAC5C,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC;QACnB,OAAO,KAAK;MAChB,CAAC,CAAC;IACL;IAED,OAAO,CAAC,OAAO,CAAE,KAAK,IAAI;MAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC;IAAE,CAAC,CAAC;IAEvD,OAAO,IAAI;EACf;AACH","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ForkEvent, Provider } from \"@ethersproject/abstract-provider\";\nimport { encode as base64Encode } from \"@ethersproject/base64\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexConcat, hexDataLength, hexDataSlice, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { HashZero } from \"@ethersproject/constants\";\nimport { dnsEncode, namehash } from \"@ethersproject/hash\";\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { sha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\nimport bech32 from \"bech32\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { Formatter } from \"./formatter\";\nconst MAX_CCIP_REDIRECTS = 10;\n//////////////////////////////\n// Event Serializeing\nfunction checkTopic(topic) {\n    if (topic == null) {\n        return \"null\";\n    }\n    if (hexDataLength(topic) !== 32) {\n        logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n    }\n    return topic.toLowerCase();\n}\nfunction serializeTopics(topics) {\n    // Remove trailing null AND-topics; they are redundant\n    topics = topics.slice();\n    while (topics.length > 0 && topics[topics.length - 1] == null) {\n        topics.pop();\n    }\n    return topics.map((topic) => {\n        if (Array.isArray(topic)) {\n            // Only track unique OR-topics\n            const unique = {};\n            topic.forEach((topic) => {\n                unique[checkTopic(topic)] = true;\n            });\n            // The order of OR-topics does not matter\n            const sorted = Object.keys(unique);\n            sorted.sort();\n            return sorted.join(\"|\");\n        }\n        else {\n            return checkTopic(topic);\n        }\n    }).join(\"&\");\n}\nfunction deserializeTopics(data) {\n    if (data === \"\") {\n        return [];\n    }\n    return data.split(/&/g).map((topic) => {\n        if (topic === \"\") {\n            return [];\n        }\n        const comps = topic.split(\"|\").map((topic) => {\n            return ((topic === \"null\") ? null : topic);\n        });\n        return ((comps.length === 1) ? comps[0] : comps);\n    });\n}\nfunction getEventTag(eventName) {\n    if (typeof (eventName) === \"string\") {\n        eventName = eventName.toLowerCase();\n        if (hexDataLength(eventName) === 32) {\n            return \"tx:\" + eventName;\n        }\n        if (eventName.indexOf(\":\") === -1) {\n            return eventName;\n        }\n    }\n    else if (Array.isArray(eventName)) {\n        return \"filter:*:\" + serializeTopics(eventName);\n    }\n    else if (ForkEvent.isForkEvent(eventName)) {\n        logger.warn(\"not implemented\");\n        throw new Error(\"not implemented\");\n    }\n    else if (eventName && typeof (eventName) === \"object\") {\n        return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n    }\n    throw new Error(\"invalid event - \" + eventName);\n}\n//////////////////////////////\n// Helper Object\nfunction getTime() {\n    return (new Date()).getTime();\n}\nfunction stall(duration) {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\n//////////////////////////////\n// Provider Object\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\nconst PollableEvents = [\"block\", \"network\", \"pending\", \"poll\"];\nexport class Event {\n    constructor(tag, listener, once) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"listener\", listener);\n        defineReadOnly(this, \"once\", once);\n        this._lastBlockNumber = -2;\n        this._inflight = false;\n    }\n    get event() {\n        switch (this.type) {\n            case \"tx\":\n                return this.hash;\n            case \"filter\":\n                return this.filter;\n        }\n        return this.tag;\n    }\n    get type() {\n        return this.tag.split(\":\")[0];\n    }\n    get hash() {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"tx\") {\n            return null;\n        }\n        return comps[1];\n    }\n    get filter() {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"filter\") {\n            return null;\n        }\n        const address = comps[1];\n        const topics = deserializeTopics(comps[2]);\n        const filter = {};\n        if (topics.length > 0) {\n            filter.topics = topics;\n        }\n        if (address && address !== \"*\") {\n            filter.address = address;\n        }\n        return filter;\n    }\n    pollable() {\n        return (this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0);\n    }\n}\n;\n// https://github.com/satoshilabs/slips/blob/master/slip-0044.md\nconst coinInfos = {\n    \"0\": { symbol: \"btc\", p2pkh: 0x00, p2sh: 0x05, prefix: \"bc\" },\n    \"2\": { symbol: \"ltc\", p2pkh: 0x30, p2sh: 0x32, prefix: \"ltc\" },\n    \"3\": { symbol: \"doge\", p2pkh: 0x1e, p2sh: 0x16 },\n    \"60\": { symbol: \"eth\", ilk: \"eth\" },\n    \"61\": { symbol: \"etc\", ilk: \"eth\" },\n    \"700\": { symbol: \"xdai\", ilk: \"eth\" },\n};\nfunction bytes32ify(value) {\n    return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n}\n// Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\nfunction base58Encode(data) {\n    return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));\n}\nconst matcherIpfs = new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\");\nconst matchers = [\n    new RegExp(\"^(https):/\\/(.*)$\", \"i\"),\n    new RegExp(\"^(data):(.*)$\", \"i\"),\n    matcherIpfs,\n    new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\"),\n];\nfunction _parseString(result, start) {\n    try {\n        return toUtf8String(_parseBytes(result, start));\n    }\n    catch (error) { }\n    return null;\n}\nfunction _parseBytes(result, start) {\n    if (result === \"0x\") {\n        return null;\n    }\n    const offset = BigNumber.from(hexDataSlice(result, start, start + 32)).toNumber();\n    const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n    return hexDataSlice(result, offset + 32, offset + 32 + length);\n}\n// Trim off the ipfs:// prefix and return the default gateway URL\nfunction getIpfsLink(link) {\n    if (link.match(/^ipfs:\\/\\/ipfs\\//i)) {\n        link = link.substring(12);\n    }\n    else if (link.match(/^ipfs:\\/\\//i)) {\n        link = link.substring(7);\n    }\n    else {\n        logger.throwArgumentError(\"unsupported IPFS format\", \"link\", link);\n    }\n    return `https:/\\/gateway.ipfs.io/ipfs/${link}`;\n}\nfunction numPad(value) {\n    const result = arrayify(value);\n    if (result.length > 32) {\n        throw new Error(\"internal; should not happen\");\n    }\n    const padded = new Uint8Array(32);\n    padded.set(result, 32 - result.length);\n    return padded;\n}\nfunction bytesPad(value) {\n    if ((value.length % 32) === 0) {\n        return value;\n    }\n    const result = new Uint8Array(Math.ceil(value.length / 32) * 32);\n    result.set(value);\n    return result;\n}\n// ABI Encodes a series of (bytes, bytes, ...)\nfunction encodeBytes(datas) {\n    const result = [];\n    let byteCount = 0;\n    // Add place-holders for pointers as we add items\n    for (let i = 0; i < datas.length; i++) {\n        result.push(null);\n        byteCount += 32;\n    }\n    for (let i = 0; i < datas.length; i++) {\n        const data = arrayify(datas[i]);\n        // Update the bytes offset\n        result[i] = numPad(byteCount);\n        // The length and padded value of data\n        result.push(numPad(data.length));\n        result.push(bytesPad(data));\n        byteCount += 32 + Math.ceil(data.length / 32) * 32;\n    }\n    return hexConcat(result);\n}\nexport class Resolver {\n    // The resolvedAddress is only for creating a ReverseLookup resolver\n    constructor(provider, address, name, resolvedAddress) {\n        defineReadOnly(this, \"provider\", provider);\n        defineReadOnly(this, \"name\", name);\n        defineReadOnly(this, \"address\", provider.formatter.address(address));\n        defineReadOnly(this, \"_resolvedAddress\", resolvedAddress);\n    }\n    supportsWildcard() {\n        if (!this._supportsEip2544) {\n            // supportsInterface(bytes4 = selector(\"resolve(bytes,bytes)\"))\n            this._supportsEip2544 = this.provider.call({\n                to: this.address,\n                data: \"0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000\"\n            }).then((result) => {\n                return BigNumber.from(result).eq(1);\n            }).catch((error) => {\n                if (error.code === Logger.errors.CALL_EXCEPTION) {\n                    return false;\n                }\n                // Rethrow the error: link is down, etc. Let future attempts retry.\n                this._supportsEip2544 = null;\n                throw error;\n            });\n        }\n        return this._supportsEip2544;\n    }\n    _fetch(selector, parameters) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // e.g. keccak256(\"addr(bytes32,uint256)\")\n            const tx = {\n                to: this.address,\n                ccipReadEnabled: true,\n                data: hexConcat([selector, namehash(this.name), (parameters || \"0x\")])\n            };\n            // Wildcard support; use EIP-2544 to resolve the request\n            let parseBytes = false;\n            if (yield this.supportsWildcard()) {\n                parseBytes = true;\n                // selector(\"resolve(bytes,bytes)\")\n                tx.data = hexConcat([\"0x9061b923\", encodeBytes([dnsEncode(this.name), tx.data])]);\n            }\n            try {\n                let result = yield this.provider.call(tx);\n                if ((arrayify(result).length % 32) === 4) {\n                    logger.throwError(\"resolver threw error\", Logger.errors.CALL_EXCEPTION, {\n                        transaction: tx, data: result\n                    });\n                }\n                if (parseBytes) {\n                    result = _parseBytes(result, 0);\n                }\n                return result;\n            }\n            catch (error) {\n                if (error.code === Logger.errors.CALL_EXCEPTION) {\n                    return null;\n                }\n                throw error;\n            }\n        });\n    }\n    _fetchBytes(selector, parameters) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield this._fetch(selector, parameters);\n            if (result != null) {\n                return _parseBytes(result, 0);\n            }\n            return null;\n        });\n    }\n    _getAddress(coinType, hexBytes) {\n        const coinInfo = coinInfos[String(coinType)];\n        if (coinInfo == null) {\n            logger.throwError(`unsupported coin type: ${coinType}`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${coinType})`\n            });\n        }\n        if (coinInfo.ilk === \"eth\") {\n            return this.provider.formatter.address(hexBytes);\n        }\n        const bytes = arrayify(hexBytes);\n        // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n        if (coinInfo.p2pkh != null) {\n            const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n            if (p2pkh) {\n                const length = parseInt(p2pkh[1], 16);\n                if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([[coinInfo.p2pkh], (\"0x\" + p2pkh[2])]));\n                }\n            }\n        }\n        // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n        if (coinInfo.p2sh != null) {\n            const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n            if (p2sh) {\n                const length = parseInt(p2sh[1], 16);\n                if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([[coinInfo.p2sh], (\"0x\" + p2sh[2])]));\n                }\n            }\n        }\n        // Bech32\n        if (coinInfo.prefix != null) {\n            const length = bytes[1];\n            // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n            let version = bytes[0];\n            if (version === 0x00) {\n                if (length !== 20 && length !== 32) {\n                    version = -1;\n                }\n            }\n            else {\n                version = -1;\n            }\n            if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {\n                const words = bech32.toWords(bytes.slice(2));\n                words.unshift(version);\n                return bech32.encode(coinInfo.prefix, words);\n            }\n        }\n        return null;\n    }\n    getAddress(coinType) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (coinType == null) {\n                coinType = 60;\n            }\n            // If Ethereum, use the standard `addr(bytes32)`\n            if (coinType === 60) {\n                try {\n                    // keccak256(\"addr(bytes32)\")\n                    const result = yield this._fetch(\"0x3b3b57de\");\n                    // No address\n                    if (result === \"0x\" || result === HashZero) {\n                        return null;\n                    }\n                    return this.provider.formatter.callAddress(result);\n                }\n                catch (error) {\n                    if (error.code === Logger.errors.CALL_EXCEPTION) {\n                        return null;\n                    }\n                    throw error;\n                }\n            }\n            // keccak256(\"addr(bytes32,uint256\")\n            const hexBytes = yield this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType));\n            // No address\n            if (hexBytes == null || hexBytes === \"0x\") {\n                return null;\n            }\n            // Compute the address\n            const address = this._getAddress(coinType, hexBytes);\n            if (address == null) {\n                logger.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: `getAddress(${coinType})`,\n                    coinType: coinType,\n                    data: hexBytes\n                });\n            }\n            return address;\n        });\n    }\n    getAvatar() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const linkage = [{ type: \"name\", content: this.name }];\n            try {\n                // test data for ricmoo.eth\n                //const avatar = \"eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233\";\n                const avatar = yield this.getText(\"avatar\");\n                if (avatar == null) {\n                    return null;\n                }\n                for (let i = 0; i < matchers.length; i++) {\n                    const match = avatar.match(matchers[i]);\n                    if (match == null) {\n                        continue;\n                    }\n                    const scheme = match[1].toLowerCase();\n                    switch (scheme) {\n                        case \"https\":\n                            linkage.push({ type: \"url\", content: avatar });\n                            return { linkage, url: avatar };\n                        case \"data\":\n                            linkage.push({ type: \"data\", content: avatar });\n                            return { linkage, url: avatar };\n                        case \"ipfs\":\n                            linkage.push({ type: \"ipfs\", content: avatar });\n                            return { linkage, url: getIpfsLink(avatar) };\n                        case \"erc721\":\n                        case \"erc1155\": {\n                            // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n                            const selector = (scheme === \"erc721\") ? \"0xc87b56dd\" : \"0x0e89341c\";\n                            linkage.push({ type: scheme, content: avatar });\n                            // The owner of this name\n                            const owner = (this._resolvedAddress || (yield this.getAddress()));\n                            const comps = (match[2] || \"\").split(\"/\");\n                            if (comps.length !== 2) {\n                                return null;\n                            }\n                            const addr = yield this.provider.formatter.address(comps[0]);\n                            const tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32);\n                            // Check that this account owns the token\n                            if (scheme === \"erc721\") {\n                                // ownerOf(uint256 tokenId)\n                                const tokenOwner = this.provider.formatter.callAddress(yield this.provider.call({\n                                    to: addr, data: hexConcat([\"0x6352211e\", tokenId])\n                                }));\n                                if (owner !== tokenOwner) {\n                                    return null;\n                                }\n                                linkage.push({ type: \"owner\", content: tokenOwner });\n                            }\n                            else if (scheme === \"erc1155\") {\n                                // balanceOf(address owner, uint256 tokenId)\n                                const balance = BigNumber.from(yield this.provider.call({\n                                    to: addr, data: hexConcat([\"0x00fdd58e\", hexZeroPad(owner, 32), tokenId])\n                                }));\n                                if (balance.isZero()) {\n                                    return null;\n                                }\n                                linkage.push({ type: \"balance\", content: balance.toString() });\n                            }\n                            // Call the token contract for the metadata URL\n                            const tx = {\n                                to: this.provider.formatter.address(comps[0]),\n                                data: hexConcat([selector, tokenId])\n                            };\n                            let metadataUrl = _parseString(yield this.provider.call(tx), 0);\n                            if (metadataUrl == null) {\n                                return null;\n                            }\n                            linkage.push({ type: \"metadata-url-base\", content: metadataUrl });\n                            // ERC-1155 allows a generic {id} in the URL\n                            if (scheme === \"erc1155\") {\n                                metadataUrl = metadataUrl.replace(\"{id}\", tokenId.substring(2));\n                                linkage.push({ type: \"metadata-url-expanded\", content: metadataUrl });\n                            }\n                            // Transform IPFS metadata links\n                            if (metadataUrl.match(/^ipfs:/i)) {\n                                metadataUrl = getIpfsLink(metadataUrl);\n                            }\n                            linkage.push({ type: \"metadata-url\", content: metadataUrl });\n                            // Get the token metadata\n                            const metadata = yield fetchJson(metadataUrl);\n                            if (!metadata) {\n                                return null;\n                            }\n                            linkage.push({ type: \"metadata\", content: JSON.stringify(metadata) });\n                            // Pull the image URL out\n                            let imageUrl = metadata.image;\n                            if (typeof (imageUrl) !== \"string\") {\n                                return null;\n                            }\n                            if (imageUrl.match(/^(https:\\/\\/|data:)/i)) {\n                                // Allow\n                            }\n                            else {\n                                // Transform IPFS link to gateway\n                                const ipfs = imageUrl.match(matcherIpfs);\n                                if (ipfs == null) {\n                                    return null;\n                                }\n                                linkage.push({ type: \"url-ipfs\", content: imageUrl });\n                                imageUrl = getIpfsLink(imageUrl);\n                            }\n                            linkage.push({ type: \"url\", content: imageUrl });\n                            return { linkage, url: imageUrl };\n                        }\n                    }\n                }\n            }\n            catch (error) { }\n            return null;\n        });\n    }\n    getContentHash() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // keccak256(\"contenthash()\")\n            const hexBytes = yield this._fetchBytes(\"0xbc1c58d1\");\n            // No contenthash\n            if (hexBytes == null || hexBytes === \"0x\") {\n                return null;\n            }\n            // IPFS (CID: 1, Type: DAG-PB)\n            const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n            if (ipfs) {\n                const length = parseInt(ipfs[3], 16);\n                if (ipfs[4].length === length * 2) {\n                    return \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]);\n                }\n            }\n            // IPNS (CID: 1, Type: libp2p-key)\n            const ipns = hexBytes.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n            if (ipns) {\n                const length = parseInt(ipns[3], 16);\n                if (ipns[4].length === length * 2) {\n                    return \"ipns:/\\/\" + Base58.encode(\"0x\" + ipns[1]);\n                }\n            }\n            // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n            const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);\n            if (swarm) {\n                if (swarm[1].length === (32 * 2)) {\n                    return \"bzz:/\\/\" + swarm[1];\n                }\n            }\n            const skynet = hexBytes.match(/^0x90b2c605([0-9a-f]*)$/);\n            if (skynet) {\n                if (skynet[1].length === (34 * 2)) {\n                    // URL Safe base64; https://datatracker.ietf.org/doc/html/rfc4648#section-5\n                    const urlSafe = { \"=\": \"\", \"+\": \"-\", \"/\": \"_\" };\n                    const hash = base64Encode(\"0x\" + skynet[1]).replace(/[=+\\/]/g, (a) => (urlSafe[a]));\n                    return \"sia:/\\/\" + hash;\n                }\n            }\n            return logger.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"getContentHash()\",\n                data: hexBytes\n            });\n        });\n    }\n    getText(key) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // The key encoded as parameter to fetchBytes\n            let keyBytes = toUtf8Bytes(key);\n            // The nodehash consumes the first slot, so the string pointer targets\n            // offset 64, with the length at offset 64 and data starting at offset 96\n            keyBytes = concat([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]);\n            // Pad to word-size (32 bytes)\n            if ((keyBytes.length % 32) !== 0) {\n                keyBytes = concat([keyBytes, hexZeroPad(\"0x\", 32 - (key.length % 32))]);\n            }\n            const hexBytes = yield this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n            if (hexBytes == null || hexBytes === \"0x\") {\n                return null;\n            }\n            return toUtf8String(hexBytes);\n        });\n    }\n}\nlet defaultFormatter = null;\nlet nextPollId = 1;\nexport class BaseProvider extends Provider {\n    /**\n     *  ready\n     *\n     *  A Promise<Network> that resolves only once the provider is ready.\n     *\n     *  Sub-classes that call the super with a network without a chainId\n     *  MUST set this. Standard named networks have a known chainId.\n     *\n     */\n    constructor(network) {\n        super();\n        // Events being listened to\n        this._events = [];\n        this._emitted = { block: -2 };\n        this.disableCcipRead = false;\n        this.formatter = new.target.getFormatter();\n        // If network is any, this Provider allows the underlying\n        // network to change dynamically, and we auto-detect the\n        // current network\n        defineReadOnly(this, \"anyNetwork\", (network === \"any\"));\n        if (this.anyNetwork) {\n            network = this.detectNetwork();\n        }\n        if (network instanceof Promise) {\n            this._networkPromise = network;\n            // Squash any \"unhandled promise\" errors; that do not need to be handled\n            network.catch((error) => { });\n            // Trigger initial network setting (async)\n            this._ready().catch((error) => { });\n        }\n        else {\n            const knownNetwork = getStatic(new.target, \"getNetwork\")(network);\n            if (knownNetwork) {\n                defineReadOnly(this, \"_network\", knownNetwork);\n                this.emit(\"network\", knownNetwork, null);\n            }\n            else {\n                logger.throwArgumentError(\"invalid network\", \"network\", network);\n            }\n        }\n        this._maxInternalBlockNumber = -1024;\n        this._lastBlockNumber = -2;\n        this._maxFilterBlockRange = 10;\n        this._pollingInterval = 4000;\n        this._fastQueryDate = 0;\n    }\n    _ready() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._network == null) {\n                let network = null;\n                if (this._networkPromise) {\n                    try {\n                        network = yield this._networkPromise;\n                    }\n                    catch (error) { }\n                }\n                // Try the Provider's network detection (this MUST throw if it cannot)\n                if (network == null) {\n                    network = yield this.detectNetwork();\n                }\n                // This should never happen; every Provider sub-class should have\n                // suggested a network by here (or have thrown).\n                if (!network) {\n                    logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, {});\n                }\n                // Possible this call stacked so do not call defineReadOnly again\n                if (this._network == null) {\n                    if (this.anyNetwork) {\n                        this._network = network;\n                    }\n                    else {\n                        defineReadOnly(this, \"_network\", network);\n                    }\n                    this.emit(\"network\", network, null);\n                }\n            }\n            return this._network;\n        });\n    }\n    // This will always return the most recently established network.\n    // For \"any\", this can change (a \"network\" event is emitted before\n    // any change is reflected); otherwise this cannot change\n    get ready() {\n        return poll(() => {\n            return this._ready().then((network) => {\n                return network;\n            }, (error) => {\n                // If the network isn't running yet, we will wait\n                if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n                    return undefined;\n                }\n                throw error;\n            });\n        });\n    }\n    // @TODO: Remove this and just create a singleton formatter\n    static getFormatter() {\n        if (defaultFormatter == null) {\n            defaultFormatter = new Formatter();\n        }\n        return defaultFormatter;\n    }\n    // @TODO: Remove this and just use getNetwork\n    static getNetwork(network) {\n        return getNetwork((network == null) ? \"homestead\" : network);\n    }\n    ccipReadFetch(tx, calldata, urls) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.disableCcipRead || urls.length === 0) {\n                return null;\n            }\n            const sender = tx.to.toLowerCase();\n            const data = calldata.toLowerCase();\n            const errorMessages = [];\n            for (let i = 0; i < urls.length; i++) {\n                const url = urls[i];\n                // URL expansion\n                const href = url.replace(\"{sender}\", sender).replace(\"{data}\", data);\n                // If no {data} is present, use POST; otherwise GET\n                const json = (url.indexOf(\"{data}\") >= 0) ? null : JSON.stringify({ data, sender });\n                const result = yield fetchJson({ url: href, errorPassThrough: true }, json, (value, response) => {\n                    value.status = response.statusCode;\n                    return value;\n                });\n                if (result.data) {\n                    return result.data;\n                }\n                const errorMessage = (result.message || \"unknown error\");\n                // 4xx indicates the result is not present; stop\n                if (result.status >= 400 && result.status < 500) {\n                    return logger.throwError(`response not found during CCIP fetch: ${errorMessage}`, Logger.errors.SERVER_ERROR, { url, errorMessage });\n                }\n                // 5xx indicates server issue; try the next url\n                errorMessages.push(errorMessage);\n            }\n            return logger.throwError(`error encountered during CCIP fetch: ${errorMessages.map((m) => JSON.stringify(m)).join(\", \")}`, Logger.errors.SERVER_ERROR, {\n                urls, errorMessages\n            });\n        });\n    }\n    // Fetches the blockNumber, but will reuse any result that is less\n    // than maxAge old or has been requested since the last request\n    _getInternalBlockNumber(maxAge) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this._ready();\n            // Allowing stale data up to maxAge old\n            if (maxAge > 0) {\n                // While there are pending internal block requests...\n                while (this._internalBlockNumber) {\n                    // ...\"remember\" which fetch we started with\n                    const internalBlockNumber = this._internalBlockNumber;\n                    try {\n                        // Check the result is not too stale\n                        const result = yield internalBlockNumber;\n                        if ((getTime() - result.respTime) <= maxAge) {\n                            return result.blockNumber;\n                        }\n                        // Too old; fetch a new value\n                        break;\n                    }\n                    catch (error) {\n                        // The fetch rejected; if we are the first to get the\n                        // rejection, drop through so we replace it with a new\n                        // fetch; all others blocked will then get that fetch\n                        // which won't match the one they \"remembered\" and loop\n                        if (this._internalBlockNumber === internalBlockNumber) {\n                            break;\n                        }\n                    }\n                }\n            }\n            const reqTime = getTime();\n            const checkInternalBlockNumber = resolveProperties({\n                blockNumber: this.perform(\"getBlockNumber\", {}),\n                networkError: this.getNetwork().then((network) => (null), (error) => (error))\n            }).then(({ blockNumber, networkError }) => {\n                if (networkError) {\n                    // Unremember this bad internal block number\n                    if (this._internalBlockNumber === checkInternalBlockNumber) {\n                        this._internalBlockNumber = null;\n                    }\n                    throw networkError;\n                }\n                const respTime = getTime();\n                blockNumber = BigNumber.from(blockNumber).toNumber();\n                if (blockNumber < this._maxInternalBlockNumber) {\n                    blockNumber = this._maxInternalBlockNumber;\n                }\n                this._maxInternalBlockNumber = blockNumber;\n                this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n                return { blockNumber, reqTime, respTime };\n            });\n            this._internalBlockNumber = checkInternalBlockNumber;\n            // Swallow unhandled exceptions; if needed they are handled else where\n            checkInternalBlockNumber.catch((error) => {\n                // Don't null the dead (rejected) fetch, if it has already been updated\n                if (this._internalBlockNumber === checkInternalBlockNumber) {\n                    this._internalBlockNumber = null;\n                }\n            });\n            return (yield checkInternalBlockNumber).blockNumber;\n        });\n    }\n    poll() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const pollId = nextPollId++;\n            // Track all running promises, so we can trigger a post-poll once they are complete\n            const runners = [];\n            let blockNumber = null;\n            try {\n                blockNumber = yield this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n            }\n            catch (error) {\n                this.emit(\"error\", error);\n                return;\n            }\n            this._setFastBlockNumber(blockNumber);\n            // Emit a poll event after we have the latest (fast) block number\n            this.emit(\"poll\", pollId, blockNumber);\n            // If the block has not changed, meh.\n            if (blockNumber === this._lastBlockNumber) {\n                this.emit(\"didPoll\", pollId);\n                return;\n            }\n            // First polling cycle, trigger a \"block\" events\n            if (this._emitted.block === -2) {\n                this._emitted.block = blockNumber - 1;\n            }\n            if (Math.abs((this._emitted.block) - blockNumber) > 1000) {\n                logger.warn(`network block skew detected; skipping block events (emitted=${this._emitted.block} blockNumber${blockNumber})`);\n                this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n                    blockNumber: blockNumber,\n                    event: \"blockSkew\",\n                    previousBlockNumber: this._emitted.block\n                }));\n                this.emit(\"block\", blockNumber);\n            }\n            else {\n                // Notify all listener for each block that has passed\n                for (let i = this._emitted.block + 1; i <= blockNumber; i++) {\n                    this.emit(\"block\", i);\n                }\n            }\n            // The emitted block was updated, check for obsolete events\n            if (this._emitted.block !== blockNumber) {\n                this._emitted.block = blockNumber;\n                Object.keys(this._emitted).forEach((key) => {\n                    // The block event does not expire\n                    if (key === \"block\") {\n                        return;\n                    }\n                    // The block we were at when we emitted this event\n                    const eventBlockNumber = this._emitted[key];\n                    // We cannot garbage collect pending transactions or blocks here\n                    // They should be garbage collected by the Provider when setting\n                    // \"pending\" events\n                    if (eventBlockNumber === \"pending\") {\n                        return;\n                    }\n                    // Evict any transaction hashes or block hashes over 12 blocks\n                    // old, since they should not return null anyways\n                    if (blockNumber - eventBlockNumber > 12) {\n                        delete this._emitted[key];\n                    }\n                });\n            }\n            // First polling cycle\n            if (this._lastBlockNumber === -2) {\n                this._lastBlockNumber = blockNumber - 1;\n            }\n            // Find all transaction hashes we are waiting on\n            this._events.forEach((event) => {\n                switch (event.type) {\n                    case \"tx\": {\n                        const hash = event.hash;\n                        let runner = this.getTransactionReceipt(hash).then((receipt) => {\n                            if (!receipt || receipt.blockNumber == null) {\n                                return null;\n                            }\n                            this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                            this.emit(hash, receipt);\n                            return null;\n                        }).catch((error) => { this.emit(\"error\", error); });\n                        runners.push(runner);\n                        break;\n                    }\n                    case \"filter\": {\n                        // We only allow a single getLogs to be in-flight at a time\n                        if (!event._inflight) {\n                            event._inflight = true;\n                            // This is the first filter for this event, so we want to\n                            // restrict events to events that happened no earlier than now\n                            if (event._lastBlockNumber === -2) {\n                                event._lastBlockNumber = blockNumber - 1;\n                            }\n                            // Filter from the last *known* event; due to load-balancing\n                            // and some nodes returning updated block numbers before\n                            // indexing events, a logs result with 0 entries cannot be\n                            // trusted and we must retry a range which includes it again\n                            const filter = event.filter;\n                            filter.fromBlock = event._lastBlockNumber + 1;\n                            filter.toBlock = blockNumber;\n                            // Prevent fitler ranges from growing too wild, since it is quite\n                            // likely there just haven't been any events to move the lastBlockNumber.\n                            const minFromBlock = filter.toBlock - this._maxFilterBlockRange;\n                            if (minFromBlock > filter.fromBlock) {\n                                filter.fromBlock = minFromBlock;\n                            }\n                            if (filter.fromBlock < 0) {\n                                filter.fromBlock = 0;\n                            }\n                            const runner = this.getLogs(filter).then((logs) => {\n                                // Allow the next getLogs\n                                event._inflight = false;\n                                if (logs.length === 0) {\n                                    return;\n                                }\n                                logs.forEach((log) => {\n                                    // Only when we get an event for a given block number\n                                    // can we trust the events are indexed\n                                    if (log.blockNumber > event._lastBlockNumber) {\n                                        event._lastBlockNumber = log.blockNumber;\n                                    }\n                                    // Make sure we stall requests to fetch blocks and txs\n                                    this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                                    this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n                                    this.emit(filter, log);\n                                });\n                            }).catch((error) => {\n                                this.emit(\"error\", error);\n                                // Allow another getLogs (the range was not updated)\n                                event._inflight = false;\n                            });\n                            runners.push(runner);\n                        }\n                        break;\n                    }\n                }\n            });\n            this._lastBlockNumber = blockNumber;\n            // Once all events for this loop have been processed, emit \"didPoll\"\n            Promise.all(runners).then(() => {\n                this.emit(\"didPoll\", pollId);\n            }).catch((error) => { this.emit(\"error\", error); });\n            return;\n        });\n    }\n    // Deprecated; do not use this\n    resetEventsBlock(blockNumber) {\n        this._lastBlockNumber = blockNumber - 1;\n        if (this.polling) {\n            this.poll();\n        }\n    }\n    get network() {\n        return this._network;\n    }\n    // This method should query the network if the underlying network\n    // can change, such as when connected to a JSON-RPC backend\n    detectNetwork() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"provider.detectNetwork\"\n            });\n        });\n    }\n    getNetwork() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const network = yield this._ready();\n            // Make sure we are still connected to the same network; this is\n            // only an external call for backends which can have the underlying\n            // network change spontaneously\n            const currentNetwork = yield this.detectNetwork();\n            if (network.chainId !== currentNetwork.chainId) {\n                // We are allowing network changes, things can get complex fast;\n                // make sure you know what you are doing if you use \"any\"\n                if (this.anyNetwork) {\n                    this._network = currentNetwork;\n                    // Reset all internal block number guards and caches\n                    this._lastBlockNumber = -2;\n                    this._fastBlockNumber = null;\n                    this._fastBlockNumberPromise = null;\n                    this._fastQueryDate = 0;\n                    this._emitted.block = -2;\n                    this._maxInternalBlockNumber = -1024;\n                    this._internalBlockNumber = null;\n                    // The \"network\" event MUST happen before this method resolves\n                    // so any events have a chance to unregister, so we stall an\n                    // additional event loop before returning from /this/ call\n                    this.emit(\"network\", currentNetwork, network);\n                    yield stall(0);\n                    return this._network;\n                }\n                const error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n                    event: \"changed\",\n                    network: network,\n                    detectedNetwork: currentNetwork\n                });\n                this.emit(\"error\", error);\n                throw error;\n            }\n            return network;\n        });\n    }\n    get blockNumber() {\n        this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber) => {\n            this._setFastBlockNumber(blockNumber);\n        }, (error) => { });\n        return (this._fastBlockNumber != null) ? this._fastBlockNumber : -1;\n    }\n    get polling() {\n        return (this._poller != null);\n    }\n    set polling(value) {\n        if (value && !this._poller) {\n            this._poller = setInterval(() => { this.poll(); }, this.pollingInterval);\n            if (!this._bootstrapPoll) {\n                this._bootstrapPoll = setTimeout(() => {\n                    this.poll();\n                    // We block additional polls until the polling interval\n                    // is done, to prevent overwhelming the poll function\n                    this._bootstrapPoll = setTimeout(() => {\n                        // If polling was disabled, something may require a poke\n                        // since starting the bootstrap poll and it was disabled\n                        if (!this._poller) {\n                            this.poll();\n                        }\n                        // Clear out the bootstrap so we can do another\n                        this._bootstrapPoll = null;\n                    }, this.pollingInterval);\n                }, 0);\n            }\n        }\n        else if (!value && this._poller) {\n            clearInterval(this._poller);\n            this._poller = null;\n        }\n    }\n    get pollingInterval() {\n        return this._pollingInterval;\n    }\n    set pollingInterval(value) {\n        if (typeof (value) !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n            throw new Error(\"invalid polling interval\");\n        }\n        this._pollingInterval = value;\n        if (this._poller) {\n            clearInterval(this._poller);\n            this._poller = setInterval(() => { this.poll(); }, this._pollingInterval);\n        }\n    }\n    _getFastBlockNumber() {\n        const now = getTime();\n        // Stale block number, request a newer value\n        if ((now - this._fastQueryDate) > 2 * this._pollingInterval) {\n            this._fastQueryDate = now;\n            this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber) => {\n                if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n                    this._fastBlockNumber = blockNumber;\n                }\n                return this._fastBlockNumber;\n            });\n        }\n        return this._fastBlockNumberPromise;\n    }\n    _setFastBlockNumber(blockNumber) {\n        // Older block, maybe a stale request\n        if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {\n            return;\n        }\n        // Update the time we updated the blocknumber\n        this._fastQueryDate = getTime();\n        // Newer block number, use  it\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n            this._fastBlockNumber = blockNumber;\n            this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n        }\n    }\n    waitForTransaction(transactionHash, confirmations, timeout) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._waitForTransaction(transactionHash, (confirmations == null) ? 1 : confirmations, timeout || 0, null);\n        });\n    }\n    _waitForTransaction(transactionHash, confirmations, timeout, replaceable) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const receipt = yield this.getTransactionReceipt(transactionHash);\n            // Receipt is already good\n            if ((receipt ? receipt.confirmations : 0) >= confirmations) {\n                return receipt;\n            }\n            // Poll until the receipt is good...\n            return new Promise((resolve, reject) => {\n                const cancelFuncs = [];\n                let done = false;\n                const alreadyDone = function () {\n                    if (done) {\n                        return true;\n                    }\n                    done = true;\n                    cancelFuncs.forEach((func) => { func(); });\n                    return false;\n                };\n                const minedHandler = (receipt) => {\n                    if (receipt.confirmations < confirmations) {\n                        return;\n                    }\n                    if (alreadyDone()) {\n                        return;\n                    }\n                    resolve(receipt);\n                };\n                this.on(transactionHash, minedHandler);\n                cancelFuncs.push(() => { this.removeListener(transactionHash, minedHandler); });\n                if (replaceable) {\n                    let lastBlockNumber = replaceable.startBlock;\n                    let scannedBlock = null;\n                    const replaceHandler = (blockNumber) => __awaiter(this, void 0, void 0, function* () {\n                        if (done) {\n                            return;\n                        }\n                        // Wait 1 second; this is only used in the case of a fault, so\n                        // we will trade off a little bit of latency for more consistent\n                        // results and fewer JSON-RPC calls\n                        yield stall(1000);\n                        this.getTransactionCount(replaceable.from).then((nonce) => __awaiter(this, void 0, void 0, function* () {\n                            if (done) {\n                                return;\n                            }\n                            if (nonce <= replaceable.nonce) {\n                                lastBlockNumber = blockNumber;\n                            }\n                            else {\n                                // First check if the transaction was mined\n                                {\n                                    const mined = yield this.getTransaction(transactionHash);\n                                    if (mined && mined.blockNumber != null) {\n                                        return;\n                                    }\n                                }\n                                // First time scanning. We start a little earlier for some\n                                // wiggle room here to handle the eventually consistent nature\n                                // of blockchain (e.g. the getTransactionCount was for a\n                                // different block)\n                                if (scannedBlock == null) {\n                                    scannedBlock = lastBlockNumber - 3;\n                                    if (scannedBlock < replaceable.startBlock) {\n                                        scannedBlock = replaceable.startBlock;\n                                    }\n                                }\n                                while (scannedBlock <= blockNumber) {\n                                    if (done) {\n                                        return;\n                                    }\n                                    const block = yield this.getBlockWithTransactions(scannedBlock);\n                                    for (let ti = 0; ti < block.transactions.length; ti++) {\n                                        const tx = block.transactions[ti];\n                                        // Successfully mined!\n                                        if (tx.hash === transactionHash) {\n                                            return;\n                                        }\n                                        // Matches our transaction from and nonce; its a replacement\n                                        if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {\n                                            if (done) {\n                                                return;\n                                            }\n                                            // Get the receipt of the replacement\n                                            const receipt = yield this.waitForTransaction(tx.hash, confirmations);\n                                            // Already resolved or rejected (prolly a timeout)\n                                            if (alreadyDone()) {\n                                                return;\n                                            }\n                                            // The reason we were replaced\n                                            let reason = \"replaced\";\n                                            if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                                                reason = \"repriced\";\n                                            }\n                                            else if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                                                reason = \"cancelled\";\n                                            }\n                                            // Explain why we were replaced\n                                            reject(logger.makeError(\"transaction was replaced\", Logger.errors.TRANSACTION_REPLACED, {\n                                                cancelled: (reason === \"replaced\" || reason === \"cancelled\"),\n                                                reason,\n                                                replacement: this._wrapTransaction(tx),\n                                                hash: transactionHash,\n                                                receipt\n                                            }));\n                                            return;\n                                        }\n                                    }\n                                    scannedBlock++;\n                                }\n                            }\n                            if (done) {\n                                return;\n                            }\n                            this.once(\"block\", replaceHandler);\n                        }), (error) => {\n                            if (done) {\n                                return;\n                            }\n                            this.once(\"block\", replaceHandler);\n                        });\n                    });\n                    if (done) {\n                        return;\n                    }\n                    this.once(\"block\", replaceHandler);\n                    cancelFuncs.push(() => {\n                        this.removeListener(\"block\", replaceHandler);\n                    });\n                }\n                if (typeof (timeout) === \"number\" && timeout > 0) {\n                    const timer = setTimeout(() => {\n                        if (alreadyDone()) {\n                            return;\n                        }\n                        reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, { timeout: timeout }));\n                    }, timeout);\n                    if (timer.unref) {\n                        timer.unref();\n                    }\n                    cancelFuncs.push(() => { clearTimeout(timer); });\n                }\n            });\n        });\n    }\n    getBlockNumber() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._getInternalBlockNumber(0);\n        });\n    }\n    getGasPrice() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const result = yield this.perform(\"getGasPrice\", {});\n            try {\n                return BigNumber.from(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getGasPrice\",\n                    result, error\n                });\n            }\n        });\n    }\n    getBalance(addressOrName, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            const result = yield this.perform(\"getBalance\", params);\n            try {\n                return BigNumber.from(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getBalance\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    getTransactionCount(addressOrName, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            const result = yield this.perform(\"getTransactionCount\", params);\n            try {\n                return BigNumber.from(result).toNumber();\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getTransactionCount\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    getCode(addressOrName, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            const result = yield this.perform(\"getCode\", params);\n            try {\n                return hexlify(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getCode\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    getStorageAt(addressOrName, position, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag),\n                position: Promise.resolve(position).then((p) => hexValue(p))\n            });\n            const result = yield this.perform(\"getStorageAt\", params);\n            try {\n                return hexlify(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getStorageAt\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    // This should be called by any subclass wrapping a TransactionResponse\n    _wrapTransaction(tx, hash, startBlock) {\n        if (hash != null && hexDataLength(hash) !== 32) {\n            throw new Error(\"invalid response - sendTransaction\");\n        }\n        const result = tx;\n        // Check the hash we expect is the same as the hash the server reported\n        if (hash != null && tx.hash !== hash) {\n            logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });\n        }\n        result.wait = (confirms, timeout) => __awaiter(this, void 0, void 0, function* () {\n            if (confirms == null) {\n                confirms = 1;\n            }\n            if (timeout == null) {\n                timeout = 0;\n            }\n            // Get the details to detect replacement\n            let replacement = undefined;\n            if (confirms !== 0 && startBlock != null) {\n                replacement = {\n                    data: tx.data,\n                    from: tx.from,\n                    nonce: tx.nonce,\n                    to: tx.to,\n                    value: tx.value,\n                    startBlock\n                };\n            }\n            const receipt = yield this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n            if (receipt == null && confirms === 0) {\n                return null;\n            }\n            // No longer pending, allow the polling loop to garbage collect this\n            this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n            if (receipt.status === 0) {\n                logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n                    transactionHash: tx.hash,\n                    transaction: tx,\n                    receipt: receipt\n                });\n            }\n            return receipt;\n        });\n        return result;\n    }\n    sendTransaction(signedTransaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const hexTx = yield Promise.resolve(signedTransaction).then(t => hexlify(t));\n            const tx = this.formatter.transaction(signedTransaction);\n            if (tx.confirmations == null) {\n                tx.confirmations = 0;\n            }\n            const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n            try {\n                const hash = yield this.perform(\"sendTransaction\", { signedTransaction: hexTx });\n                return this._wrapTransaction(tx, hash, blockNumber);\n            }\n            catch (error) {\n                error.transaction = tx;\n                error.transactionHash = tx.hash;\n                throw error;\n            }\n        });\n    }\n    _getTransactionRequest(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const values = yield transaction;\n            const tx = {};\n            [\"from\", \"to\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => (v ? this._getAddress(v) : null));\n            });\n            [\"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"value\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => (v ? BigNumber.from(v) : null));\n            });\n            [\"type\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => ((v != null) ? v : null));\n            });\n            if (values.accessList) {\n                tx.accessList = this.formatter.accessList(values.accessList);\n            }\n            [\"data\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => (v ? hexlify(v) : null));\n            });\n            return this.formatter.transactionRequest(yield resolveProperties(tx));\n        });\n    }\n    _getFilter(filter) {\n        return __awaiter(this, void 0, void 0, function* () {\n            filter = yield filter;\n            const result = {};\n            if (filter.address != null) {\n                result.address = this._getAddress(filter.address);\n            }\n            [\"blockHash\", \"topics\"].forEach((key) => {\n                if (filter[key] == null) {\n                    return;\n                }\n                result[key] = filter[key];\n            });\n            [\"fromBlock\", \"toBlock\"].forEach((key) => {\n                if (filter[key] == null) {\n                    return;\n                }\n                result[key] = this._getBlockTag(filter[key]);\n            });\n            return this.formatter.filter(yield resolveProperties(result));\n        });\n    }\n    _call(transaction, blockTag, attempt) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (attempt >= MAX_CCIP_REDIRECTS) {\n                logger.throwError(\"CCIP read exceeded maximum redirections\", Logger.errors.SERVER_ERROR, {\n                    redirects: attempt, transaction\n                });\n            }\n            const txSender = transaction.to;\n            const result = yield this.perform(\"call\", { transaction, blockTag });\n            // CCIP Read request via OffchainLookup(address,string[],bytes,bytes4,bytes)\n            if (attempt >= 0 && blockTag === \"latest\" && txSender != null && result.substring(0, 10) === \"0x556f1830\" && (hexDataLength(result) % 32 === 4)) {\n                try {\n                    const data = hexDataSlice(result, 4);\n                    // Check the sender of the OffchainLookup matches the transaction\n                    const sender = hexDataSlice(data, 0, 32);\n                    if (!BigNumber.from(sender).eq(txSender)) {\n                        logger.throwError(\"CCIP Read sender did not match\", Logger.errors.CALL_EXCEPTION, {\n                            name: \"OffchainLookup\",\n                            signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                            transaction, data: result\n                        });\n                    }\n                    // Read the URLs from the response\n                    const urls = [];\n                    const urlsOffset = BigNumber.from(hexDataSlice(data, 32, 64)).toNumber();\n                    const urlsLength = BigNumber.from(hexDataSlice(data, urlsOffset, urlsOffset + 32)).toNumber();\n                    const urlsData = hexDataSlice(data, urlsOffset + 32);\n                    for (let u = 0; u < urlsLength; u++) {\n                        const url = _parseString(urlsData, u * 32);\n                        if (url == null) {\n                            logger.throwError(\"CCIP Read contained corrupt URL string\", Logger.errors.CALL_EXCEPTION, {\n                                name: \"OffchainLookup\",\n                                signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                                transaction, data: result\n                            });\n                        }\n                        urls.push(url);\n                    }\n                    // Get the CCIP calldata to forward\n                    const calldata = _parseBytes(data, 64);\n                    // Get the callbackSelector (bytes4)\n                    if (!BigNumber.from(hexDataSlice(data, 100, 128)).isZero()) {\n                        logger.throwError(\"CCIP Read callback selector included junk\", Logger.errors.CALL_EXCEPTION, {\n                            name: \"OffchainLookup\",\n                            signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                            transaction, data: result\n                        });\n                    }\n                    const callbackSelector = hexDataSlice(data, 96, 100);\n                    // Get the extra data to send back to the contract as context\n                    const extraData = _parseBytes(data, 128);\n                    const ccipResult = yield this.ccipReadFetch(transaction, calldata, urls);\n                    if (ccipResult == null) {\n                        logger.throwError(\"CCIP Read disabled or provided no URLs\", Logger.errors.CALL_EXCEPTION, {\n                            name: \"OffchainLookup\",\n                            signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                            transaction, data: result\n                        });\n                    }\n                    const tx = {\n                        to: txSender,\n                        data: hexConcat([callbackSelector, encodeBytes([ccipResult, extraData])])\n                    };\n                    return this._call(tx, blockTag, attempt + 1);\n                }\n                catch (error) {\n                    if (error.code === Logger.errors.SERVER_ERROR) {\n                        throw error;\n                    }\n                }\n            }\n            try {\n                return hexlify(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"call\",\n                    params: { transaction, blockTag }, result, error\n                });\n            }\n        });\n    }\n    call(transaction, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const resolved = yield resolveProperties({\n                transaction: this._getTransactionRequest(transaction),\n                blockTag: this._getBlockTag(blockTag),\n                ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)\n            });\n            return this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0 : -1);\n        });\n    }\n    estimateGas(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                transaction: this._getTransactionRequest(transaction)\n            });\n            const result = yield this.perform(\"estimateGas\", params);\n            try {\n                return BigNumber.from(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"estimateGas\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    _getAddress(addressOrName) {\n        return __awaiter(this, void 0, void 0, function* () {\n            addressOrName = yield addressOrName;\n            if (typeof (addressOrName) !== \"string\") {\n                logger.throwArgumentError(\"invalid address or ENS name\", \"name\", addressOrName);\n            }\n            const address = yield this.resolveName(addressOrName);\n            if (address == null) {\n                logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: `resolveName(${JSON.stringify(addressOrName)})`\n                });\n            }\n            return address;\n        });\n    }\n    _getBlock(blockHashOrBlockTag, includeTransactions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            blockHashOrBlockTag = yield blockHashOrBlockTag;\n            // If blockTag is a number (not \"latest\", etc), this is the block number\n            let blockNumber = -128;\n            const params = {\n                includeTransactions: !!includeTransactions\n            };\n            if (isHexString(blockHashOrBlockTag, 32)) {\n                params.blockHash = blockHashOrBlockTag;\n            }\n            else {\n                try {\n                    params.blockTag = yield this._getBlockTag(blockHashOrBlockTag);\n                    if (isHexString(params.blockTag)) {\n                        blockNumber = parseInt(params.blockTag.substring(2), 16);\n                    }\n                }\n                catch (error) {\n                    logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n                }\n            }\n            return poll(() => __awaiter(this, void 0, void 0, function* () {\n                const block = yield this.perform(\"getBlock\", params);\n                // Block was not found\n                if (block == null) {\n                    // For blockhashes, if we didn't say it existed, that blockhash may\n                    // not exist. If we did see it though, perhaps from a log, we know\n                    // it exists, and this node is just not caught up yet.\n                    if (params.blockHash != null) {\n                        if (this._emitted[\"b:\" + params.blockHash] == null) {\n                            return null;\n                        }\n                    }\n                    // For block tags, if we are asking for a future block, we return null\n                    if (params.blockTag != null) {\n                        if (blockNumber > this._emitted.block) {\n                            return null;\n                        }\n                    }\n                    // Retry on the next block\n                    return undefined;\n                }\n                // Add transactions\n                if (includeTransactions) {\n                    let blockNumber = null;\n                    for (let i = 0; i < block.transactions.length; i++) {\n                        const tx = block.transactions[i];\n                        if (tx.blockNumber == null) {\n                            tx.confirmations = 0;\n                        }\n                        else if (tx.confirmations == null) {\n                            if (blockNumber == null) {\n                                blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                            }\n                            // Add the confirmations using the fast block number (pessimistic)\n                            let confirmations = (blockNumber - tx.blockNumber) + 1;\n                            if (confirmations <= 0) {\n                                confirmations = 1;\n                            }\n                            tx.confirmations = confirmations;\n                        }\n                    }\n                    const blockWithTxs = this.formatter.blockWithTransactions(block);\n                    blockWithTxs.transactions = blockWithTxs.transactions.map((tx) => this._wrapTransaction(tx));\n                    return blockWithTxs;\n                }\n                return this.formatter.block(block);\n            }), { oncePoll: this });\n        });\n    }\n    getBlock(blockHashOrBlockTag) {\n        return (this._getBlock(blockHashOrBlockTag, false));\n    }\n    getBlockWithTransactions(blockHashOrBlockTag) {\n        return (this._getBlock(blockHashOrBlockTag, true));\n    }\n    getTransaction(transactionHash) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            transactionHash = yield transactionHash;\n            const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n            return poll(() => __awaiter(this, void 0, void 0, function* () {\n                const result = yield this.perform(\"getTransaction\", params);\n                if (result == null) {\n                    if (this._emitted[\"t:\" + transactionHash] == null) {\n                        return null;\n                    }\n                    return undefined;\n                }\n                const tx = this.formatter.transactionResponse(result);\n                if (tx.blockNumber == null) {\n                    tx.confirmations = 0;\n                }\n                else if (tx.confirmations == null) {\n                    const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                    // Add the confirmations using the fast block number (pessimistic)\n                    let confirmations = (blockNumber - tx.blockNumber) + 1;\n                    if (confirmations <= 0) {\n                        confirmations = 1;\n                    }\n                    tx.confirmations = confirmations;\n                }\n                return this._wrapTransaction(tx);\n            }), { oncePoll: this });\n        });\n    }\n    getTransactionReceipt(transactionHash) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            transactionHash = yield transactionHash;\n            const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n            return poll(() => __awaiter(this, void 0, void 0, function* () {\n                const result = yield this.perform(\"getTransactionReceipt\", params);\n                if (result == null) {\n                    if (this._emitted[\"t:\" + transactionHash] == null) {\n                        return null;\n                    }\n                    return undefined;\n                }\n                // \"geth-etc\" returns receipts before they are ready\n                if (result.blockHash == null) {\n                    return undefined;\n                }\n                const receipt = this.formatter.receipt(result);\n                if (receipt.blockNumber == null) {\n                    receipt.confirmations = 0;\n                }\n                else if (receipt.confirmations == null) {\n                    const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                    // Add the confirmations using the fast block number (pessimistic)\n                    let confirmations = (blockNumber - receipt.blockNumber) + 1;\n                    if (confirmations <= 0) {\n                        confirmations = 1;\n                    }\n                    receipt.confirmations = confirmations;\n                }\n                return receipt;\n            }), { oncePoll: this });\n        });\n    }\n    getLogs(filter) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({ filter: this._getFilter(filter) });\n            const logs = yield this.perform(\"getLogs\", params);\n            logs.forEach((log) => {\n                if (log.removed == null) {\n                    log.removed = false;\n                }\n            });\n            return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n        });\n    }\n    getEtherPrice() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            return this.perform(\"getEtherPrice\", {});\n        });\n    }\n    _getBlockTag(blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            blockTag = yield blockTag;\n            if (typeof (blockTag) === \"number\" && blockTag < 0) {\n                if (blockTag % 1) {\n                    logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n                }\n                let blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                blockNumber += blockTag;\n                if (blockNumber < 0) {\n                    blockNumber = 0;\n                }\n                return this.formatter.blockTag(blockNumber);\n            }\n            return this.formatter.blockTag(blockTag);\n        });\n    }\n    getResolver(name) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let currentName = name;\n            while (true) {\n                if (currentName === \"\" || currentName === \".\") {\n                    return null;\n                }\n                // Optimization since the eth node cannot change and does\n                // not have a wildcard resolver\n                if (name !== \"eth\" && currentName === \"eth\") {\n                    return null;\n                }\n                // Check the current node for a resolver\n                const addr = yield this._getResolver(currentName, \"getResolver\");\n                // Found a resolver!\n                if (addr != null) {\n                    const resolver = new Resolver(this, addr, name);\n                    // Legacy resolver found, using EIP-2544 so it isn't safe to use\n                    if (currentName !== name && !(yield resolver.supportsWildcard())) {\n                        return null;\n                    }\n                    return resolver;\n                }\n                // Get the parent node\n                currentName = currentName.split(\".\").slice(1).join(\".\");\n            }\n        });\n    }\n    _getResolver(name, operation) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (operation == null) {\n                operation = \"ENS\";\n            }\n            const network = yield this.getNetwork();\n            // No ENS...\n            if (!network.ensAddress) {\n                logger.throwError(\"network does not support ENS\", Logger.errors.UNSUPPORTED_OPERATION, { operation, network: network.name });\n            }\n            try {\n                // keccak256(\"resolver(bytes32)\")\n                const addrData = yield this.call({\n                    to: network.ensAddress,\n                    data: (\"0x0178b8bf\" + namehash(name).substring(2))\n                });\n                return this.formatter.callAddress(addrData);\n            }\n            catch (error) {\n                // ENS registry cannot throw errors on resolver(bytes32)\n            }\n            return null;\n        });\n    }\n    resolveName(name) {\n        return __awaiter(this, void 0, void 0, function* () {\n            name = yield name;\n            // If it is already an address, nothing to resolve\n            try {\n                return Promise.resolve(this.formatter.address(name));\n            }\n            catch (error) {\n                // If is is a hexstring, the address is bad (See #694)\n                if (isHexString(name)) {\n                    throw error;\n                }\n            }\n            if (typeof (name) !== \"string\") {\n                logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n            }\n            // Get the addr from the resolver\n            const resolver = yield this.getResolver(name);\n            if (!resolver) {\n                return null;\n            }\n            return yield resolver.getAddress();\n        });\n    }\n    lookupAddress(address) {\n        return __awaiter(this, void 0, void 0, function* () {\n            address = yield address;\n            address = this.formatter.address(address);\n            const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n            const resolverAddr = yield this._getResolver(node, \"lookupAddress\");\n            if (resolverAddr == null) {\n                return null;\n            }\n            // keccak(\"name(bytes32)\")\n            const name = _parseString(yield this.call({\n                to: resolverAddr,\n                data: (\"0x691f3431\" + namehash(node).substring(2))\n            }), 0);\n            const addr = yield this.resolveName(name);\n            if (addr != address) {\n                return null;\n            }\n            return name;\n        });\n    }\n    getAvatar(nameOrAddress) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let resolver = null;\n            if (isHexString(nameOrAddress)) {\n                // Address; reverse lookup\n                const address = this.formatter.address(nameOrAddress);\n                const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n                const resolverAddress = yield this._getResolver(node, \"getAvatar\");\n                if (!resolverAddress) {\n                    return null;\n                }\n                // Try resolving the avatar against the addr.reverse resolver\n                resolver = new Resolver(this, resolverAddress, node);\n                try {\n                    const avatar = yield resolver.getAvatar();\n                    if (avatar) {\n                        return avatar.url;\n                    }\n                }\n                catch (error) {\n                    if (error.code !== Logger.errors.CALL_EXCEPTION) {\n                        throw error;\n                    }\n                }\n                // Try getting the name and performing forward lookup; allowing wildcards\n                try {\n                    // keccak(\"name(bytes32)\")\n                    const name = _parseString(yield this.call({\n                        to: resolverAddress,\n                        data: (\"0x691f3431\" + namehash(node).substring(2))\n                    }), 0);\n                    resolver = yield this.getResolver(name);\n                }\n                catch (error) {\n                    if (error.code !== Logger.errors.CALL_EXCEPTION) {\n                        throw error;\n                    }\n                    return null;\n                }\n            }\n            else {\n                // ENS name; forward lookup with wildcard\n                resolver = yield this.getResolver(nameOrAddress);\n                if (!resolver) {\n                    return null;\n                }\n            }\n            const avatar = yield resolver.getAvatar();\n            if (avatar == null) {\n                return null;\n            }\n            return avatar.url;\n        });\n    }\n    perform(method, params) {\n        return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n    }\n    _startEvent(event) {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n    _stopEvent(event) {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n    _addEventListener(eventName, listener, once) {\n        const event = new Event(getEventTag(eventName), listener, once);\n        this._events.push(event);\n        this._startEvent(event);\n        return this;\n    }\n    on(eventName, listener) {\n        return this._addEventListener(eventName, listener, false);\n    }\n    once(eventName, listener) {\n        return this._addEventListener(eventName, listener, true);\n    }\n    emit(eventName, ...args) {\n        let result = false;\n        let stopped = [];\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag) {\n                return true;\n            }\n            setTimeout(() => {\n                event.listener.apply(this, args);\n            }, 0);\n            result = true;\n            if (event.once) {\n                stopped.push(event);\n                return false;\n            }\n            return true;\n        });\n        stopped.forEach((event) => { this._stopEvent(event); });\n        return result;\n    }\n    listenerCount(eventName) {\n        if (!eventName) {\n            return this._events.length;\n        }\n        let eventTag = getEventTag(eventName);\n        return this._events.filter((event) => {\n            return (event.tag === eventTag);\n        }).length;\n    }\n    listeners(eventName) {\n        if (eventName == null) {\n            return this._events.map((event) => event.listener);\n        }\n        let eventTag = getEventTag(eventName);\n        return this._events\n            .filter((event) => (event.tag === eventTag))\n            .map((event) => event.listener);\n    }\n    off(eventName, listener) {\n        if (listener == null) {\n            return this.removeAllListeners(eventName);\n        }\n        const stopped = [];\n        let found = false;\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag || event.listener != listener) {\n                return true;\n            }\n            if (found) {\n                return true;\n            }\n            found = true;\n            stopped.push(event);\n            return false;\n        });\n        stopped.forEach((event) => { this._stopEvent(event); });\n        return this;\n    }\n    removeAllListeners(eventName) {\n        let stopped = [];\n        if (eventName == null) {\n            stopped = this._events;\n            this._events = [];\n        }\n        else {\n            const eventTag = getEventTag(eventName);\n            this._events = this._events.filter((event) => {\n                if (event.tag !== eventTag) {\n                    return true;\n                }\n                stopped.push(event);\n                return false;\n            });\n        }\n        stopped.forEach((event) => { this._stopEvent(event); });\n        return this;\n    }\n}\n//# sourceMappingURL=base-provider.js.map"]},"metadata":{},"sourceType":"module"}