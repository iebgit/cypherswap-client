"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Animated = void 0;
var react_1 = require("react");
var prop_types_1 = __importDefault(require("prop-types"));
var animejs_1 = __importDefault(require("animejs"));
var animation_1 = require("@arwes/animation");
var Animated = function (props) {
    var asProvided = props.as, animated = props.animated, className = props.className, style = props.style, externalRef = props.rootRef, // TODO: Use external ref.
    otherProps = __rest(props, ["as", "animated", "className", "style", "rootRef"]);
    var as = react_1.useMemo(function () { return asProvided || 'div'; }, []);
    // TODO: Add external root ref.
    var rootRef = react_1.useRef(null);
    var animator = animation_1.useAnimator();
    if (process.env.NODE_ENV !== 'production' && !animator) {
        throw new Error('Animated component can only be used inside an Animator.');
    }
    var animate = (animator || {}).animate;
    var dynamicStyles = animate ? animated === null || animated === void 0 ? void 0 : animated.initialStyles : null;
    var initialAttributes = animate ? animated === null || animated === void 0 ? void 0 : animated.initialAttributes : null;
    react_1.useEffect(function () {
        return function () {
            animejs_1.default.remove(rootRef.current);
        };
    }, []);
    react_1.useEffect(function () {
        if (!animator || !animator.animate || !animated) {
            return;
        }
        switch (animator.flow.value) {
            case animation_1.ENTERING: {
                if (animated.entering) {
                    var animationParams_1 = {
                        targets: rootRef.current,
                        duration: animator.duration.enter
                    };
                    var animations = Array.isArray(animated.entering)
                        ? animated.entering
                        : [animated.entering];
                    animations.forEach(function (animation) {
                        if (typeof animation === 'function') {
                            animation(animationParams_1);
                        }
                        else {
                            animejs_1.default(__assign(__assign({ easing: 'easeOutSine' }, animation), { targets: rootRef.current, duration: animator.duration.enter }));
                        }
                    });
                }
                break;
            }
            case animation_1.EXITING: {
                if (animated.exiting) {
                    var animationParams_2 = {
                        targets: rootRef.current,
                        duration: animator.duration.exit
                    };
                    var animations = Array.isArray(animated.exiting)
                        ? animated.exiting
                        : [animated.exiting];
                    animations.forEach(function (animation) {
                        if (typeof animation === 'function') {
                            animation(animationParams_2);
                        }
                        else {
                            animejs_1.default(__assign(__assign({ easing: 'easeOutSine' }, animation), { targets: rootRef.current, duration: animator.duration.exit }));
                        }
                    });
                }
                break;
            }
        }
    }, [animator === null || animator === void 0 ? void 0 : animator.flow]);
    return react_1.createElement(as, __assign(__assign(__assign({}, otherProps), initialAttributes), { className: className, style: __assign(__assign({}, style), dynamicStyles), ref: rootRef }));
};
exports.Animated = Animated;
Animated.propTypes = {
    as: prop_types_1.default.string.isRequired,
    animated: prop_types_1.default.shape({
        initialAttributes: prop_types_1.default.object,
        initialStyles: prop_types_1.default.object,
        entering: prop_types_1.default.oneOfType([
            prop_types_1.default.func,
            prop_types_1.default.object,
            prop_types_1.default.arrayOf(prop_types_1.default.oneOfType([
                prop_types_1.default.func,
                prop_types_1.default.object
            ]))
        ]),
        exiting: prop_types_1.default.oneOfType([
            prop_types_1.default.func,
            prop_types_1.default.object,
            prop_types_1.default.arrayOf(prop_types_1.default.oneOfType([
                prop_types_1.default.func,
                prop_types_1.default.object
            ]))
        ])
    })
};
Animated.defaultProps = {
    as: 'div'
};
