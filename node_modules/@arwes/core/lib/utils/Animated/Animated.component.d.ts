import { CSSProperties, MutableRefObject, ReactElement } from 'react';
import PropTypes from 'prop-types';
import anime from 'animejs';
import { NoInfer } from '../types';
interface AnimatedSettingsTransitionFunctionParams {
    targets: anime.AnimeAnimParams['targets'];
    duration: number;
    delay?: number;
}
declare type AnimatedSettingsTransitionFunction = (params: AnimatedSettingsTransitionFunctionParams) => void;
declare type AnimatedSettingsTransitionTypes = AnimatedSettingsTransitionFunction | anime.AnimeParams;
declare type AnimatedSettingsTransition = AnimatedSettingsTransitionTypes | AnimatedSettingsTransitionTypes[];
interface AnimatedSettings {
    initialAttributes?: {
        [name: string]: any;
    };
    initialStyles?: CSSProperties;
    entering?: AnimatedSettingsTransition;
    exiting?: AnimatedSettingsTransition;
}
interface AnimatedProps<E> {
    as?: keyof HTMLElementTagNameMap | keyof SVGElementTagNameMap;
    animated?: AnimatedSettings;
    className?: string;
    style?: CSSProperties;
    rootRef?: MutableRefObject<E | null> | ((node: E) => void);
}
declare const Animated: {
    <E, T>(props: AnimatedProps<E> & NoInfer<T>): ReactElement;
    propTypes: {
        as: PropTypes.Validator<string>;
        animated: PropTypes.Requireable<PropTypes.InferProps<{
            initialAttributes: PropTypes.Requireable<object>;
            initialStyles: PropTypes.Requireable<object>;
            entering: PropTypes.Requireable<object>;
            exiting: PropTypes.Requireable<object>;
        }>>;
    };
    defaultProps: {
        as: string;
    };
};
export { AnimatedSettingsTransitionFunctionParams, AnimatedSettingsTransitionFunction, AnimatedSettingsTransition, AnimatedSettings, AnimatedProps, Animated };
