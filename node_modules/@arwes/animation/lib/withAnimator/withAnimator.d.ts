import { ComponentType, ForwardRefExoticComponent, PropsWithoutRef, RefAttributes } from 'react';
import { AnimatorClassSettings, AnimatorInstanceSettings, AnimatorRef } from '../constants';
interface WithAnimatorInputProps {
    animator: AnimatorRef;
}
interface WithAnimatorOutputProps {
    animator?: AnimatorInstanceSettings;
}
declare function withAnimator<T extends ComponentType<P>, P extends WithAnimatorInputProps = WithAnimatorInputProps>(classAnimator?: AnimatorClassSettings): (InputComponent: T) => ForwardRefExoticComponent<PropsWithoutRef<Pick<P, Exclude<keyof P, "animator">> & WithAnimatorOutputProps> & RefAttributes<T>> & {
    defaultProps: Partial<Pick<P, Exclude<keyof P, "animator">> & WithAnimatorOutputProps> & WithAnimatorOutputProps;
};
export { WithAnimatorInputProps, WithAnimatorOutputProps, withAnimator };
